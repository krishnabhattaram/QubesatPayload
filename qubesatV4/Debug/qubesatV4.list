
qubesatV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d7c  08006d7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d84  08006d84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08006dfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006dfc  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd59  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  0002bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002e228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151db  00000000  00000000  0002eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5eb  00000000  00000000  00043d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000834c7  00000000  00000000  00050336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d37fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a74  00000000  00000000  000d3850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006b94 	.word	0x08006b94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006b94 	.word	0x08006b94

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f852 	bl	80004e0 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_d2uiz>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2200      	movs	r2, #0
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004aa:	0004      	movs	r4, r0
 80004ac:	000d      	movs	r5, r1
 80004ae:	f001 fdbd 	bl	800202c <__aeabi_dcmpge>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d104      	bne.n	80004c0 <__aeabi_d2uiz+0x1c>
 80004b6:	0020      	movs	r0, r4
 80004b8:	0029      	movs	r1, r5
 80004ba:	f001 fcd5 	bl	8001e68 <__aeabi_d2iz>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <__aeabi_d2uiz+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0020      	movs	r0, r4
 80004c6:	0029      	movs	r1, r5
 80004c8:	f001 f93c 	bl	8001744 <__aeabi_dsub>
 80004cc:	f001 fccc 	bl	8001e68 <__aeabi_d2iz>
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	469c      	mov	ip, r3
 80004d6:	4460      	add	r0, ip
 80004d8:	e7f1      	b.n	80004be <__aeabi_d2uiz+0x1a>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	41e00000 	.word	0x41e00000

080004e0 <__udivmoddi4>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	4657      	mov	r7, sl
 80004e4:	464e      	mov	r6, r9
 80004e6:	4645      	mov	r5, r8
 80004e8:	46de      	mov	lr, fp
 80004ea:	b5e0      	push	{r5, r6, r7, lr}
 80004ec:	0004      	movs	r4, r0
 80004ee:	000d      	movs	r5, r1
 80004f0:	4692      	mov	sl, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	b083      	sub	sp, #12
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d830      	bhi.n	800055c <__udivmoddi4+0x7c>
 80004fa:	d02d      	beq.n	8000558 <__udivmoddi4+0x78>
 80004fc:	4649      	mov	r1, r9
 80004fe:	4650      	mov	r0, sl
 8000500:	f001 fdbc 	bl	800207c <__clzdi2>
 8000504:	0029      	movs	r1, r5
 8000506:	0006      	movs	r6, r0
 8000508:	0020      	movs	r0, r4
 800050a:	f001 fdb7 	bl	800207c <__clzdi2>
 800050e:	1a33      	subs	r3, r6, r0
 8000510:	4698      	mov	r8, r3
 8000512:	3b20      	subs	r3, #32
 8000514:	469b      	mov	fp, r3
 8000516:	d433      	bmi.n	8000580 <__udivmoddi4+0xa0>
 8000518:	465a      	mov	r2, fp
 800051a:	4653      	mov	r3, sl
 800051c:	4093      	lsls	r3, r2
 800051e:	4642      	mov	r2, r8
 8000520:	001f      	movs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d83a      	bhi.n	80005a2 <__udivmoddi4+0xc2>
 800052c:	42af      	cmp	r7, r5
 800052e:	d100      	bne.n	8000532 <__udivmoddi4+0x52>
 8000530:	e078      	b.n	8000624 <__udivmoddi4+0x144>
 8000532:	465b      	mov	r3, fp
 8000534:	1ba4      	subs	r4, r4, r6
 8000536:	41bd      	sbcs	r5, r7
 8000538:	2b00      	cmp	r3, #0
 800053a:	da00      	bge.n	800053e <__udivmoddi4+0x5e>
 800053c:	e075      	b.n	800062a <__udivmoddi4+0x14a>
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	465a      	mov	r2, fp
 800054a:	4093      	lsls	r3, r2
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	4642      	mov	r2, r8
 8000552:	4093      	lsls	r3, r2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	e028      	b.n	80005aa <__udivmoddi4+0xca>
 8000558:	4282      	cmp	r2, r0
 800055a:	d9cf      	bls.n	80004fc <__udivmoddi4+0x1c>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <__udivmoddi4+0x8e>
 800056a:	601c      	str	r4, [r3, #0]
 800056c:	605d      	str	r5, [r3, #4]
 800056e:	9800      	ldr	r0, [sp, #0]
 8000570:	9901      	ldr	r1, [sp, #4]
 8000572:	b003      	add	sp, #12
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4652      	mov	r2, sl
 8000588:	40da      	lsrs	r2, r3
 800058a:	4641      	mov	r1, r8
 800058c:	0013      	movs	r3, r2
 800058e:	464a      	mov	r2, r9
 8000590:	408a      	lsls	r2, r1
 8000592:	0017      	movs	r7, r2
 8000594:	4642      	mov	r2, r8
 8000596:	431f      	orrs	r7, r3
 8000598:	4653      	mov	r3, sl
 800059a:	4093      	lsls	r3, r2
 800059c:	001e      	movs	r6, r3
 800059e:	42af      	cmp	r7, r5
 80005a0:	d9c4      	bls.n	800052c <__udivmoddi4+0x4c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	4643      	mov	r3, r8
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0d9      	beq.n	8000564 <__udivmoddi4+0x84>
 80005b0:	07fb      	lsls	r3, r7, #31
 80005b2:	0872      	lsrs	r2, r6, #1
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4646      	mov	r6, r8
 80005b8:	087b      	lsrs	r3, r7, #1
 80005ba:	e00e      	b.n	80005da <__udivmoddi4+0xfa>
 80005bc:	42ab      	cmp	r3, r5
 80005be:	d101      	bne.n	80005c4 <__udivmoddi4+0xe4>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	d80c      	bhi.n	80005de <__udivmoddi4+0xfe>
 80005c4:	1aa4      	subs	r4, r4, r2
 80005c6:	419d      	sbcs	r5, r3
 80005c8:	2001      	movs	r0, #1
 80005ca:	1924      	adds	r4, r4, r4
 80005cc:	416d      	adcs	r5, r5
 80005ce:	2100      	movs	r1, #0
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1824      	adds	r4, r4, r0
 80005d4:	414d      	adcs	r5, r1
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d006      	beq.n	80005e8 <__udivmoddi4+0x108>
 80005da:	42ab      	cmp	r3, r5
 80005dc:	d9ee      	bls.n	80005bc <__udivmoddi4+0xdc>
 80005de:	3e01      	subs	r6, #1
 80005e0:	1924      	adds	r4, r4, r4
 80005e2:	416d      	adcs	r5, r5
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d1f8      	bne.n	80005da <__udivmoddi4+0xfa>
 80005e8:	9800      	ldr	r0, [sp, #0]
 80005ea:	9901      	ldr	r1, [sp, #4]
 80005ec:	465b      	mov	r3, fp
 80005ee:	1900      	adds	r0, r0, r4
 80005f0:	4169      	adcs	r1, r5
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db24      	blt.n	8000640 <__udivmoddi4+0x160>
 80005f6:	002b      	movs	r3, r5
 80005f8:	465a      	mov	r2, fp
 80005fa:	4644      	mov	r4, r8
 80005fc:	40d3      	lsrs	r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	db2a      	blt.n	8000662 <__udivmoddi4+0x182>
 800060c:	0026      	movs	r6, r4
 800060e:	409e      	lsls	r6, r3
 8000610:	0033      	movs	r3, r6
 8000612:	0026      	movs	r6, r4
 8000614:	4647      	mov	r7, r8
 8000616:	40be      	lsls	r6, r7
 8000618:	0032      	movs	r2, r6
 800061a:	1a80      	subs	r0, r0, r2
 800061c:	4199      	sbcs	r1, r3
 800061e:	9000      	str	r0, [sp, #0]
 8000620:	9101      	str	r1, [sp, #4]
 8000622:	e79f      	b.n	8000564 <__udivmoddi4+0x84>
 8000624:	42a3      	cmp	r3, r4
 8000626:	d8bc      	bhi.n	80005a2 <__udivmoddi4+0xc2>
 8000628:	e783      	b.n	8000532 <__udivmoddi4+0x52>
 800062a:	4642      	mov	r2, r8
 800062c:	2320      	movs	r3, #32
 800062e:	2100      	movs	r1, #0
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	2200      	movs	r2, #0
 8000634:	9100      	str	r1, [sp, #0]
 8000636:	9201      	str	r2, [sp, #4]
 8000638:	2201      	movs	r2, #1
 800063a:	40da      	lsrs	r2, r3
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	e786      	b.n	800054e <__udivmoddi4+0x6e>
 8000640:	4642      	mov	r2, r8
 8000642:	2320      	movs	r3, #32
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	002a      	movs	r2, r5
 8000648:	4646      	mov	r6, r8
 800064a:	409a      	lsls	r2, r3
 800064c:	0023      	movs	r3, r4
 800064e:	40f3      	lsrs	r3, r6
 8000650:	4644      	mov	r4, r8
 8000652:	4313      	orrs	r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	40e2      	lsrs	r2, r4
 8000658:	001c      	movs	r4, r3
 800065a:	465b      	mov	r3, fp
 800065c:	0015      	movs	r5, r2
 800065e:	2b00      	cmp	r3, #0
 8000660:	dad4      	bge.n	800060c <__udivmoddi4+0x12c>
 8000662:	4642      	mov	r2, r8
 8000664:	002f      	movs	r7, r5
 8000666:	2320      	movs	r3, #32
 8000668:	0026      	movs	r6, r4
 800066a:	4097      	lsls	r7, r2
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	40de      	lsrs	r6, r3
 8000670:	003b      	movs	r3, r7
 8000672:	4333      	orrs	r3, r6
 8000674:	e7cd      	b.n	8000612 <__udivmoddi4+0x132>
 8000676:	46c0      	nop			; (mov r8, r8)

08000678 <__aeabi_fadd>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	46c6      	mov	lr, r8
 800067c:	0243      	lsls	r3, r0, #9
 800067e:	0a5b      	lsrs	r3, r3, #9
 8000680:	024e      	lsls	r6, r1, #9
 8000682:	0045      	lsls	r5, r0, #1
 8000684:	004f      	lsls	r7, r1, #1
 8000686:	00da      	lsls	r2, r3, #3
 8000688:	0fc4      	lsrs	r4, r0, #31
 800068a:	469c      	mov	ip, r3
 800068c:	0a70      	lsrs	r0, r6, #9
 800068e:	4690      	mov	r8, r2
 8000690:	b500      	push	{lr}
 8000692:	0e2d      	lsrs	r5, r5, #24
 8000694:	0e3f      	lsrs	r7, r7, #24
 8000696:	0fc9      	lsrs	r1, r1, #31
 8000698:	09b6      	lsrs	r6, r6, #6
 800069a:	428c      	cmp	r4, r1
 800069c:	d04b      	beq.n	8000736 <__aeabi_fadd+0xbe>
 800069e:	1bea      	subs	r2, r5, r7
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	dd36      	ble.n	8000712 <__aeabi_fadd+0x9a>
 80006a4:	2f00      	cmp	r7, #0
 80006a6:	d061      	beq.n	800076c <__aeabi_fadd+0xf4>
 80006a8:	2dff      	cmp	r5, #255	; 0xff
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x36>
 80006ac:	e0ad      	b.n	800080a <__aeabi_fadd+0x192>
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	04db      	lsls	r3, r3, #19
 80006b2:	431e      	orrs	r6, r3
 80006b4:	2a1b      	cmp	r2, #27
 80006b6:	dc00      	bgt.n	80006ba <__aeabi_fadd+0x42>
 80006b8:	e0d3      	b.n	8000862 <__aeabi_fadd+0x1ea>
 80006ba:	2001      	movs	r0, #1
 80006bc:	4643      	mov	r3, r8
 80006be:	1a18      	subs	r0, r3, r0
 80006c0:	0143      	lsls	r3, r0, #5
 80006c2:	d400      	bmi.n	80006c6 <__aeabi_fadd+0x4e>
 80006c4:	e08c      	b.n	80007e0 <__aeabi_fadd+0x168>
 80006c6:	0180      	lsls	r0, r0, #6
 80006c8:	0987      	lsrs	r7, r0, #6
 80006ca:	0038      	movs	r0, r7
 80006cc:	f001 fcb8 	bl	8002040 <__clzsi2>
 80006d0:	3805      	subs	r0, #5
 80006d2:	4087      	lsls	r7, r0
 80006d4:	4285      	cmp	r5, r0
 80006d6:	dc00      	bgt.n	80006da <__aeabi_fadd+0x62>
 80006d8:	e0b6      	b.n	8000848 <__aeabi_fadd+0x1d0>
 80006da:	1a2d      	subs	r5, r5, r0
 80006dc:	48b3      	ldr	r0, [pc, #716]	; (80009ac <__aeabi_fadd+0x334>)
 80006de:	4038      	ands	r0, r7
 80006e0:	0743      	lsls	r3, r0, #29
 80006e2:	d004      	beq.n	80006ee <__aeabi_fadd+0x76>
 80006e4:	230f      	movs	r3, #15
 80006e6:	4003      	ands	r3, r0
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d000      	beq.n	80006ee <__aeabi_fadd+0x76>
 80006ec:	3004      	adds	r0, #4
 80006ee:	0143      	lsls	r3, r0, #5
 80006f0:	d400      	bmi.n	80006f4 <__aeabi_fadd+0x7c>
 80006f2:	e078      	b.n	80007e6 <__aeabi_fadd+0x16e>
 80006f4:	1c6a      	adds	r2, r5, #1
 80006f6:	2dfe      	cmp	r5, #254	; 0xfe
 80006f8:	d065      	beq.n	80007c6 <__aeabi_fadd+0x14e>
 80006fa:	0180      	lsls	r0, r0, #6
 80006fc:	0a43      	lsrs	r3, r0, #9
 80006fe:	469c      	mov	ip, r3
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	4663      	mov	r3, ip
 8000704:	05d0      	lsls	r0, r2, #23
 8000706:	4318      	orrs	r0, r3
 8000708:	07e4      	lsls	r4, r4, #31
 800070a:	4320      	orrs	r0, r4
 800070c:	bc80      	pop	{r7}
 800070e:	46b8      	mov	r8, r7
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000712:	2a00      	cmp	r2, #0
 8000714:	d035      	beq.n	8000782 <__aeabi_fadd+0x10a>
 8000716:	1b7a      	subs	r2, r7, r5
 8000718:	2d00      	cmp	r5, #0
 800071a:	d000      	beq.n	800071e <__aeabi_fadd+0xa6>
 800071c:	e0af      	b.n	800087e <__aeabi_fadd+0x206>
 800071e:	4643      	mov	r3, r8
 8000720:	2b00      	cmp	r3, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_fadd+0xae>
 8000724:	e0a7      	b.n	8000876 <__aeabi_fadd+0x1fe>
 8000726:	1e53      	subs	r3, r2, #1
 8000728:	2a01      	cmp	r2, #1
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0xb6>
 800072c:	e12f      	b.n	800098e <__aeabi_fadd+0x316>
 800072e:	2aff      	cmp	r2, #255	; 0xff
 8000730:	d069      	beq.n	8000806 <__aeabi_fadd+0x18e>
 8000732:	001a      	movs	r2, r3
 8000734:	e0aa      	b.n	800088c <__aeabi_fadd+0x214>
 8000736:	1be9      	subs	r1, r5, r7
 8000738:	2900      	cmp	r1, #0
 800073a:	dd70      	ble.n	800081e <__aeabi_fadd+0x1a6>
 800073c:	2f00      	cmp	r7, #0
 800073e:	d037      	beq.n	80007b0 <__aeabi_fadd+0x138>
 8000740:	2dff      	cmp	r5, #255	; 0xff
 8000742:	d062      	beq.n	800080a <__aeabi_fadd+0x192>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	04db      	lsls	r3, r3, #19
 8000748:	431e      	orrs	r6, r3
 800074a:	291b      	cmp	r1, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0xd8>
 800074e:	e0b0      	b.n	80008b2 <__aeabi_fadd+0x23a>
 8000750:	2001      	movs	r0, #1
 8000752:	4440      	add	r0, r8
 8000754:	0143      	lsls	r3, r0, #5
 8000756:	d543      	bpl.n	80007e0 <__aeabi_fadd+0x168>
 8000758:	3501      	adds	r5, #1
 800075a:	2dff      	cmp	r5, #255	; 0xff
 800075c:	d033      	beq.n	80007c6 <__aeabi_fadd+0x14e>
 800075e:	2301      	movs	r3, #1
 8000760:	4a93      	ldr	r2, [pc, #588]	; (80009b0 <__aeabi_fadd+0x338>)
 8000762:	4003      	ands	r3, r0
 8000764:	0840      	lsrs	r0, r0, #1
 8000766:	4010      	ands	r0, r2
 8000768:	4318      	orrs	r0, r3
 800076a:	e7b9      	b.n	80006e0 <__aeabi_fadd+0x68>
 800076c:	2e00      	cmp	r6, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0xfa>
 8000770:	e083      	b.n	800087a <__aeabi_fadd+0x202>
 8000772:	1e51      	subs	r1, r2, #1
 8000774:	2a01      	cmp	r2, #1
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x102>
 8000778:	e0d8      	b.n	800092c <__aeabi_fadd+0x2b4>
 800077a:	2aff      	cmp	r2, #255	; 0xff
 800077c:	d045      	beq.n	800080a <__aeabi_fadd+0x192>
 800077e:	000a      	movs	r2, r1
 8000780:	e798      	b.n	80006b4 <__aeabi_fadd+0x3c>
 8000782:	27fe      	movs	r7, #254	; 0xfe
 8000784:	1c6a      	adds	r2, r5, #1
 8000786:	4217      	tst	r7, r2
 8000788:	d000      	beq.n	800078c <__aeabi_fadd+0x114>
 800078a:	e086      	b.n	800089a <__aeabi_fadd+0x222>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d000      	beq.n	8000792 <__aeabi_fadd+0x11a>
 8000790:	e0b7      	b.n	8000902 <__aeabi_fadd+0x28a>
 8000792:	4643      	mov	r3, r8
 8000794:	2b00      	cmp	r3, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x122>
 8000798:	e0f3      	b.n	8000982 <__aeabi_fadd+0x30a>
 800079a:	2200      	movs	r2, #0
 800079c:	2e00      	cmp	r6, #0
 800079e:	d0b0      	beq.n	8000702 <__aeabi_fadd+0x8a>
 80007a0:	1b98      	subs	r0, r3, r6
 80007a2:	0143      	lsls	r3, r0, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x130>
 80007a6:	e0fa      	b.n	800099e <__aeabi_fadd+0x326>
 80007a8:	4643      	mov	r3, r8
 80007aa:	000c      	movs	r4, r1
 80007ac:	1af0      	subs	r0, r6, r3
 80007ae:	e797      	b.n	80006e0 <__aeabi_fadd+0x68>
 80007b0:	2e00      	cmp	r6, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x13e>
 80007b4:	e0c8      	b.n	8000948 <__aeabi_fadd+0x2d0>
 80007b6:	1e4a      	subs	r2, r1, #1
 80007b8:	2901      	cmp	r1, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x146>
 80007bc:	e0ae      	b.n	800091c <__aeabi_fadd+0x2a4>
 80007be:	29ff      	cmp	r1, #255	; 0xff
 80007c0:	d023      	beq.n	800080a <__aeabi_fadd+0x192>
 80007c2:	0011      	movs	r1, r2
 80007c4:	e7c1      	b.n	800074a <__aeabi_fadd+0xd2>
 80007c6:	2300      	movs	r3, #0
 80007c8:	22ff      	movs	r2, #255	; 0xff
 80007ca:	469c      	mov	ip, r3
 80007cc:	e799      	b.n	8000702 <__aeabi_fadd+0x8a>
 80007ce:	21fe      	movs	r1, #254	; 0xfe
 80007d0:	1c6a      	adds	r2, r5, #1
 80007d2:	4211      	tst	r1, r2
 80007d4:	d077      	beq.n	80008c6 <__aeabi_fadd+0x24e>
 80007d6:	2aff      	cmp	r2, #255	; 0xff
 80007d8:	d0f5      	beq.n	80007c6 <__aeabi_fadd+0x14e>
 80007da:	0015      	movs	r5, r2
 80007dc:	4446      	add	r6, r8
 80007de:	0870      	lsrs	r0, r6, #1
 80007e0:	0743      	lsls	r3, r0, #29
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fadd+0x16e>
 80007e4:	e77e      	b.n	80006e4 <__aeabi_fadd+0x6c>
 80007e6:	08c3      	lsrs	r3, r0, #3
 80007e8:	2dff      	cmp	r5, #255	; 0xff
 80007ea:	d00e      	beq.n	800080a <__aeabi_fadd+0x192>
 80007ec:	025b      	lsls	r3, r3, #9
 80007ee:	0a5b      	lsrs	r3, r3, #9
 80007f0:	469c      	mov	ip, r3
 80007f2:	b2ea      	uxtb	r2, r5
 80007f4:	e785      	b.n	8000702 <__aeabi_fadd+0x8a>
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d007      	beq.n	800080a <__aeabi_fadd+0x192>
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	4213      	tst	r3, r2
 8000800:	d003      	beq.n	800080a <__aeabi_fadd+0x192>
 8000802:	4210      	tst	r0, r2
 8000804:	d101      	bne.n	800080a <__aeabi_fadd+0x192>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0db      	beq.n	80007c6 <__aeabi_fadd+0x14e>
 800080e:	2080      	movs	r0, #128	; 0x80
 8000810:	03c0      	lsls	r0, r0, #15
 8000812:	4318      	orrs	r0, r3
 8000814:	0240      	lsls	r0, r0, #9
 8000816:	0a43      	lsrs	r3, r0, #9
 8000818:	469c      	mov	ip, r3
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	e771      	b.n	8000702 <__aeabi_fadd+0x8a>
 800081e:	2900      	cmp	r1, #0
 8000820:	d0d5      	beq.n	80007ce <__aeabi_fadd+0x156>
 8000822:	1b7a      	subs	r2, r7, r5
 8000824:	2d00      	cmp	r5, #0
 8000826:	d160      	bne.n	80008ea <__aeabi_fadd+0x272>
 8000828:	4643      	mov	r3, r8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d024      	beq.n	8000878 <__aeabi_fadd+0x200>
 800082e:	1e53      	subs	r3, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d073      	beq.n	800091c <__aeabi_fadd+0x2a4>
 8000834:	2aff      	cmp	r2, #255	; 0xff
 8000836:	d0e7      	beq.n	8000808 <__aeabi_fadd+0x190>
 8000838:	001a      	movs	r2, r3
 800083a:	2a1b      	cmp	r2, #27
 800083c:	dc00      	bgt.n	8000840 <__aeabi_fadd+0x1c8>
 800083e:	e085      	b.n	800094c <__aeabi_fadd+0x2d4>
 8000840:	2001      	movs	r0, #1
 8000842:	003d      	movs	r5, r7
 8000844:	1980      	adds	r0, r0, r6
 8000846:	e785      	b.n	8000754 <__aeabi_fadd+0xdc>
 8000848:	2320      	movs	r3, #32
 800084a:	003a      	movs	r2, r7
 800084c:	1b45      	subs	r5, r0, r5
 800084e:	0038      	movs	r0, r7
 8000850:	3501      	adds	r5, #1
 8000852:	40ea      	lsrs	r2, r5
 8000854:	1b5d      	subs	r5, r3, r5
 8000856:	40a8      	lsls	r0, r5
 8000858:	1e43      	subs	r3, r0, #1
 800085a:	4198      	sbcs	r0, r3
 800085c:	2500      	movs	r5, #0
 800085e:	4310      	orrs	r0, r2
 8000860:	e73e      	b.n	80006e0 <__aeabi_fadd+0x68>
 8000862:	2320      	movs	r3, #32
 8000864:	0030      	movs	r0, r6
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	0031      	movs	r1, r6
 800086a:	4098      	lsls	r0, r3
 800086c:	40d1      	lsrs	r1, r2
 800086e:	1e43      	subs	r3, r0, #1
 8000870:	4198      	sbcs	r0, r3
 8000872:	4308      	orrs	r0, r1
 8000874:	e722      	b.n	80006bc <__aeabi_fadd+0x44>
 8000876:	000c      	movs	r4, r1
 8000878:	0003      	movs	r3, r0
 800087a:	0015      	movs	r5, r2
 800087c:	e7b4      	b.n	80007e8 <__aeabi_fadd+0x170>
 800087e:	2fff      	cmp	r7, #255	; 0xff
 8000880:	d0c1      	beq.n	8000806 <__aeabi_fadd+0x18e>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	4640      	mov	r0, r8
 8000886:	04db      	lsls	r3, r3, #19
 8000888:	4318      	orrs	r0, r3
 800088a:	4680      	mov	r8, r0
 800088c:	2a1b      	cmp	r2, #27
 800088e:	dd51      	ble.n	8000934 <__aeabi_fadd+0x2bc>
 8000890:	2001      	movs	r0, #1
 8000892:	000c      	movs	r4, r1
 8000894:	003d      	movs	r5, r7
 8000896:	1a30      	subs	r0, r6, r0
 8000898:	e712      	b.n	80006c0 <__aeabi_fadd+0x48>
 800089a:	4643      	mov	r3, r8
 800089c:	1b9f      	subs	r7, r3, r6
 800089e:	017b      	lsls	r3, r7, #5
 80008a0:	d42b      	bmi.n	80008fa <__aeabi_fadd+0x282>
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fadd+0x230>
 80008a6:	e710      	b.n	80006ca <__aeabi_fadd+0x52>
 80008a8:	2300      	movs	r3, #0
 80008aa:	2400      	movs	r4, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	469c      	mov	ip, r3
 80008b0:	e727      	b.n	8000702 <__aeabi_fadd+0x8a>
 80008b2:	2320      	movs	r3, #32
 80008b4:	0032      	movs	r2, r6
 80008b6:	0030      	movs	r0, r6
 80008b8:	40ca      	lsrs	r2, r1
 80008ba:	1a59      	subs	r1, r3, r1
 80008bc:	4088      	lsls	r0, r1
 80008be:	1e43      	subs	r3, r0, #1
 80008c0:	4198      	sbcs	r0, r3
 80008c2:	4310      	orrs	r0, r2
 80008c4:	e745      	b.n	8000752 <__aeabi_fadd+0xda>
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d14a      	bne.n	8000960 <__aeabi_fadd+0x2e8>
 80008ca:	4643      	mov	r3, r8
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d063      	beq.n	8000998 <__aeabi_fadd+0x320>
 80008d0:	2200      	movs	r2, #0
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fadd+0x260>
 80008d6:	e714      	b.n	8000702 <__aeabi_fadd+0x8a>
 80008d8:	0030      	movs	r0, r6
 80008da:	4440      	add	r0, r8
 80008dc:	0143      	lsls	r3, r0, #5
 80008de:	d400      	bmi.n	80008e2 <__aeabi_fadd+0x26a>
 80008e0:	e77e      	b.n	80007e0 <__aeabi_fadd+0x168>
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <__aeabi_fadd+0x334>)
 80008e4:	3501      	adds	r5, #1
 80008e6:	4018      	ands	r0, r3
 80008e8:	e77a      	b.n	80007e0 <__aeabi_fadd+0x168>
 80008ea:	2fff      	cmp	r7, #255	; 0xff
 80008ec:	d08c      	beq.n	8000808 <__aeabi_fadd+0x190>
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	4641      	mov	r1, r8
 80008f2:	04db      	lsls	r3, r3, #19
 80008f4:	4319      	orrs	r1, r3
 80008f6:	4688      	mov	r8, r1
 80008f8:	e79f      	b.n	800083a <__aeabi_fadd+0x1c2>
 80008fa:	4643      	mov	r3, r8
 80008fc:	000c      	movs	r4, r1
 80008fe:	1af7      	subs	r7, r6, r3
 8000900:	e6e3      	b.n	80006ca <__aeabi_fadd+0x52>
 8000902:	4642      	mov	r2, r8
 8000904:	2a00      	cmp	r2, #0
 8000906:	d000      	beq.n	800090a <__aeabi_fadd+0x292>
 8000908:	e775      	b.n	80007f6 <__aeabi_fadd+0x17e>
 800090a:	2e00      	cmp	r6, #0
 800090c:	d000      	beq.n	8000910 <__aeabi_fadd+0x298>
 800090e:	e77a      	b.n	8000806 <__aeabi_fadd+0x18e>
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	03db      	lsls	r3, r3, #15
 8000914:	2400      	movs	r4, #0
 8000916:	469c      	mov	ip, r3
 8000918:	22ff      	movs	r2, #255	; 0xff
 800091a:	e6f2      	b.n	8000702 <__aeabi_fadd+0x8a>
 800091c:	0030      	movs	r0, r6
 800091e:	4440      	add	r0, r8
 8000920:	2501      	movs	r5, #1
 8000922:	0143      	lsls	r3, r0, #5
 8000924:	d400      	bmi.n	8000928 <__aeabi_fadd+0x2b0>
 8000926:	e75b      	b.n	80007e0 <__aeabi_fadd+0x168>
 8000928:	2502      	movs	r5, #2
 800092a:	e718      	b.n	800075e <__aeabi_fadd+0xe6>
 800092c:	4643      	mov	r3, r8
 800092e:	2501      	movs	r5, #1
 8000930:	1b98      	subs	r0, r3, r6
 8000932:	e6c5      	b.n	80006c0 <__aeabi_fadd+0x48>
 8000934:	2320      	movs	r3, #32
 8000936:	4644      	mov	r4, r8
 8000938:	4640      	mov	r0, r8
 800093a:	40d4      	lsrs	r4, r2
 800093c:	1a9a      	subs	r2, r3, r2
 800093e:	4090      	lsls	r0, r2
 8000940:	1e43      	subs	r3, r0, #1
 8000942:	4198      	sbcs	r0, r3
 8000944:	4320      	orrs	r0, r4
 8000946:	e7a4      	b.n	8000892 <__aeabi_fadd+0x21a>
 8000948:	000d      	movs	r5, r1
 800094a:	e74d      	b.n	80007e8 <__aeabi_fadd+0x170>
 800094c:	2320      	movs	r3, #32
 800094e:	4641      	mov	r1, r8
 8000950:	4640      	mov	r0, r8
 8000952:	40d1      	lsrs	r1, r2
 8000954:	1a9a      	subs	r2, r3, r2
 8000956:	4090      	lsls	r0, r2
 8000958:	1e43      	subs	r3, r0, #1
 800095a:	4198      	sbcs	r0, r3
 800095c:	4308      	orrs	r0, r1
 800095e:	e770      	b.n	8000842 <__aeabi_fadd+0x1ca>
 8000960:	4642      	mov	r2, r8
 8000962:	2a00      	cmp	r2, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_fadd+0x2f0>
 8000966:	e74f      	b.n	8000808 <__aeabi_fadd+0x190>
 8000968:	2e00      	cmp	r6, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x2f6>
 800096c:	e74d      	b.n	800080a <__aeabi_fadd+0x192>
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	03d2      	lsls	r2, r2, #15
 8000972:	4213      	tst	r3, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_fadd+0x300>
 8000976:	e748      	b.n	800080a <__aeabi_fadd+0x192>
 8000978:	4210      	tst	r0, r2
 800097a:	d000      	beq.n	800097e <__aeabi_fadd+0x306>
 800097c:	e745      	b.n	800080a <__aeabi_fadd+0x192>
 800097e:	0003      	movs	r3, r0
 8000980:	e743      	b.n	800080a <__aeabi_fadd+0x192>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d090      	beq.n	80008a8 <__aeabi_fadd+0x230>
 8000986:	000c      	movs	r4, r1
 8000988:	4684      	mov	ip, r0
 800098a:	2200      	movs	r2, #0
 800098c:	e6b9      	b.n	8000702 <__aeabi_fadd+0x8a>
 800098e:	4643      	mov	r3, r8
 8000990:	000c      	movs	r4, r1
 8000992:	1af0      	subs	r0, r6, r3
 8000994:	3501      	adds	r5, #1
 8000996:	e693      	b.n	80006c0 <__aeabi_fadd+0x48>
 8000998:	4684      	mov	ip, r0
 800099a:	2200      	movs	r2, #0
 800099c:	e6b1      	b.n	8000702 <__aeabi_fadd+0x8a>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fadd+0x32c>
 80009a2:	e71d      	b.n	80007e0 <__aeabi_fadd+0x168>
 80009a4:	2300      	movs	r3, #0
 80009a6:	2400      	movs	r4, #0
 80009a8:	469c      	mov	ip, r3
 80009aa:	e6aa      	b.n	8000702 <__aeabi_fadd+0x8a>
 80009ac:	fbffffff 	.word	0xfbffffff
 80009b0:	7dffffff 	.word	0x7dffffff

080009b4 <__aeabi_fdiv>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	464f      	mov	r7, r9
 80009b8:	4646      	mov	r6, r8
 80009ba:	46d6      	mov	lr, sl
 80009bc:	0245      	lsls	r5, r0, #9
 80009be:	b5c0      	push	{r6, r7, lr}
 80009c0:	0047      	lsls	r7, r0, #1
 80009c2:	1c0c      	adds	r4, r1, #0
 80009c4:	0a6d      	lsrs	r5, r5, #9
 80009c6:	0e3f      	lsrs	r7, r7, #24
 80009c8:	0fc6      	lsrs	r6, r0, #31
 80009ca:	2f00      	cmp	r7, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fdiv+0x1c>
 80009ce:	e070      	b.n	8000ab2 <__aeabi_fdiv+0xfe>
 80009d0:	2fff      	cmp	r7, #255	; 0xff
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fdiv+0x22>
 80009d4:	e075      	b.n	8000ac2 <__aeabi_fdiv+0x10e>
 80009d6:	00eb      	lsls	r3, r5, #3
 80009d8:	2580      	movs	r5, #128	; 0x80
 80009da:	04ed      	lsls	r5, r5, #19
 80009dc:	431d      	orrs	r5, r3
 80009de:	2300      	movs	r3, #0
 80009e0:	4699      	mov	r9, r3
 80009e2:	469a      	mov	sl, r3
 80009e4:	3f7f      	subs	r7, #127	; 0x7f
 80009e6:	0260      	lsls	r0, r4, #9
 80009e8:	0a43      	lsrs	r3, r0, #9
 80009ea:	4698      	mov	r8, r3
 80009ec:	0063      	lsls	r3, r4, #1
 80009ee:	0e1b      	lsrs	r3, r3, #24
 80009f0:	0fe4      	lsrs	r4, r4, #31
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d04e      	beq.n	8000a94 <__aeabi_fdiv+0xe0>
 80009f6:	2bff      	cmp	r3, #255	; 0xff
 80009f8:	d046      	beq.n	8000a88 <__aeabi_fdiv+0xd4>
 80009fa:	4642      	mov	r2, r8
 80009fc:	00d0      	lsls	r0, r2, #3
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	04d2      	lsls	r2, r2, #19
 8000a02:	4302      	orrs	r2, r0
 8000a04:	4690      	mov	r8, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	3b7f      	subs	r3, #127	; 0x7f
 8000a0a:	0031      	movs	r1, r6
 8000a0c:	1aff      	subs	r7, r7, r3
 8000a0e:	464b      	mov	r3, r9
 8000a10:	4061      	eors	r1, r4
 8000a12:	b2c9      	uxtb	r1, r1
 8000a14:	4313      	orrs	r3, r2
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d900      	bls.n	8000a1c <__aeabi_fdiv+0x68>
 8000a1a:	e0b5      	b.n	8000b88 <__aeabi_fdiv+0x1d4>
 8000a1c:	486e      	ldr	r0, [pc, #440]	; (8000bd8 <__aeabi_fdiv+0x224>)
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	58c3      	ldr	r3, [r0, r3]
 8000a22:	469f      	mov	pc, r3
 8000a24:	2300      	movs	r3, #0
 8000a26:	4698      	mov	r8, r3
 8000a28:	0026      	movs	r6, r4
 8000a2a:	4645      	mov	r5, r8
 8000a2c:	4692      	mov	sl, r2
 8000a2e:	4653      	mov	r3, sl
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fdiv+0x82>
 8000a34:	e089      	b.n	8000b4a <__aeabi_fdiv+0x196>
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fdiv+0x88>
 8000a3a:	e09e      	b.n	8000b7a <__aeabi_fdiv+0x1c6>
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d018      	beq.n	8000a72 <__aeabi_fdiv+0xbe>
 8000a40:	003b      	movs	r3, r7
 8000a42:	337f      	adds	r3, #127	; 0x7f
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	dd69      	ble.n	8000b1c <__aeabi_fdiv+0x168>
 8000a48:	076a      	lsls	r2, r5, #29
 8000a4a:	d004      	beq.n	8000a56 <__aeabi_fdiv+0xa2>
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	402a      	ands	r2, r5
 8000a50:	2a04      	cmp	r2, #4
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fdiv+0xa2>
 8000a54:	3504      	adds	r5, #4
 8000a56:	012a      	lsls	r2, r5, #4
 8000a58:	d503      	bpl.n	8000a62 <__aeabi_fdiv+0xae>
 8000a5a:	4b60      	ldr	r3, [pc, #384]	; (8000bdc <__aeabi_fdiv+0x228>)
 8000a5c:	401d      	ands	r5, r3
 8000a5e:	003b      	movs	r3, r7
 8000a60:	3380      	adds	r3, #128	; 0x80
 8000a62:	2bfe      	cmp	r3, #254	; 0xfe
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_fdiv+0xb4>
 8000a66:	e070      	b.n	8000b4a <__aeabi_fdiv+0x196>
 8000a68:	01ad      	lsls	r5, r5, #6
 8000a6a:	0a6d      	lsrs	r5, r5, #9
 8000a6c:	b2d8      	uxtb	r0, r3
 8000a6e:	e002      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000a70:	000e      	movs	r6, r1
 8000a72:	2000      	movs	r0, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	05c0      	lsls	r0, r0, #23
 8000a78:	4328      	orrs	r0, r5
 8000a7a:	07f6      	lsls	r6, r6, #31
 8000a7c:	4330      	orrs	r0, r6
 8000a7e:	bce0      	pop	{r5, r6, r7}
 8000a80:	46ba      	mov	sl, r7
 8000a82:	46b1      	mov	r9, r6
 8000a84:	46a8      	mov	r8, r5
 8000a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a88:	4643      	mov	r3, r8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d13f      	bne.n	8000b0e <__aeabi_fdiv+0x15a>
 8000a8e:	2202      	movs	r2, #2
 8000a90:	3fff      	subs	r7, #255	; 0xff
 8000a92:	e003      	b.n	8000a9c <__aeabi_fdiv+0xe8>
 8000a94:	4643      	mov	r3, r8
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d12d      	bne.n	8000af6 <__aeabi_fdiv+0x142>
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	0031      	movs	r1, r6
 8000a9e:	464b      	mov	r3, r9
 8000aa0:	4061      	eors	r1, r4
 8000aa2:	b2c9      	uxtb	r1, r1
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d834      	bhi.n	8000b14 <__aeabi_fdiv+0x160>
 8000aaa:	484d      	ldr	r0, [pc, #308]	; (8000be0 <__aeabi_fdiv+0x22c>)
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	58c3      	ldr	r3, [r0, r3]
 8000ab0:	469f      	mov	pc, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d113      	bne.n	8000ade <__aeabi_fdiv+0x12a>
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	4699      	mov	r9, r3
 8000aba:	3b03      	subs	r3, #3
 8000abc:	2700      	movs	r7, #0
 8000abe:	469a      	mov	sl, r3
 8000ac0:	e791      	b.n	80009e6 <__aeabi_fdiv+0x32>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d105      	bne.n	8000ad2 <__aeabi_fdiv+0x11e>
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	4699      	mov	r9, r3
 8000aca:	3b06      	subs	r3, #6
 8000acc:	27ff      	movs	r7, #255	; 0xff
 8000ace:	469a      	mov	sl, r3
 8000ad0:	e789      	b.n	80009e6 <__aeabi_fdiv+0x32>
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	3b09      	subs	r3, #9
 8000ad8:	27ff      	movs	r7, #255	; 0xff
 8000ada:	469a      	mov	sl, r3
 8000adc:	e783      	b.n	80009e6 <__aeabi_fdiv+0x32>
 8000ade:	0028      	movs	r0, r5
 8000ae0:	f001 faae 	bl	8002040 <__clzsi2>
 8000ae4:	2776      	movs	r7, #118	; 0x76
 8000ae6:	1f43      	subs	r3, r0, #5
 8000ae8:	409d      	lsls	r5, r3
 8000aea:	2300      	movs	r3, #0
 8000aec:	427f      	negs	r7, r7
 8000aee:	4699      	mov	r9, r3
 8000af0:	469a      	mov	sl, r3
 8000af2:	1a3f      	subs	r7, r7, r0
 8000af4:	e777      	b.n	80009e6 <__aeabi_fdiv+0x32>
 8000af6:	4640      	mov	r0, r8
 8000af8:	f001 faa2 	bl	8002040 <__clzsi2>
 8000afc:	4642      	mov	r2, r8
 8000afe:	1f43      	subs	r3, r0, #5
 8000b00:	409a      	lsls	r2, r3
 8000b02:	2376      	movs	r3, #118	; 0x76
 8000b04:	425b      	negs	r3, r3
 8000b06:	4690      	mov	r8, r2
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	e77d      	b.n	8000a0a <__aeabi_fdiv+0x56>
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	2203      	movs	r2, #3
 8000b12:	e77a      	b.n	8000a0a <__aeabi_fdiv+0x56>
 8000b14:	000e      	movs	r6, r1
 8000b16:	20ff      	movs	r0, #255	; 0xff
 8000b18:	2500      	movs	r5, #0
 8000b1a:	e7ac      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	1ac0      	subs	r0, r0, r3
 8000b20:	281b      	cmp	r0, #27
 8000b22:	dca6      	bgt.n	8000a72 <__aeabi_fdiv+0xbe>
 8000b24:	379e      	adds	r7, #158	; 0x9e
 8000b26:	002a      	movs	r2, r5
 8000b28:	40bd      	lsls	r5, r7
 8000b2a:	40c2      	lsrs	r2, r0
 8000b2c:	1e6b      	subs	r3, r5, #1
 8000b2e:	419d      	sbcs	r5, r3
 8000b30:	4315      	orrs	r5, r2
 8000b32:	076b      	lsls	r3, r5, #29
 8000b34:	d004      	beq.n	8000b40 <__aeabi_fdiv+0x18c>
 8000b36:	230f      	movs	r3, #15
 8000b38:	402b      	ands	r3, r5
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_fdiv+0x18c>
 8000b3e:	3504      	adds	r5, #4
 8000b40:	016b      	lsls	r3, r5, #5
 8000b42:	d544      	bpl.n	8000bce <__aeabi_fdiv+0x21a>
 8000b44:	2001      	movs	r0, #1
 8000b46:	2500      	movs	r5, #0
 8000b48:	e795      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000b4a:	20ff      	movs	r0, #255	; 0xff
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	e792      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000b50:	2580      	movs	r5, #128	; 0x80
 8000b52:	2600      	movs	r6, #0
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	03ed      	lsls	r5, r5, #15
 8000b58:	e78d      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2080      	movs	r0, #128	; 0x80
 8000b60:	03c0      	lsls	r0, r0, #15
 8000b62:	4205      	tst	r5, r0
 8000b64:	d009      	beq.n	8000b7a <__aeabi_fdiv+0x1c6>
 8000b66:	4643      	mov	r3, r8
 8000b68:	4203      	tst	r3, r0
 8000b6a:	d106      	bne.n	8000b7a <__aeabi_fdiv+0x1c6>
 8000b6c:	4645      	mov	r5, r8
 8000b6e:	4305      	orrs	r5, r0
 8000b70:	026d      	lsls	r5, r5, #9
 8000b72:	0026      	movs	r6, r4
 8000b74:	20ff      	movs	r0, #255	; 0xff
 8000b76:	0a6d      	lsrs	r5, r5, #9
 8000b78:	e77d      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000b7a:	2080      	movs	r0, #128	; 0x80
 8000b7c:	03c0      	lsls	r0, r0, #15
 8000b7e:	4305      	orrs	r5, r0
 8000b80:	026d      	lsls	r5, r5, #9
 8000b82:	20ff      	movs	r0, #255	; 0xff
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	e776      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000b88:	4642      	mov	r2, r8
 8000b8a:	016b      	lsls	r3, r5, #5
 8000b8c:	0150      	lsls	r0, r2, #5
 8000b8e:	4283      	cmp	r3, r0
 8000b90:	d219      	bcs.n	8000bc6 <__aeabi_fdiv+0x212>
 8000b92:	221b      	movs	r2, #27
 8000b94:	2500      	movs	r5, #0
 8000b96:	3f01      	subs	r7, #1
 8000b98:	2601      	movs	r6, #1
 8000b9a:	001c      	movs	r4, r3
 8000b9c:	006d      	lsls	r5, r5, #1
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2c00      	cmp	r4, #0
 8000ba2:	db01      	blt.n	8000ba8 <__aeabi_fdiv+0x1f4>
 8000ba4:	4298      	cmp	r0, r3
 8000ba6:	d801      	bhi.n	8000bac <__aeabi_fdiv+0x1f8>
 8000ba8:	1a1b      	subs	r3, r3, r0
 8000baa:	4335      	orrs	r5, r6
 8000bac:	3a01      	subs	r2, #1
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1f3      	bne.n	8000b9a <__aeabi_fdiv+0x1e6>
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	4193      	sbcs	r3, r2
 8000bb6:	431d      	orrs	r5, r3
 8000bb8:	003b      	movs	r3, r7
 8000bba:	337f      	adds	r3, #127	; 0x7f
 8000bbc:	000e      	movs	r6, r1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_fdiv+0x210>
 8000bc2:	e741      	b.n	8000a48 <__aeabi_fdiv+0x94>
 8000bc4:	e7aa      	b.n	8000b1c <__aeabi_fdiv+0x168>
 8000bc6:	221a      	movs	r2, #26
 8000bc8:	2501      	movs	r5, #1
 8000bca:	1a1b      	subs	r3, r3, r0
 8000bcc:	e7e4      	b.n	8000b98 <__aeabi_fdiv+0x1e4>
 8000bce:	01ad      	lsls	r5, r5, #6
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	0a6d      	lsrs	r5, r5, #9
 8000bd4:	e74f      	b.n	8000a76 <__aeabi_fdiv+0xc2>
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	08006bdc 	.word	0x08006bdc
 8000bdc:	f7ffffff 	.word	0xf7ffffff
 8000be0:	08006c1c 	.word	0x08006c1c

08000be4 <__aeabi_i2f>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d013      	beq.n	8000c12 <__aeabi_i2f+0x2e>
 8000bea:	17c3      	asrs	r3, r0, #31
 8000bec:	18c6      	adds	r6, r0, r3
 8000bee:	405e      	eors	r6, r3
 8000bf0:	0fc4      	lsrs	r4, r0, #31
 8000bf2:	0030      	movs	r0, r6
 8000bf4:	f001 fa24 	bl	8002040 <__clzsi2>
 8000bf8:	239e      	movs	r3, #158	; 0x9e
 8000bfa:	0005      	movs	r5, r0
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	2b96      	cmp	r3, #150	; 0x96
 8000c00:	dc0f      	bgt.n	8000c22 <__aeabi_i2f+0x3e>
 8000c02:	2808      	cmp	r0, #8
 8000c04:	dd01      	ble.n	8000c0a <__aeabi_i2f+0x26>
 8000c06:	3d08      	subs	r5, #8
 8000c08:	40ae      	lsls	r6, r5
 8000c0a:	0276      	lsls	r6, r6, #9
 8000c0c:	0a76      	lsrs	r6, r6, #9
 8000c0e:	b2d8      	uxtb	r0, r3
 8000c10:	e002      	b.n	8000c18 <__aeabi_i2f+0x34>
 8000c12:	2400      	movs	r4, #0
 8000c14:	2000      	movs	r0, #0
 8000c16:	2600      	movs	r6, #0
 8000c18:	05c0      	lsls	r0, r0, #23
 8000c1a:	4330      	orrs	r0, r6
 8000c1c:	07e4      	lsls	r4, r4, #31
 8000c1e:	4320      	orrs	r0, r4
 8000c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c22:	2b99      	cmp	r3, #153	; 0x99
 8000c24:	dd0c      	ble.n	8000c40 <__aeabi_i2f+0x5c>
 8000c26:	2205      	movs	r2, #5
 8000c28:	0031      	movs	r1, r6
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	40d1      	lsrs	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	0001      	movs	r1, r0
 8000c32:	0030      	movs	r0, r6
 8000c34:	311b      	adds	r1, #27
 8000c36:	4088      	lsls	r0, r1
 8000c38:	1e41      	subs	r1, r0, #1
 8000c3a:	4188      	sbcs	r0, r1
 8000c3c:	4302      	orrs	r2, r0
 8000c3e:	0016      	movs	r6, r2
 8000c40:	2d05      	cmp	r5, #5
 8000c42:	dc12      	bgt.n	8000c6a <__aeabi_i2f+0x86>
 8000c44:	0031      	movs	r1, r6
 8000c46:	4f0d      	ldr	r7, [pc, #52]	; (8000c7c <__aeabi_i2f+0x98>)
 8000c48:	4039      	ands	r1, r7
 8000c4a:	0772      	lsls	r2, r6, #29
 8000c4c:	d009      	beq.n	8000c62 <__aeabi_i2f+0x7e>
 8000c4e:	200f      	movs	r0, #15
 8000c50:	4030      	ands	r0, r6
 8000c52:	2804      	cmp	r0, #4
 8000c54:	d005      	beq.n	8000c62 <__aeabi_i2f+0x7e>
 8000c56:	3104      	adds	r1, #4
 8000c58:	014a      	lsls	r2, r1, #5
 8000c5a:	d502      	bpl.n	8000c62 <__aeabi_i2f+0x7e>
 8000c5c:	239f      	movs	r3, #159	; 0x9f
 8000c5e:	4039      	ands	r1, r7
 8000c60:	1b5b      	subs	r3, r3, r5
 8000c62:	0189      	lsls	r1, r1, #6
 8000c64:	0a4e      	lsrs	r6, r1, #9
 8000c66:	b2d8      	uxtb	r0, r3
 8000c68:	e7d6      	b.n	8000c18 <__aeabi_i2f+0x34>
 8000c6a:	1f6a      	subs	r2, r5, #5
 8000c6c:	4096      	lsls	r6, r2
 8000c6e:	0031      	movs	r1, r6
 8000c70:	4f02      	ldr	r7, [pc, #8]	; (8000c7c <__aeabi_i2f+0x98>)
 8000c72:	4039      	ands	r1, r7
 8000c74:	0772      	lsls	r2, r6, #29
 8000c76:	d0f4      	beq.n	8000c62 <__aeabi_i2f+0x7e>
 8000c78:	e7e9      	b.n	8000c4e <__aeabi_i2f+0x6a>
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	fbffffff 	.word	0xfbffffff

08000c80 <__aeabi_ddiv>:
 8000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c82:	4657      	mov	r7, sl
 8000c84:	464e      	mov	r6, r9
 8000c86:	4645      	mov	r5, r8
 8000c88:	46de      	mov	lr, fp
 8000c8a:	b5e0      	push	{r5, r6, r7, lr}
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	0005      	movs	r5, r0
 8000c90:	030c      	lsls	r4, r1, #12
 8000c92:	0048      	lsls	r0, r1, #1
 8000c94:	4692      	mov	sl, r2
 8000c96:	001f      	movs	r7, r3
 8000c98:	b085      	sub	sp, #20
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d40      	lsrs	r0, r0, #21
 8000c9e:	0fce      	lsrs	r6, r1, #31
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_ddiv+0x26>
 8000ca4:	e156      	b.n	8000f54 <__aeabi_ddiv+0x2d4>
 8000ca6:	4bd4      	ldr	r3, [pc, #848]	; (8000ff8 <__aeabi_ddiv+0x378>)
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	d100      	bne.n	8000cae <__aeabi_ddiv+0x2e>
 8000cac:	e172      	b.n	8000f94 <__aeabi_ddiv+0x314>
 8000cae:	0f6b      	lsrs	r3, r5, #29
 8000cb0:	00e4      	lsls	r4, r4, #3
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	041b      	lsls	r3, r3, #16
 8000cb8:	4323      	orrs	r3, r4
 8000cba:	4698      	mov	r8, r3
 8000cbc:	4bcf      	ldr	r3, [pc, #828]	; (8000ffc <__aeabi_ddiv+0x37c>)
 8000cbe:	00ed      	lsls	r5, r5, #3
 8000cc0:	469b      	mov	fp, r3
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	4699      	mov	r9, r3
 8000cc6:	4483      	add	fp, r0
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	033c      	lsls	r4, r7, #12
 8000ccc:	007b      	lsls	r3, r7, #1
 8000cce:	4650      	mov	r0, sl
 8000cd0:	0b24      	lsrs	r4, r4, #12
 8000cd2:	0d5b      	lsrs	r3, r3, #21
 8000cd4:	0fff      	lsrs	r7, r7, #31
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_ddiv+0x5c>
 8000cda:	e11f      	b.n	8000f1c <__aeabi_ddiv+0x29c>
 8000cdc:	4ac6      	ldr	r2, [pc, #792]	; (8000ff8 <__aeabi_ddiv+0x378>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_ddiv+0x64>
 8000ce2:	e162      	b.n	8000faa <__aeabi_ddiv+0x32a>
 8000ce4:	49c5      	ldr	r1, [pc, #788]	; (8000ffc <__aeabi_ddiv+0x37c>)
 8000ce6:	0f42      	lsrs	r2, r0, #29
 8000ce8:	468c      	mov	ip, r1
 8000cea:	00e4      	lsls	r4, r4, #3
 8000cec:	4659      	mov	r1, fp
 8000cee:	4314      	orrs	r4, r2
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	4463      	add	r3, ip
 8000cf4:	0412      	lsls	r2, r2, #16
 8000cf6:	1acb      	subs	r3, r1, r3
 8000cf8:	4314      	orrs	r4, r2
 8000cfa:	469b      	mov	fp, r3
 8000cfc:	00c2      	lsls	r2, r0, #3
 8000cfe:	2000      	movs	r0, #0
 8000d00:	0033      	movs	r3, r6
 8000d02:	407b      	eors	r3, r7
 8000d04:	469a      	mov	sl, r3
 8000d06:	464b      	mov	r3, r9
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d827      	bhi.n	8000d5c <__aeabi_ddiv+0xdc>
 8000d0c:	49bc      	ldr	r1, [pc, #752]	; (8001000 <__aeabi_ddiv+0x380>)
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	58cb      	ldr	r3, [r1, r3]
 8000d12:	469f      	mov	pc, r3
 8000d14:	46b2      	mov	sl, r6
 8000d16:	9b00      	ldr	r3, [sp, #0]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d016      	beq.n	8000d4a <__aeabi_ddiv+0xca>
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0xa2>
 8000d20:	e28e      	b.n	8001240 <__aeabi_ddiv+0x5c0>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d000      	beq.n	8000d28 <__aeabi_ddiv+0xa8>
 8000d26:	e0d9      	b.n	8000edc <__aeabi_ddiv+0x25c>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	4652      	mov	r2, sl
 8000d30:	051b      	lsls	r3, r3, #20
 8000d32:	4323      	orrs	r3, r4
 8000d34:	07d2      	lsls	r2, r2, #31
 8000d36:	4313      	orrs	r3, r2
 8000d38:	0028      	movs	r0, r5
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	b005      	add	sp, #20
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	4baa      	ldr	r3, [pc, #680]	; (8000ff8 <__aeabi_ddiv+0x378>)
 8000d50:	e7ed      	b.n	8000d2e <__aeabi_ddiv+0xae>
 8000d52:	46ba      	mov	sl, r7
 8000d54:	46a0      	mov	r8, r4
 8000d56:	0015      	movs	r5, r2
 8000d58:	9000      	str	r0, [sp, #0]
 8000d5a:	e7dc      	b.n	8000d16 <__aeabi_ddiv+0x96>
 8000d5c:	4544      	cmp	r4, r8
 8000d5e:	d200      	bcs.n	8000d62 <__aeabi_ddiv+0xe2>
 8000d60:	e1c7      	b.n	80010f2 <__aeabi_ddiv+0x472>
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0xe6>
 8000d64:	e1c2      	b.n	80010ec <__aeabi_ddiv+0x46c>
 8000d66:	2301      	movs	r3, #1
 8000d68:	425b      	negs	r3, r3
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	002e      	movs	r6, r5
 8000d6e:	4640      	mov	r0, r8
 8000d70:	2500      	movs	r5, #0
 8000d72:	44e3      	add	fp, ip
 8000d74:	0223      	lsls	r3, r4, #8
 8000d76:	0e14      	lsrs	r4, r2, #24
 8000d78:	431c      	orrs	r4, r3
 8000d7a:	0c1b      	lsrs	r3, r3, #16
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	0423      	lsls	r3, r4, #16
 8000d80:	0c1f      	lsrs	r7, r3, #16
 8000d82:	0212      	lsls	r2, r2, #8
 8000d84:	4649      	mov	r1, r9
 8000d86:	9200      	str	r2, [sp, #0]
 8000d88:	9701      	str	r7, [sp, #4]
 8000d8a:	f7ff fa4d 	bl	8000228 <__aeabi_uidivmod>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	437a      	muls	r2, r7
 8000d92:	040b      	lsls	r3, r1, #16
 8000d94:	0c31      	lsrs	r1, r6, #16
 8000d96:	4680      	mov	r8, r0
 8000d98:	4319      	orrs	r1, r3
 8000d9a:	428a      	cmp	r2, r1
 8000d9c:	d907      	bls.n	8000dae <__aeabi_ddiv+0x12e>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	425b      	negs	r3, r3
 8000da2:	469c      	mov	ip, r3
 8000da4:	1909      	adds	r1, r1, r4
 8000da6:	44e0      	add	r8, ip
 8000da8:	428c      	cmp	r4, r1
 8000daa:	d800      	bhi.n	8000dae <__aeabi_ddiv+0x12e>
 8000dac:	e207      	b.n	80011be <__aeabi_ddiv+0x53e>
 8000dae:	1a88      	subs	r0, r1, r2
 8000db0:	4649      	mov	r1, r9
 8000db2:	f7ff fa39 	bl	8000228 <__aeabi_uidivmod>
 8000db6:	0409      	lsls	r1, r1, #16
 8000db8:	468c      	mov	ip, r1
 8000dba:	0431      	lsls	r1, r6, #16
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	9a01      	ldr	r2, [sp, #4]
 8000dc0:	0c09      	lsrs	r1, r1, #16
 8000dc2:	4342      	muls	r2, r0
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	4331      	orrs	r1, r6
 8000dc8:	428a      	cmp	r2, r1
 8000dca:	d904      	bls.n	8000dd6 <__aeabi_ddiv+0x156>
 8000dcc:	1909      	adds	r1, r1, r4
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	428c      	cmp	r4, r1
 8000dd2:	d800      	bhi.n	8000dd6 <__aeabi_ddiv+0x156>
 8000dd4:	e1ed      	b.n	80011b2 <__aeabi_ddiv+0x532>
 8000dd6:	1a88      	subs	r0, r1, r2
 8000dd8:	4642      	mov	r2, r8
 8000dda:	0412      	lsls	r2, r2, #16
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4690      	mov	r8, r2
 8000de0:	4641      	mov	r1, r8
 8000de2:	9b00      	ldr	r3, [sp, #0]
 8000de4:	040e      	lsls	r6, r1, #16
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	001f      	movs	r7, r3
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	9b00      	ldr	r3, [sp, #0]
 8000dee:	0c36      	lsrs	r6, r6, #16
 8000df0:	041b      	lsls	r3, r3, #16
 8000df2:	0c19      	lsrs	r1, r3, #16
 8000df4:	000b      	movs	r3, r1
 8000df6:	4373      	muls	r3, r6
 8000df8:	0c12      	lsrs	r2, r2, #16
 8000dfa:	437e      	muls	r6, r7
 8000dfc:	9103      	str	r1, [sp, #12]
 8000dfe:	4351      	muls	r1, r2
 8000e00:	437a      	muls	r2, r7
 8000e02:	0c1f      	lsrs	r7, r3, #16
 8000e04:	46bc      	mov	ip, r7
 8000e06:	1876      	adds	r6, r6, r1
 8000e08:	4466      	add	r6, ip
 8000e0a:	42b1      	cmp	r1, r6
 8000e0c:	d903      	bls.n	8000e16 <__aeabi_ddiv+0x196>
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	468c      	mov	ip, r1
 8000e14:	4462      	add	r2, ip
 8000e16:	0c31      	lsrs	r1, r6, #16
 8000e18:	188a      	adds	r2, r1, r2
 8000e1a:	0431      	lsls	r1, r6, #16
 8000e1c:	041e      	lsls	r6, r3, #16
 8000e1e:	0c36      	lsrs	r6, r6, #16
 8000e20:	198e      	adds	r6, r1, r6
 8000e22:	4290      	cmp	r0, r2
 8000e24:	d302      	bcc.n	8000e2c <__aeabi_ddiv+0x1ac>
 8000e26:	d112      	bne.n	8000e4e <__aeabi_ddiv+0x1ce>
 8000e28:	42b5      	cmp	r5, r6
 8000e2a:	d210      	bcs.n	8000e4e <__aeabi_ddiv+0x1ce>
 8000e2c:	4643      	mov	r3, r8
 8000e2e:	1e59      	subs	r1, r3, #1
 8000e30:	9b00      	ldr	r3, [sp, #0]
 8000e32:	469c      	mov	ip, r3
 8000e34:	4465      	add	r5, ip
 8000e36:	001f      	movs	r7, r3
 8000e38:	429d      	cmp	r5, r3
 8000e3a:	419b      	sbcs	r3, r3
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	191b      	adds	r3, r3, r4
 8000e40:	18c0      	adds	r0, r0, r3
 8000e42:	4284      	cmp	r4, r0
 8000e44:	d200      	bcs.n	8000e48 <__aeabi_ddiv+0x1c8>
 8000e46:	e1a0      	b.n	800118a <__aeabi_ddiv+0x50a>
 8000e48:	d100      	bne.n	8000e4c <__aeabi_ddiv+0x1cc>
 8000e4a:	e19b      	b.n	8001184 <__aeabi_ddiv+0x504>
 8000e4c:	4688      	mov	r8, r1
 8000e4e:	1bae      	subs	r6, r5, r6
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	41ad      	sbcs	r5, r5
 8000e54:	1a80      	subs	r0, r0, r2
 8000e56:	426d      	negs	r5, r5
 8000e58:	1b40      	subs	r0, r0, r5
 8000e5a:	4284      	cmp	r4, r0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x1e0>
 8000e5e:	e1d5      	b.n	800120c <__aeabi_ddiv+0x58c>
 8000e60:	4649      	mov	r1, r9
 8000e62:	f7ff f9e1 	bl	8000228 <__aeabi_uidivmod>
 8000e66:	9a01      	ldr	r2, [sp, #4]
 8000e68:	040b      	lsls	r3, r1, #16
 8000e6a:	4342      	muls	r2, r0
 8000e6c:	0c31      	lsrs	r1, r6, #16
 8000e6e:	0005      	movs	r5, r0
 8000e70:	4319      	orrs	r1, r3
 8000e72:	428a      	cmp	r2, r1
 8000e74:	d900      	bls.n	8000e78 <__aeabi_ddiv+0x1f8>
 8000e76:	e16c      	b.n	8001152 <__aeabi_ddiv+0x4d2>
 8000e78:	1a88      	subs	r0, r1, r2
 8000e7a:	4649      	mov	r1, r9
 8000e7c:	f7ff f9d4 	bl	8000228 <__aeabi_uidivmod>
 8000e80:	9a01      	ldr	r2, [sp, #4]
 8000e82:	0436      	lsls	r6, r6, #16
 8000e84:	4342      	muls	r2, r0
 8000e86:	0409      	lsls	r1, r1, #16
 8000e88:	0c36      	lsrs	r6, r6, #16
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	430e      	orrs	r6, r1
 8000e8e:	42b2      	cmp	r2, r6
 8000e90:	d900      	bls.n	8000e94 <__aeabi_ddiv+0x214>
 8000e92:	e153      	b.n	800113c <__aeabi_ddiv+0x4bc>
 8000e94:	9803      	ldr	r0, [sp, #12]
 8000e96:	1ab6      	subs	r6, r6, r2
 8000e98:	0002      	movs	r2, r0
 8000e9a:	042d      	lsls	r5, r5, #16
 8000e9c:	431d      	orrs	r5, r3
 8000e9e:	9f02      	ldr	r7, [sp, #8]
 8000ea0:	042b      	lsls	r3, r5, #16
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	435a      	muls	r2, r3
 8000ea6:	437b      	muls	r3, r7
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0c29      	lsrs	r1, r5, #16
 8000eac:	4348      	muls	r0, r1
 8000eae:	0c13      	lsrs	r3, r2, #16
 8000eb0:	4484      	add	ip, r0
 8000eb2:	4463      	add	r3, ip
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d903      	bls.n	8000ec2 <__aeabi_ddiv+0x242>
 8000eba:	2080      	movs	r0, #128	; 0x80
 8000ebc:	0240      	lsls	r0, r0, #9
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	4461      	add	r1, ip
 8000ec2:	0c18      	lsrs	r0, r3, #16
 8000ec4:	0412      	lsls	r2, r2, #16
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	0c12      	lsrs	r2, r2, #16
 8000eca:	1841      	adds	r1, r0, r1
 8000ecc:	189b      	adds	r3, r3, r2
 8000ece:	428e      	cmp	r6, r1
 8000ed0:	d200      	bcs.n	8000ed4 <__aeabi_ddiv+0x254>
 8000ed2:	e0ff      	b.n	80010d4 <__aeabi_ddiv+0x454>
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x258>
 8000ed6:	e0fa      	b.n	80010ce <__aeabi_ddiv+0x44e>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	431d      	orrs	r5, r3
 8000edc:	4a49      	ldr	r2, [pc, #292]	; (8001004 <__aeabi_ddiv+0x384>)
 8000ede:	445a      	add	r2, fp
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_ddiv+0x266>
 8000ee4:	e0aa      	b.n	800103c <__aeabi_ddiv+0x3bc>
 8000ee6:	076b      	lsls	r3, r5, #29
 8000ee8:	d000      	beq.n	8000eec <__aeabi_ddiv+0x26c>
 8000eea:	e13d      	b.n	8001168 <__aeabi_ddiv+0x4e8>
 8000eec:	08ed      	lsrs	r5, r5, #3
 8000eee:	4643      	mov	r3, r8
 8000ef0:	01db      	lsls	r3, r3, #7
 8000ef2:	d506      	bpl.n	8000f02 <__aeabi_ddiv+0x282>
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	4b44      	ldr	r3, [pc, #272]	; (8001008 <__aeabi_ddiv+0x388>)
 8000ef8:	401a      	ands	r2, r3
 8000efa:	4690      	mov	r8, r2
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	00d2      	lsls	r2, r2, #3
 8000f00:	445a      	add	r2, fp
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <__aeabi_ddiv+0x38c>)
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dd00      	ble.n	8000f0a <__aeabi_ddiv+0x28a>
 8000f08:	e71f      	b.n	8000d4a <__aeabi_ddiv+0xca>
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	075b      	lsls	r3, r3, #29
 8000f0e:	431d      	orrs	r5, r3
 8000f10:	4643      	mov	r3, r8
 8000f12:	0552      	lsls	r2, r2, #21
 8000f14:	025c      	lsls	r4, r3, #9
 8000f16:	0b24      	lsrs	r4, r4, #12
 8000f18:	0d53      	lsrs	r3, r2, #21
 8000f1a:	e708      	b.n	8000d2e <__aeabi_ddiv+0xae>
 8000f1c:	4652      	mov	r2, sl
 8000f1e:	4322      	orrs	r2, r4
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x2a4>
 8000f22:	e07b      	b.n	800101c <__aeabi_ddiv+0x39c>
 8000f24:	2c00      	cmp	r4, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x2aa>
 8000f28:	e0fa      	b.n	8001120 <__aeabi_ddiv+0x4a0>
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	f001 f888 	bl	8002040 <__clzsi2>
 8000f30:	0002      	movs	r2, r0
 8000f32:	3a0b      	subs	r2, #11
 8000f34:	231d      	movs	r3, #29
 8000f36:	0001      	movs	r1, r0
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	3908      	subs	r1, #8
 8000f3e:	40da      	lsrs	r2, r3
 8000f40:	408c      	lsls	r4, r1
 8000f42:	4314      	orrs	r4, r2
 8000f44:	4652      	mov	r2, sl
 8000f46:	408a      	lsls	r2, r1
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <__aeabi_ddiv+0x390>)
 8000f4a:	4458      	add	r0, fp
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	4483      	add	fp, r0
 8000f50:	2000      	movs	r0, #0
 8000f52:	e6d5      	b.n	8000d00 <__aeabi_ddiv+0x80>
 8000f54:	464b      	mov	r3, r9
 8000f56:	4323      	orrs	r3, r4
 8000f58:	4698      	mov	r8, r3
 8000f5a:	d044      	beq.n	8000fe6 <__aeabi_ddiv+0x366>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x2e2>
 8000f60:	e0ce      	b.n	8001100 <__aeabi_ddiv+0x480>
 8000f62:	0020      	movs	r0, r4
 8000f64:	f001 f86c 	bl	8002040 <__clzsi2>
 8000f68:	0001      	movs	r1, r0
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	390b      	subs	r1, #11
 8000f6e:	231d      	movs	r3, #29
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	4649      	mov	r1, r9
 8000f74:	0010      	movs	r0, r2
 8000f76:	40d9      	lsrs	r1, r3
 8000f78:	3808      	subs	r0, #8
 8000f7a:	4084      	lsls	r4, r0
 8000f7c:	000b      	movs	r3, r1
 8000f7e:	464d      	mov	r5, r9
 8000f80:	4323      	orrs	r3, r4
 8000f82:	4698      	mov	r8, r3
 8000f84:	4085      	lsls	r5, r0
 8000f86:	4823      	ldr	r0, [pc, #140]	; (8001014 <__aeabi_ddiv+0x394>)
 8000f88:	1a83      	subs	r3, r0, r2
 8000f8a:	469b      	mov	fp, r3
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	4699      	mov	r9, r3
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	e69a      	b.n	8000cca <__aeabi_ddiv+0x4a>
 8000f94:	464b      	mov	r3, r9
 8000f96:	4323      	orrs	r3, r4
 8000f98:	4698      	mov	r8, r3
 8000f9a:	d11d      	bne.n	8000fd8 <__aeabi_ddiv+0x358>
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	4699      	mov	r9, r3
 8000fa0:	3b06      	subs	r3, #6
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	4683      	mov	fp, r0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	e68f      	b.n	8000cca <__aeabi_ddiv+0x4a>
 8000faa:	4652      	mov	r2, sl
 8000fac:	4322      	orrs	r2, r4
 8000fae:	d109      	bne.n	8000fc4 <__aeabi_ddiv+0x344>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <__aeabi_ddiv+0x398>)
 8000fb8:	4689      	mov	r9, r1
 8000fba:	469c      	mov	ip, r3
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	44e3      	add	fp, ip
 8000fc2:	e69d      	b.n	8000d00 <__aeabi_ddiv+0x80>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	464a      	mov	r2, r9
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <__aeabi_ddiv+0x398>)
 8000fcc:	4691      	mov	r9, r2
 8000fce:	469c      	mov	ip, r3
 8000fd0:	4652      	mov	r2, sl
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	44e3      	add	fp, ip
 8000fd6:	e693      	b.n	8000d00 <__aeabi_ddiv+0x80>
 8000fd8:	230c      	movs	r3, #12
 8000fda:	4699      	mov	r9, r3
 8000fdc:	3b09      	subs	r3, #9
 8000fde:	46a0      	mov	r8, r4
 8000fe0:	4683      	mov	fp, r0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	e671      	b.n	8000cca <__aeabi_ddiv+0x4a>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	4699      	mov	r9, r3
 8000fea:	2300      	movs	r3, #0
 8000fec:	469b      	mov	fp, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e669      	b.n	8000cca <__aeabi_ddiv+0x4a>
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	fffffc01 	.word	0xfffffc01
 8001000:	08006c5c 	.word	0x08006c5c
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	000003f3 	.word	0x000003f3
 8001014:	fffffc0d 	.word	0xfffffc0d
 8001018:	fffff801 	.word	0xfffff801
 800101c:	4649      	mov	r1, r9
 800101e:	2301      	movs	r3, #1
 8001020:	4319      	orrs	r1, r3
 8001022:	4689      	mov	r9, r1
 8001024:	2400      	movs	r4, #0
 8001026:	2001      	movs	r0, #1
 8001028:	e66a      	b.n	8000d00 <__aeabi_ddiv+0x80>
 800102a:	2300      	movs	r3, #0
 800102c:	2480      	movs	r4, #128	; 0x80
 800102e:	469a      	mov	sl, r3
 8001030:	2500      	movs	r5, #0
 8001032:	4b8a      	ldr	r3, [pc, #552]	; (800125c <__aeabi_ddiv+0x5dc>)
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	e67a      	b.n	8000d2e <__aeabi_ddiv+0xae>
 8001038:	2501      	movs	r5, #1
 800103a:	426d      	negs	r5, r5
 800103c:	2301      	movs	r3, #1
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	2b38      	cmp	r3, #56	; 0x38
 8001042:	dd00      	ble.n	8001046 <__aeabi_ddiv+0x3c6>
 8001044:	e670      	b.n	8000d28 <__aeabi_ddiv+0xa8>
 8001046:	2b1f      	cmp	r3, #31
 8001048:	dc00      	bgt.n	800104c <__aeabi_ddiv+0x3cc>
 800104a:	e0bf      	b.n	80011cc <__aeabi_ddiv+0x54c>
 800104c:	211f      	movs	r1, #31
 800104e:	4249      	negs	r1, r1
 8001050:	1a8a      	subs	r2, r1, r2
 8001052:	4641      	mov	r1, r8
 8001054:	40d1      	lsrs	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	2b20      	cmp	r3, #32
 800105a:	d004      	beq.n	8001066 <__aeabi_ddiv+0x3e6>
 800105c:	4641      	mov	r1, r8
 800105e:	4b80      	ldr	r3, [pc, #512]	; (8001260 <__aeabi_ddiv+0x5e0>)
 8001060:	445b      	add	r3, fp
 8001062:	4099      	lsls	r1, r3
 8001064:	430d      	orrs	r5, r1
 8001066:	1e6b      	subs	r3, r5, #1
 8001068:	419d      	sbcs	r5, r3
 800106a:	2307      	movs	r3, #7
 800106c:	432a      	orrs	r2, r5
 800106e:	001d      	movs	r5, r3
 8001070:	2400      	movs	r4, #0
 8001072:	4015      	ands	r5, r2
 8001074:	4213      	tst	r3, r2
 8001076:	d100      	bne.n	800107a <__aeabi_ddiv+0x3fa>
 8001078:	e0d4      	b.n	8001224 <__aeabi_ddiv+0x5a4>
 800107a:	210f      	movs	r1, #15
 800107c:	2300      	movs	r3, #0
 800107e:	4011      	ands	r1, r2
 8001080:	2904      	cmp	r1, #4
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0x406>
 8001084:	e0cb      	b.n	800121e <__aeabi_ddiv+0x59e>
 8001086:	1d11      	adds	r1, r2, #4
 8001088:	4291      	cmp	r1, r2
 800108a:	4192      	sbcs	r2, r2
 800108c:	4252      	negs	r2, r2
 800108e:	189b      	adds	r3, r3, r2
 8001090:	000a      	movs	r2, r1
 8001092:	0219      	lsls	r1, r3, #8
 8001094:	d400      	bmi.n	8001098 <__aeabi_ddiv+0x418>
 8001096:	e0c2      	b.n	800121e <__aeabi_ddiv+0x59e>
 8001098:	2301      	movs	r3, #1
 800109a:	2400      	movs	r4, #0
 800109c:	2500      	movs	r5, #0
 800109e:	e646      	b.n	8000d2e <__aeabi_ddiv+0xae>
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	4641      	mov	r1, r8
 80010a4:	031b      	lsls	r3, r3, #12
 80010a6:	4219      	tst	r1, r3
 80010a8:	d008      	beq.n	80010bc <__aeabi_ddiv+0x43c>
 80010aa:	421c      	tst	r4, r3
 80010ac:	d106      	bne.n	80010bc <__aeabi_ddiv+0x43c>
 80010ae:	431c      	orrs	r4, r3
 80010b0:	0324      	lsls	r4, r4, #12
 80010b2:	46ba      	mov	sl, r7
 80010b4:	0015      	movs	r5, r2
 80010b6:	4b69      	ldr	r3, [pc, #420]	; (800125c <__aeabi_ddiv+0x5dc>)
 80010b8:	0b24      	lsrs	r4, r4, #12
 80010ba:	e638      	b.n	8000d2e <__aeabi_ddiv+0xae>
 80010bc:	2480      	movs	r4, #128	; 0x80
 80010be:	4643      	mov	r3, r8
 80010c0:	0324      	lsls	r4, r4, #12
 80010c2:	431c      	orrs	r4, r3
 80010c4:	0324      	lsls	r4, r4, #12
 80010c6:	46b2      	mov	sl, r6
 80010c8:	4b64      	ldr	r3, [pc, #400]	; (800125c <__aeabi_ddiv+0x5dc>)
 80010ca:	0b24      	lsrs	r4, r4, #12
 80010cc:	e62f      	b.n	8000d2e <__aeabi_ddiv+0xae>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_ddiv+0x454>
 80010d2:	e703      	b.n	8000edc <__aeabi_ddiv+0x25c>
 80010d4:	19a6      	adds	r6, r4, r6
 80010d6:	1e68      	subs	r0, r5, #1
 80010d8:	42a6      	cmp	r6, r4
 80010da:	d200      	bcs.n	80010de <__aeabi_ddiv+0x45e>
 80010dc:	e08d      	b.n	80011fa <__aeabi_ddiv+0x57a>
 80010de:	428e      	cmp	r6, r1
 80010e0:	d200      	bcs.n	80010e4 <__aeabi_ddiv+0x464>
 80010e2:	e0a3      	b.n	800122c <__aeabi_ddiv+0x5ac>
 80010e4:	d100      	bne.n	80010e8 <__aeabi_ddiv+0x468>
 80010e6:	e0b3      	b.n	8001250 <__aeabi_ddiv+0x5d0>
 80010e8:	0005      	movs	r5, r0
 80010ea:	e6f5      	b.n	8000ed8 <__aeabi_ddiv+0x258>
 80010ec:	42aa      	cmp	r2, r5
 80010ee:	d900      	bls.n	80010f2 <__aeabi_ddiv+0x472>
 80010f0:	e639      	b.n	8000d66 <__aeabi_ddiv+0xe6>
 80010f2:	4643      	mov	r3, r8
 80010f4:	07de      	lsls	r6, r3, #31
 80010f6:	0858      	lsrs	r0, r3, #1
 80010f8:	086b      	lsrs	r3, r5, #1
 80010fa:	431e      	orrs	r6, r3
 80010fc:	07ed      	lsls	r5, r5, #31
 80010fe:	e639      	b.n	8000d74 <__aeabi_ddiv+0xf4>
 8001100:	4648      	mov	r0, r9
 8001102:	f000 ff9d 	bl	8002040 <__clzsi2>
 8001106:	0001      	movs	r1, r0
 8001108:	0002      	movs	r2, r0
 800110a:	3115      	adds	r1, #21
 800110c:	3220      	adds	r2, #32
 800110e:	291c      	cmp	r1, #28
 8001110:	dc00      	bgt.n	8001114 <__aeabi_ddiv+0x494>
 8001112:	e72c      	b.n	8000f6e <__aeabi_ddiv+0x2ee>
 8001114:	464b      	mov	r3, r9
 8001116:	3808      	subs	r0, #8
 8001118:	4083      	lsls	r3, r0
 800111a:	2500      	movs	r5, #0
 800111c:	4698      	mov	r8, r3
 800111e:	e732      	b.n	8000f86 <__aeabi_ddiv+0x306>
 8001120:	f000 ff8e 	bl	8002040 <__clzsi2>
 8001124:	0003      	movs	r3, r0
 8001126:	001a      	movs	r2, r3
 8001128:	3215      	adds	r2, #21
 800112a:	3020      	adds	r0, #32
 800112c:	2a1c      	cmp	r2, #28
 800112e:	dc00      	bgt.n	8001132 <__aeabi_ddiv+0x4b2>
 8001130:	e700      	b.n	8000f34 <__aeabi_ddiv+0x2b4>
 8001132:	4654      	mov	r4, sl
 8001134:	3b08      	subs	r3, #8
 8001136:	2200      	movs	r2, #0
 8001138:	409c      	lsls	r4, r3
 800113a:	e705      	b.n	8000f48 <__aeabi_ddiv+0x2c8>
 800113c:	1936      	adds	r6, r6, r4
 800113e:	3b01      	subs	r3, #1
 8001140:	42b4      	cmp	r4, r6
 8001142:	d900      	bls.n	8001146 <__aeabi_ddiv+0x4c6>
 8001144:	e6a6      	b.n	8000e94 <__aeabi_ddiv+0x214>
 8001146:	42b2      	cmp	r2, r6
 8001148:	d800      	bhi.n	800114c <__aeabi_ddiv+0x4cc>
 800114a:	e6a3      	b.n	8000e94 <__aeabi_ddiv+0x214>
 800114c:	1e83      	subs	r3, r0, #2
 800114e:	1936      	adds	r6, r6, r4
 8001150:	e6a0      	b.n	8000e94 <__aeabi_ddiv+0x214>
 8001152:	1909      	adds	r1, r1, r4
 8001154:	3d01      	subs	r5, #1
 8001156:	428c      	cmp	r4, r1
 8001158:	d900      	bls.n	800115c <__aeabi_ddiv+0x4dc>
 800115a:	e68d      	b.n	8000e78 <__aeabi_ddiv+0x1f8>
 800115c:	428a      	cmp	r2, r1
 800115e:	d800      	bhi.n	8001162 <__aeabi_ddiv+0x4e2>
 8001160:	e68a      	b.n	8000e78 <__aeabi_ddiv+0x1f8>
 8001162:	1e85      	subs	r5, r0, #2
 8001164:	1909      	adds	r1, r1, r4
 8001166:	e687      	b.n	8000e78 <__aeabi_ddiv+0x1f8>
 8001168:	230f      	movs	r3, #15
 800116a:	402b      	ands	r3, r5
 800116c:	2b04      	cmp	r3, #4
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x4f2>
 8001170:	e6bc      	b.n	8000eec <__aeabi_ddiv+0x26c>
 8001172:	2305      	movs	r3, #5
 8001174:	425b      	negs	r3, r3
 8001176:	42ab      	cmp	r3, r5
 8001178:	419b      	sbcs	r3, r3
 800117a:	3504      	adds	r5, #4
 800117c:	425b      	negs	r3, r3
 800117e:	08ed      	lsrs	r5, r5, #3
 8001180:	4498      	add	r8, r3
 8001182:	e6b4      	b.n	8000eee <__aeabi_ddiv+0x26e>
 8001184:	42af      	cmp	r7, r5
 8001186:	d900      	bls.n	800118a <__aeabi_ddiv+0x50a>
 8001188:	e660      	b.n	8000e4c <__aeabi_ddiv+0x1cc>
 800118a:	4282      	cmp	r2, r0
 800118c:	d804      	bhi.n	8001198 <__aeabi_ddiv+0x518>
 800118e:	d000      	beq.n	8001192 <__aeabi_ddiv+0x512>
 8001190:	e65c      	b.n	8000e4c <__aeabi_ddiv+0x1cc>
 8001192:	42ae      	cmp	r6, r5
 8001194:	d800      	bhi.n	8001198 <__aeabi_ddiv+0x518>
 8001196:	e659      	b.n	8000e4c <__aeabi_ddiv+0x1cc>
 8001198:	2302      	movs	r3, #2
 800119a:	425b      	negs	r3, r3
 800119c:	469c      	mov	ip, r3
 800119e:	9b00      	ldr	r3, [sp, #0]
 80011a0:	44e0      	add	r8, ip
 80011a2:	469c      	mov	ip, r3
 80011a4:	4465      	add	r5, ip
 80011a6:	429d      	cmp	r5, r3
 80011a8:	419b      	sbcs	r3, r3
 80011aa:	425b      	negs	r3, r3
 80011ac:	191b      	adds	r3, r3, r4
 80011ae:	18c0      	adds	r0, r0, r3
 80011b0:	e64d      	b.n	8000e4e <__aeabi_ddiv+0x1ce>
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d800      	bhi.n	80011b8 <__aeabi_ddiv+0x538>
 80011b6:	e60e      	b.n	8000dd6 <__aeabi_ddiv+0x156>
 80011b8:	1e83      	subs	r3, r0, #2
 80011ba:	1909      	adds	r1, r1, r4
 80011bc:	e60b      	b.n	8000dd6 <__aeabi_ddiv+0x156>
 80011be:	428a      	cmp	r2, r1
 80011c0:	d800      	bhi.n	80011c4 <__aeabi_ddiv+0x544>
 80011c2:	e5f4      	b.n	8000dae <__aeabi_ddiv+0x12e>
 80011c4:	1e83      	subs	r3, r0, #2
 80011c6:	4698      	mov	r8, r3
 80011c8:	1909      	adds	r1, r1, r4
 80011ca:	e5f0      	b.n	8000dae <__aeabi_ddiv+0x12e>
 80011cc:	4925      	ldr	r1, [pc, #148]	; (8001264 <__aeabi_ddiv+0x5e4>)
 80011ce:	0028      	movs	r0, r5
 80011d0:	4459      	add	r1, fp
 80011d2:	408d      	lsls	r5, r1
 80011d4:	4642      	mov	r2, r8
 80011d6:	408a      	lsls	r2, r1
 80011d8:	1e69      	subs	r1, r5, #1
 80011da:	418d      	sbcs	r5, r1
 80011dc:	4641      	mov	r1, r8
 80011de:	40d8      	lsrs	r0, r3
 80011e0:	40d9      	lsrs	r1, r3
 80011e2:	4302      	orrs	r2, r0
 80011e4:	432a      	orrs	r2, r5
 80011e6:	000b      	movs	r3, r1
 80011e8:	0751      	lsls	r1, r2, #29
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x56e>
 80011ec:	e751      	b.n	8001092 <__aeabi_ddiv+0x412>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4011      	ands	r1, r2
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_ddiv+0x578>
 80011f6:	e746      	b.n	8001086 <__aeabi_ddiv+0x406>
 80011f8:	e74b      	b.n	8001092 <__aeabi_ddiv+0x412>
 80011fa:	0005      	movs	r5, r0
 80011fc:	428e      	cmp	r6, r1
 80011fe:	d000      	beq.n	8001202 <__aeabi_ddiv+0x582>
 8001200:	e66a      	b.n	8000ed8 <__aeabi_ddiv+0x258>
 8001202:	9a00      	ldr	r2, [sp, #0]
 8001204:	4293      	cmp	r3, r2
 8001206:	d000      	beq.n	800120a <__aeabi_ddiv+0x58a>
 8001208:	e666      	b.n	8000ed8 <__aeabi_ddiv+0x258>
 800120a:	e667      	b.n	8000edc <__aeabi_ddiv+0x25c>
 800120c:	4a16      	ldr	r2, [pc, #88]	; (8001268 <__aeabi_ddiv+0x5e8>)
 800120e:	445a      	add	r2, fp
 8001210:	2a00      	cmp	r2, #0
 8001212:	dc00      	bgt.n	8001216 <__aeabi_ddiv+0x596>
 8001214:	e710      	b.n	8001038 <__aeabi_ddiv+0x3b8>
 8001216:	2301      	movs	r3, #1
 8001218:	2500      	movs	r5, #0
 800121a:	4498      	add	r8, r3
 800121c:	e667      	b.n	8000eee <__aeabi_ddiv+0x26e>
 800121e:	075d      	lsls	r5, r3, #29
 8001220:	025b      	lsls	r3, r3, #9
 8001222:	0b1c      	lsrs	r4, r3, #12
 8001224:	08d2      	lsrs	r2, r2, #3
 8001226:	2300      	movs	r3, #0
 8001228:	4315      	orrs	r5, r2
 800122a:	e580      	b.n	8000d2e <__aeabi_ddiv+0xae>
 800122c:	9800      	ldr	r0, [sp, #0]
 800122e:	3d02      	subs	r5, #2
 8001230:	0042      	lsls	r2, r0, #1
 8001232:	4282      	cmp	r2, r0
 8001234:	41bf      	sbcs	r7, r7
 8001236:	427f      	negs	r7, r7
 8001238:	193c      	adds	r4, r7, r4
 800123a:	1936      	adds	r6, r6, r4
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	e7dd      	b.n	80011fc <__aeabi_ddiv+0x57c>
 8001240:	2480      	movs	r4, #128	; 0x80
 8001242:	4643      	mov	r3, r8
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	431c      	orrs	r4, r3
 8001248:	0324      	lsls	r4, r4, #12
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <__aeabi_ddiv+0x5dc>)
 800124c:	0b24      	lsrs	r4, r4, #12
 800124e:	e56e      	b.n	8000d2e <__aeabi_ddiv+0xae>
 8001250:	9a00      	ldr	r2, [sp, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3ea      	bcc.n	800122c <__aeabi_ddiv+0x5ac>
 8001256:	0005      	movs	r5, r0
 8001258:	e7d3      	b.n	8001202 <__aeabi_ddiv+0x582>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	000007ff 	.word	0x000007ff
 8001260:	0000043e 	.word	0x0000043e
 8001264:	0000041e 	.word	0x0000041e
 8001268:	000003ff 	.word	0x000003ff

0800126c <__aeabi_dmul>:
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	4657      	mov	r7, sl
 8001270:	464e      	mov	r6, r9
 8001272:	4645      	mov	r5, r8
 8001274:	46de      	mov	lr, fp
 8001276:	b5e0      	push	{r5, r6, r7, lr}
 8001278:	4698      	mov	r8, r3
 800127a:	030c      	lsls	r4, r1, #12
 800127c:	004b      	lsls	r3, r1, #1
 800127e:	0006      	movs	r6, r0
 8001280:	4692      	mov	sl, r2
 8001282:	b087      	sub	sp, #28
 8001284:	0b24      	lsrs	r4, r4, #12
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	0fcf      	lsrs	r7, r1, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_dmul+0x24>
 800128e:	e15c      	b.n	800154a <__aeabi_dmul+0x2de>
 8001290:	4ad9      	ldr	r2, [pc, #868]	; (80015f8 <__aeabi_dmul+0x38c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_dmul+0x2c>
 8001296:	e175      	b.n	8001584 <__aeabi_dmul+0x318>
 8001298:	0f42      	lsrs	r2, r0, #29
 800129a:	00e4      	lsls	r4, r4, #3
 800129c:	4314      	orrs	r4, r2
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0412      	lsls	r2, r2, #16
 80012a2:	4314      	orrs	r4, r2
 80012a4:	4ad5      	ldr	r2, [pc, #852]	; (80015fc <__aeabi_dmul+0x390>)
 80012a6:	00c5      	lsls	r5, r0, #3
 80012a8:	4694      	mov	ip, r2
 80012aa:	4463      	add	r3, ip
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	4699      	mov	r9, r3
 80012b2:	469b      	mov	fp, r3
 80012b4:	4643      	mov	r3, r8
 80012b6:	4642      	mov	r2, r8
 80012b8:	031e      	lsls	r6, r3, #12
 80012ba:	0fd2      	lsrs	r2, r2, #31
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4650      	mov	r0, sl
 80012c0:	4690      	mov	r8, r2
 80012c2:	0b36      	lsrs	r6, r6, #12
 80012c4:	0d5b      	lsrs	r3, r3, #21
 80012c6:	d100      	bne.n	80012ca <__aeabi_dmul+0x5e>
 80012c8:	e120      	b.n	800150c <__aeabi_dmul+0x2a0>
 80012ca:	4acb      	ldr	r2, [pc, #812]	; (80015f8 <__aeabi_dmul+0x38c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dmul+0x66>
 80012d0:	e162      	b.n	8001598 <__aeabi_dmul+0x32c>
 80012d2:	49ca      	ldr	r1, [pc, #808]	; (80015fc <__aeabi_dmul+0x390>)
 80012d4:	0f42      	lsrs	r2, r0, #29
 80012d6:	468c      	mov	ip, r1
 80012d8:	9900      	ldr	r1, [sp, #0]
 80012da:	4463      	add	r3, ip
 80012dc:	00f6      	lsls	r6, r6, #3
 80012de:	468c      	mov	ip, r1
 80012e0:	4316      	orrs	r6, r2
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	449c      	add	ip, r3
 80012e6:	0412      	lsls	r2, r2, #16
 80012e8:	4663      	mov	r3, ip
 80012ea:	4316      	orrs	r6, r2
 80012ec:	00c2      	lsls	r2, r0, #3
 80012ee:	2000      	movs	r0, #0
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	9900      	ldr	r1, [sp, #0]
 80012f4:	4643      	mov	r3, r8
 80012f6:	3101      	adds	r1, #1
 80012f8:	468c      	mov	ip, r1
 80012fa:	4649      	mov	r1, r9
 80012fc:	407b      	eors	r3, r7
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	290f      	cmp	r1, #15
 8001302:	d826      	bhi.n	8001352 <__aeabi_dmul+0xe6>
 8001304:	4bbe      	ldr	r3, [pc, #760]	; (8001600 <__aeabi_dmul+0x394>)
 8001306:	0089      	lsls	r1, r1, #2
 8001308:	5859      	ldr	r1, [r3, r1]
 800130a:	468f      	mov	pc, r1
 800130c:	4643      	mov	r3, r8
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	0034      	movs	r4, r6
 8001312:	0015      	movs	r5, r2
 8001314:	4683      	mov	fp, r0
 8001316:	465b      	mov	r3, fp
 8001318:	2b02      	cmp	r3, #2
 800131a:	d016      	beq.n	800134a <__aeabi_dmul+0xde>
 800131c:	2b03      	cmp	r3, #3
 800131e:	d100      	bne.n	8001322 <__aeabi_dmul+0xb6>
 8001320:	e203      	b.n	800172a <__aeabi_dmul+0x4be>
 8001322:	2b01      	cmp	r3, #1
 8001324:	d000      	beq.n	8001328 <__aeabi_dmul+0xbc>
 8001326:	e0cd      	b.n	80014c4 <__aeabi_dmul+0x258>
 8001328:	2200      	movs	r2, #0
 800132a:	2400      	movs	r4, #0
 800132c:	2500      	movs	r5, #0
 800132e:	9b01      	ldr	r3, [sp, #4]
 8001330:	0512      	lsls	r2, r2, #20
 8001332:	4322      	orrs	r2, r4
 8001334:	07db      	lsls	r3, r3, #31
 8001336:	431a      	orrs	r2, r3
 8001338:	0028      	movs	r0, r5
 800133a:	0011      	movs	r1, r2
 800133c:	b007      	add	sp, #28
 800133e:	bcf0      	pop	{r4, r5, r6, r7}
 8001340:	46bb      	mov	fp, r7
 8001342:	46b2      	mov	sl, r6
 8001344:	46a9      	mov	r9, r5
 8001346:	46a0      	mov	r8, r4
 8001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134a:	2400      	movs	r4, #0
 800134c:	2500      	movs	r5, #0
 800134e:	4aaa      	ldr	r2, [pc, #680]	; (80015f8 <__aeabi_dmul+0x38c>)
 8001350:	e7ed      	b.n	800132e <__aeabi_dmul+0xc2>
 8001352:	0c28      	lsrs	r0, r5, #16
 8001354:	042d      	lsls	r5, r5, #16
 8001356:	0c2d      	lsrs	r5, r5, #16
 8001358:	002b      	movs	r3, r5
 800135a:	0c11      	lsrs	r1, r2, #16
 800135c:	0412      	lsls	r2, r2, #16
 800135e:	0c12      	lsrs	r2, r2, #16
 8001360:	4353      	muls	r3, r2
 8001362:	4698      	mov	r8, r3
 8001364:	0013      	movs	r3, r2
 8001366:	002f      	movs	r7, r5
 8001368:	4343      	muls	r3, r0
 800136a:	4699      	mov	r9, r3
 800136c:	434f      	muls	r7, r1
 800136e:	444f      	add	r7, r9
 8001370:	46bb      	mov	fp, r7
 8001372:	4647      	mov	r7, r8
 8001374:	000b      	movs	r3, r1
 8001376:	0c3f      	lsrs	r7, r7, #16
 8001378:	46ba      	mov	sl, r7
 800137a:	4343      	muls	r3, r0
 800137c:	44da      	add	sl, fp
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	45d1      	cmp	r9, sl
 8001382:	d904      	bls.n	800138e <__aeabi_dmul+0x122>
 8001384:	2780      	movs	r7, #128	; 0x80
 8001386:	027f      	lsls	r7, r7, #9
 8001388:	46b9      	mov	r9, r7
 800138a:	444b      	add	r3, r9
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	4653      	mov	r3, sl
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	469b      	mov	fp, r3
 8001394:	4653      	mov	r3, sl
 8001396:	041f      	lsls	r7, r3, #16
 8001398:	4643      	mov	r3, r8
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	4698      	mov	r8, r3
 80013a0:	003b      	movs	r3, r7
 80013a2:	4443      	add	r3, r8
 80013a4:	9304      	str	r3, [sp, #16]
 80013a6:	0c33      	lsrs	r3, r6, #16
 80013a8:	0436      	lsls	r6, r6, #16
 80013aa:	0c36      	lsrs	r6, r6, #16
 80013ac:	4698      	mov	r8, r3
 80013ae:	0033      	movs	r3, r6
 80013b0:	4343      	muls	r3, r0
 80013b2:	4699      	mov	r9, r3
 80013b4:	4643      	mov	r3, r8
 80013b6:	4343      	muls	r3, r0
 80013b8:	002f      	movs	r7, r5
 80013ba:	469a      	mov	sl, r3
 80013bc:	4643      	mov	r3, r8
 80013be:	4377      	muls	r7, r6
 80013c0:	435d      	muls	r5, r3
 80013c2:	0c38      	lsrs	r0, r7, #16
 80013c4:	444d      	add	r5, r9
 80013c6:	1945      	adds	r5, r0, r5
 80013c8:	45a9      	cmp	r9, r5
 80013ca:	d903      	bls.n	80013d4 <__aeabi_dmul+0x168>
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	4699      	mov	r9, r3
 80013d2:	44ca      	add	sl, r9
 80013d4:	043f      	lsls	r7, r7, #16
 80013d6:	0c28      	lsrs	r0, r5, #16
 80013d8:	0c3f      	lsrs	r7, r7, #16
 80013da:	042d      	lsls	r5, r5, #16
 80013dc:	19ed      	adds	r5, r5, r7
 80013de:	0c27      	lsrs	r7, r4, #16
 80013e0:	0424      	lsls	r4, r4, #16
 80013e2:	0c24      	lsrs	r4, r4, #16
 80013e4:	0003      	movs	r3, r0
 80013e6:	0020      	movs	r0, r4
 80013e8:	4350      	muls	r0, r2
 80013ea:	437a      	muls	r2, r7
 80013ec:	4691      	mov	r9, r2
 80013ee:	003a      	movs	r2, r7
 80013f0:	4453      	add	r3, sl
 80013f2:	9305      	str	r3, [sp, #20]
 80013f4:	0c03      	lsrs	r3, r0, #16
 80013f6:	469a      	mov	sl, r3
 80013f8:	434a      	muls	r2, r1
 80013fa:	4361      	muls	r1, r4
 80013fc:	4449      	add	r1, r9
 80013fe:	4451      	add	r1, sl
 8001400:	44ab      	add	fp, r5
 8001402:	4589      	cmp	r9, r1
 8001404:	d903      	bls.n	800140e <__aeabi_dmul+0x1a2>
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	4699      	mov	r9, r3
 800140c:	444a      	add	r2, r9
 800140e:	0400      	lsls	r0, r0, #16
 8001410:	0c0b      	lsrs	r3, r1, #16
 8001412:	0c00      	lsrs	r0, r0, #16
 8001414:	0409      	lsls	r1, r1, #16
 8001416:	1809      	adds	r1, r1, r0
 8001418:	0020      	movs	r0, r4
 800141a:	4699      	mov	r9, r3
 800141c:	4643      	mov	r3, r8
 800141e:	4370      	muls	r0, r6
 8001420:	435c      	muls	r4, r3
 8001422:	437e      	muls	r6, r7
 8001424:	435f      	muls	r7, r3
 8001426:	0c03      	lsrs	r3, r0, #16
 8001428:	4698      	mov	r8, r3
 800142a:	19a4      	adds	r4, r4, r6
 800142c:	4444      	add	r4, r8
 800142e:	444a      	add	r2, r9
 8001430:	9703      	str	r7, [sp, #12]
 8001432:	42a6      	cmp	r6, r4
 8001434:	d904      	bls.n	8001440 <__aeabi_dmul+0x1d4>
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	4698      	mov	r8, r3
 800143c:	4447      	add	r7, r8
 800143e:	9703      	str	r7, [sp, #12]
 8001440:	0423      	lsls	r3, r4, #16
 8001442:	9e02      	ldr	r6, [sp, #8]
 8001444:	469a      	mov	sl, r3
 8001446:	9b05      	ldr	r3, [sp, #20]
 8001448:	445e      	add	r6, fp
 800144a:	4698      	mov	r8, r3
 800144c:	42ae      	cmp	r6, r5
 800144e:	41ad      	sbcs	r5, r5
 8001450:	1876      	adds	r6, r6, r1
 8001452:	428e      	cmp	r6, r1
 8001454:	4189      	sbcs	r1, r1
 8001456:	0400      	lsls	r0, r0, #16
 8001458:	0c00      	lsrs	r0, r0, #16
 800145a:	4450      	add	r0, sl
 800145c:	4440      	add	r0, r8
 800145e:	426d      	negs	r5, r5
 8001460:	1947      	adds	r7, r0, r5
 8001462:	46b8      	mov	r8, r7
 8001464:	4693      	mov	fp, r2
 8001466:	4249      	negs	r1, r1
 8001468:	4689      	mov	r9, r1
 800146a:	44c3      	add	fp, r8
 800146c:	44d9      	add	r9, fp
 800146e:	4298      	cmp	r0, r3
 8001470:	4180      	sbcs	r0, r0
 8001472:	45a8      	cmp	r8, r5
 8001474:	41ad      	sbcs	r5, r5
 8001476:	4593      	cmp	fp, r2
 8001478:	4192      	sbcs	r2, r2
 800147a:	4589      	cmp	r9, r1
 800147c:	4189      	sbcs	r1, r1
 800147e:	426d      	negs	r5, r5
 8001480:	4240      	negs	r0, r0
 8001482:	4328      	orrs	r0, r5
 8001484:	0c24      	lsrs	r4, r4, #16
 8001486:	4252      	negs	r2, r2
 8001488:	4249      	negs	r1, r1
 800148a:	430a      	orrs	r2, r1
 800148c:	9b03      	ldr	r3, [sp, #12]
 800148e:	1900      	adds	r0, r0, r4
 8001490:	1880      	adds	r0, r0, r2
 8001492:	18c7      	adds	r7, r0, r3
 8001494:	464b      	mov	r3, r9
 8001496:	0ddc      	lsrs	r4, r3, #23
 8001498:	9b04      	ldr	r3, [sp, #16]
 800149a:	0275      	lsls	r5, r6, #9
 800149c:	431d      	orrs	r5, r3
 800149e:	1e6a      	subs	r2, r5, #1
 80014a0:	4195      	sbcs	r5, r2
 80014a2:	464b      	mov	r3, r9
 80014a4:	0df6      	lsrs	r6, r6, #23
 80014a6:	027f      	lsls	r7, r7, #9
 80014a8:	4335      	orrs	r5, r6
 80014aa:	025a      	lsls	r2, r3, #9
 80014ac:	433c      	orrs	r4, r7
 80014ae:	4315      	orrs	r5, r2
 80014b0:	01fb      	lsls	r3, r7, #7
 80014b2:	d400      	bmi.n	80014b6 <__aeabi_dmul+0x24a>
 80014b4:	e11c      	b.n	80016f0 <__aeabi_dmul+0x484>
 80014b6:	2101      	movs	r1, #1
 80014b8:	086a      	lsrs	r2, r5, #1
 80014ba:	400d      	ands	r5, r1
 80014bc:	4315      	orrs	r5, r2
 80014be:	07e2      	lsls	r2, r4, #31
 80014c0:	4315      	orrs	r5, r2
 80014c2:	0864      	lsrs	r4, r4, #1
 80014c4:	494f      	ldr	r1, [pc, #316]	; (8001604 <__aeabi_dmul+0x398>)
 80014c6:	4461      	add	r1, ip
 80014c8:	2900      	cmp	r1, #0
 80014ca:	dc00      	bgt.n	80014ce <__aeabi_dmul+0x262>
 80014cc:	e0b0      	b.n	8001630 <__aeabi_dmul+0x3c4>
 80014ce:	076b      	lsls	r3, r5, #29
 80014d0:	d009      	beq.n	80014e6 <__aeabi_dmul+0x27a>
 80014d2:	220f      	movs	r2, #15
 80014d4:	402a      	ands	r2, r5
 80014d6:	2a04      	cmp	r2, #4
 80014d8:	d005      	beq.n	80014e6 <__aeabi_dmul+0x27a>
 80014da:	1d2a      	adds	r2, r5, #4
 80014dc:	42aa      	cmp	r2, r5
 80014de:	41ad      	sbcs	r5, r5
 80014e0:	426d      	negs	r5, r5
 80014e2:	1964      	adds	r4, r4, r5
 80014e4:	0015      	movs	r5, r2
 80014e6:	01e3      	lsls	r3, r4, #7
 80014e8:	d504      	bpl.n	80014f4 <__aeabi_dmul+0x288>
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	4a46      	ldr	r2, [pc, #280]	; (8001608 <__aeabi_dmul+0x39c>)
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4014      	ands	r4, r2
 80014f2:	4461      	add	r1, ip
 80014f4:	4a45      	ldr	r2, [pc, #276]	; (800160c <__aeabi_dmul+0x3a0>)
 80014f6:	4291      	cmp	r1, r2
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dmul+0x290>
 80014fa:	e726      	b.n	800134a <__aeabi_dmul+0xde>
 80014fc:	0762      	lsls	r2, r4, #29
 80014fe:	08ed      	lsrs	r5, r5, #3
 8001500:	0264      	lsls	r4, r4, #9
 8001502:	0549      	lsls	r1, r1, #21
 8001504:	4315      	orrs	r5, r2
 8001506:	0b24      	lsrs	r4, r4, #12
 8001508:	0d4a      	lsrs	r2, r1, #21
 800150a:	e710      	b.n	800132e <__aeabi_dmul+0xc2>
 800150c:	4652      	mov	r2, sl
 800150e:	4332      	orrs	r2, r6
 8001510:	d100      	bne.n	8001514 <__aeabi_dmul+0x2a8>
 8001512:	e07f      	b.n	8001614 <__aeabi_dmul+0x3a8>
 8001514:	2e00      	cmp	r6, #0
 8001516:	d100      	bne.n	800151a <__aeabi_dmul+0x2ae>
 8001518:	e0dc      	b.n	80016d4 <__aeabi_dmul+0x468>
 800151a:	0030      	movs	r0, r6
 800151c:	f000 fd90 	bl	8002040 <__clzsi2>
 8001520:	0002      	movs	r2, r0
 8001522:	3a0b      	subs	r2, #11
 8001524:	231d      	movs	r3, #29
 8001526:	0001      	movs	r1, r0
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	4652      	mov	r2, sl
 800152c:	3908      	subs	r1, #8
 800152e:	40da      	lsrs	r2, r3
 8001530:	408e      	lsls	r6, r1
 8001532:	4316      	orrs	r6, r2
 8001534:	4652      	mov	r2, sl
 8001536:	408a      	lsls	r2, r1
 8001538:	9b00      	ldr	r3, [sp, #0]
 800153a:	4935      	ldr	r1, [pc, #212]	; (8001610 <__aeabi_dmul+0x3a4>)
 800153c:	1a18      	subs	r0, r3, r0
 800153e:	0003      	movs	r3, r0
 8001540:	468c      	mov	ip, r1
 8001542:	4463      	add	r3, ip
 8001544:	2000      	movs	r0, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	e6d3      	b.n	80012f2 <__aeabi_dmul+0x86>
 800154a:	0025      	movs	r5, r4
 800154c:	4305      	orrs	r5, r0
 800154e:	d04a      	beq.n	80015e6 <__aeabi_dmul+0x37a>
 8001550:	2c00      	cmp	r4, #0
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x2ea>
 8001554:	e0b0      	b.n	80016b8 <__aeabi_dmul+0x44c>
 8001556:	0020      	movs	r0, r4
 8001558:	f000 fd72 	bl	8002040 <__clzsi2>
 800155c:	0001      	movs	r1, r0
 800155e:	0002      	movs	r2, r0
 8001560:	390b      	subs	r1, #11
 8001562:	231d      	movs	r3, #29
 8001564:	0010      	movs	r0, r2
 8001566:	1a5b      	subs	r3, r3, r1
 8001568:	0031      	movs	r1, r6
 800156a:	0035      	movs	r5, r6
 800156c:	3808      	subs	r0, #8
 800156e:	4084      	lsls	r4, r0
 8001570:	40d9      	lsrs	r1, r3
 8001572:	4085      	lsls	r5, r0
 8001574:	430c      	orrs	r4, r1
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <__aeabi_dmul+0x3a4>)
 8001578:	1a83      	subs	r3, r0, r2
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	4699      	mov	r9, r3
 8001580:	469b      	mov	fp, r3
 8001582:	e697      	b.n	80012b4 <__aeabi_dmul+0x48>
 8001584:	0005      	movs	r5, r0
 8001586:	4325      	orrs	r5, r4
 8001588:	d126      	bne.n	80015d8 <__aeabi_dmul+0x36c>
 800158a:	2208      	movs	r2, #8
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2302      	movs	r3, #2
 8001590:	2400      	movs	r4, #0
 8001592:	4691      	mov	r9, r2
 8001594:	469b      	mov	fp, r3
 8001596:	e68d      	b.n	80012b4 <__aeabi_dmul+0x48>
 8001598:	4652      	mov	r2, sl
 800159a:	9b00      	ldr	r3, [sp, #0]
 800159c:	4332      	orrs	r2, r6
 800159e:	d110      	bne.n	80015c2 <__aeabi_dmul+0x356>
 80015a0:	4915      	ldr	r1, [pc, #84]	; (80015f8 <__aeabi_dmul+0x38c>)
 80015a2:	2600      	movs	r6, #0
 80015a4:	468c      	mov	ip, r1
 80015a6:	4463      	add	r3, ip
 80015a8:	4649      	mov	r1, r9
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	4319      	orrs	r1, r3
 80015b0:	4689      	mov	r9, r1
 80015b2:	2002      	movs	r0, #2
 80015b4:	e69d      	b.n	80012f2 <__aeabi_dmul+0x86>
 80015b6:	465b      	mov	r3, fp
 80015b8:	9701      	str	r7, [sp, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d000      	beq.n	80015c0 <__aeabi_dmul+0x354>
 80015be:	e6ad      	b.n	800131c <__aeabi_dmul+0xb0>
 80015c0:	e6c3      	b.n	800134a <__aeabi_dmul+0xde>
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <__aeabi_dmul+0x38c>)
 80015c4:	2003      	movs	r0, #3
 80015c6:	4694      	mov	ip, r2
 80015c8:	4463      	add	r3, ip
 80015ca:	464a      	mov	r2, r9
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2303      	movs	r3, #3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	4691      	mov	r9, r2
 80015d4:	4652      	mov	r2, sl
 80015d6:	e68c      	b.n	80012f2 <__aeabi_dmul+0x86>
 80015d8:	220c      	movs	r2, #12
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2303      	movs	r3, #3
 80015de:	0005      	movs	r5, r0
 80015e0:	4691      	mov	r9, r2
 80015e2:	469b      	mov	fp, r3
 80015e4:	e666      	b.n	80012b4 <__aeabi_dmul+0x48>
 80015e6:	2304      	movs	r3, #4
 80015e8:	4699      	mov	r9, r3
 80015ea:	2300      	movs	r3, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	2400      	movs	r4, #0
 80015f2:	469b      	mov	fp, r3
 80015f4:	e65e      	b.n	80012b4 <__aeabi_dmul+0x48>
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	000007ff 	.word	0x000007ff
 80015fc:	fffffc01 	.word	0xfffffc01
 8001600:	08006c9c 	.word	0x08006c9c
 8001604:	000003ff 	.word	0x000003ff
 8001608:	feffffff 	.word	0xfeffffff
 800160c:	000007fe 	.word	0x000007fe
 8001610:	fffffc0d 	.word	0xfffffc0d
 8001614:	4649      	mov	r1, r9
 8001616:	2301      	movs	r3, #1
 8001618:	4319      	orrs	r1, r3
 800161a:	4689      	mov	r9, r1
 800161c:	2600      	movs	r6, #0
 800161e:	2001      	movs	r0, #1
 8001620:	e667      	b.n	80012f2 <__aeabi_dmul+0x86>
 8001622:	2300      	movs	r3, #0
 8001624:	2480      	movs	r4, #128	; 0x80
 8001626:	2500      	movs	r5, #0
 8001628:	4a43      	ldr	r2, [pc, #268]	; (8001738 <__aeabi_dmul+0x4cc>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	0324      	lsls	r4, r4, #12
 800162e:	e67e      	b.n	800132e <__aeabi_dmul+0xc2>
 8001630:	2001      	movs	r0, #1
 8001632:	1a40      	subs	r0, r0, r1
 8001634:	2838      	cmp	r0, #56	; 0x38
 8001636:	dd00      	ble.n	800163a <__aeabi_dmul+0x3ce>
 8001638:	e676      	b.n	8001328 <__aeabi_dmul+0xbc>
 800163a:	281f      	cmp	r0, #31
 800163c:	dd5b      	ble.n	80016f6 <__aeabi_dmul+0x48a>
 800163e:	221f      	movs	r2, #31
 8001640:	0023      	movs	r3, r4
 8001642:	4252      	negs	r2, r2
 8001644:	1a51      	subs	r1, r2, r1
 8001646:	40cb      	lsrs	r3, r1
 8001648:	0019      	movs	r1, r3
 800164a:	2820      	cmp	r0, #32
 800164c:	d003      	beq.n	8001656 <__aeabi_dmul+0x3ea>
 800164e:	4a3b      	ldr	r2, [pc, #236]	; (800173c <__aeabi_dmul+0x4d0>)
 8001650:	4462      	add	r2, ip
 8001652:	4094      	lsls	r4, r2
 8001654:	4325      	orrs	r5, r4
 8001656:	1e6a      	subs	r2, r5, #1
 8001658:	4195      	sbcs	r5, r2
 800165a:	002a      	movs	r2, r5
 800165c:	430a      	orrs	r2, r1
 800165e:	2107      	movs	r1, #7
 8001660:	000d      	movs	r5, r1
 8001662:	2400      	movs	r4, #0
 8001664:	4015      	ands	r5, r2
 8001666:	4211      	tst	r1, r2
 8001668:	d05b      	beq.n	8001722 <__aeabi_dmul+0x4b6>
 800166a:	210f      	movs	r1, #15
 800166c:	2400      	movs	r4, #0
 800166e:	4011      	ands	r1, r2
 8001670:	2904      	cmp	r1, #4
 8001672:	d053      	beq.n	800171c <__aeabi_dmul+0x4b0>
 8001674:	1d11      	adds	r1, r2, #4
 8001676:	4291      	cmp	r1, r2
 8001678:	4192      	sbcs	r2, r2
 800167a:	4252      	negs	r2, r2
 800167c:	18a4      	adds	r4, r4, r2
 800167e:	000a      	movs	r2, r1
 8001680:	0223      	lsls	r3, r4, #8
 8001682:	d54b      	bpl.n	800171c <__aeabi_dmul+0x4b0>
 8001684:	2201      	movs	r2, #1
 8001686:	2400      	movs	r4, #0
 8001688:	2500      	movs	r5, #0
 800168a:	e650      	b.n	800132e <__aeabi_dmul+0xc2>
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	031b      	lsls	r3, r3, #12
 8001690:	421c      	tst	r4, r3
 8001692:	d009      	beq.n	80016a8 <__aeabi_dmul+0x43c>
 8001694:	421e      	tst	r6, r3
 8001696:	d107      	bne.n	80016a8 <__aeabi_dmul+0x43c>
 8001698:	4333      	orrs	r3, r6
 800169a:	031c      	lsls	r4, r3, #12
 800169c:	4643      	mov	r3, r8
 800169e:	0015      	movs	r5, r2
 80016a0:	0b24      	lsrs	r4, r4, #12
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <__aeabi_dmul+0x4cc>)
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	e642      	b.n	800132e <__aeabi_dmul+0xc2>
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	0312      	lsls	r2, r2, #12
 80016ac:	4314      	orrs	r4, r2
 80016ae:	0324      	lsls	r4, r4, #12
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <__aeabi_dmul+0x4cc>)
 80016b2:	0b24      	lsrs	r4, r4, #12
 80016b4:	9701      	str	r7, [sp, #4]
 80016b6:	e63a      	b.n	800132e <__aeabi_dmul+0xc2>
 80016b8:	f000 fcc2 	bl	8002040 <__clzsi2>
 80016bc:	0001      	movs	r1, r0
 80016be:	0002      	movs	r2, r0
 80016c0:	3115      	adds	r1, #21
 80016c2:	3220      	adds	r2, #32
 80016c4:	291c      	cmp	r1, #28
 80016c6:	dc00      	bgt.n	80016ca <__aeabi_dmul+0x45e>
 80016c8:	e74b      	b.n	8001562 <__aeabi_dmul+0x2f6>
 80016ca:	0034      	movs	r4, r6
 80016cc:	3808      	subs	r0, #8
 80016ce:	2500      	movs	r5, #0
 80016d0:	4084      	lsls	r4, r0
 80016d2:	e750      	b.n	8001576 <__aeabi_dmul+0x30a>
 80016d4:	f000 fcb4 	bl	8002040 <__clzsi2>
 80016d8:	0003      	movs	r3, r0
 80016da:	001a      	movs	r2, r3
 80016dc:	3215      	adds	r2, #21
 80016de:	3020      	adds	r0, #32
 80016e0:	2a1c      	cmp	r2, #28
 80016e2:	dc00      	bgt.n	80016e6 <__aeabi_dmul+0x47a>
 80016e4:	e71e      	b.n	8001524 <__aeabi_dmul+0x2b8>
 80016e6:	4656      	mov	r6, sl
 80016e8:	3b08      	subs	r3, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	409e      	lsls	r6, r3
 80016ee:	e723      	b.n	8001538 <__aeabi_dmul+0x2cc>
 80016f0:	9b00      	ldr	r3, [sp, #0]
 80016f2:	469c      	mov	ip, r3
 80016f4:	e6e6      	b.n	80014c4 <__aeabi_dmul+0x258>
 80016f6:	4912      	ldr	r1, [pc, #72]	; (8001740 <__aeabi_dmul+0x4d4>)
 80016f8:	0022      	movs	r2, r4
 80016fa:	4461      	add	r1, ip
 80016fc:	002e      	movs	r6, r5
 80016fe:	408d      	lsls	r5, r1
 8001700:	408a      	lsls	r2, r1
 8001702:	40c6      	lsrs	r6, r0
 8001704:	1e69      	subs	r1, r5, #1
 8001706:	418d      	sbcs	r5, r1
 8001708:	4332      	orrs	r2, r6
 800170a:	432a      	orrs	r2, r5
 800170c:	40c4      	lsrs	r4, r0
 800170e:	0753      	lsls	r3, r2, #29
 8001710:	d0b6      	beq.n	8001680 <__aeabi_dmul+0x414>
 8001712:	210f      	movs	r1, #15
 8001714:	4011      	ands	r1, r2
 8001716:	2904      	cmp	r1, #4
 8001718:	d1ac      	bne.n	8001674 <__aeabi_dmul+0x408>
 800171a:	e7b1      	b.n	8001680 <__aeabi_dmul+0x414>
 800171c:	0765      	lsls	r5, r4, #29
 800171e:	0264      	lsls	r4, r4, #9
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	08d2      	lsrs	r2, r2, #3
 8001724:	4315      	orrs	r5, r2
 8001726:	2200      	movs	r2, #0
 8001728:	e601      	b.n	800132e <__aeabi_dmul+0xc2>
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	0312      	lsls	r2, r2, #12
 800172e:	4314      	orrs	r4, r2
 8001730:	0324      	lsls	r4, r4, #12
 8001732:	4a01      	ldr	r2, [pc, #4]	; (8001738 <__aeabi_dmul+0x4cc>)
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	e5fa      	b.n	800132e <__aeabi_dmul+0xc2>
 8001738:	000007ff 	.word	0x000007ff
 800173c:	0000043e 	.word	0x0000043e
 8001740:	0000041e 	.word	0x0000041e

08001744 <__aeabi_dsub>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	4657      	mov	r7, sl
 8001748:	464e      	mov	r6, r9
 800174a:	4645      	mov	r5, r8
 800174c:	46de      	mov	lr, fp
 800174e:	b5e0      	push	{r5, r6, r7, lr}
 8001750:	001e      	movs	r6, r3
 8001752:	0017      	movs	r7, r2
 8001754:	004a      	lsls	r2, r1, #1
 8001756:	030b      	lsls	r3, r1, #12
 8001758:	0d52      	lsrs	r2, r2, #21
 800175a:	0a5b      	lsrs	r3, r3, #9
 800175c:	4690      	mov	r8, r2
 800175e:	0f42      	lsrs	r2, r0, #29
 8001760:	431a      	orrs	r2, r3
 8001762:	0fcd      	lsrs	r5, r1, #31
 8001764:	4ccd      	ldr	r4, [pc, #820]	; (8001a9c <__aeabi_dsub+0x358>)
 8001766:	0331      	lsls	r1, r6, #12
 8001768:	00c3      	lsls	r3, r0, #3
 800176a:	4694      	mov	ip, r2
 800176c:	0070      	lsls	r0, r6, #1
 800176e:	0f7a      	lsrs	r2, r7, #29
 8001770:	0a49      	lsrs	r1, r1, #9
 8001772:	00ff      	lsls	r7, r7, #3
 8001774:	469a      	mov	sl, r3
 8001776:	46b9      	mov	r9, r7
 8001778:	0d40      	lsrs	r0, r0, #21
 800177a:	0ff6      	lsrs	r6, r6, #31
 800177c:	4311      	orrs	r1, r2
 800177e:	42a0      	cmp	r0, r4
 8001780:	d100      	bne.n	8001784 <__aeabi_dsub+0x40>
 8001782:	e0b1      	b.n	80018e8 <__aeabi_dsub+0x1a4>
 8001784:	2201      	movs	r2, #1
 8001786:	4056      	eors	r6, r2
 8001788:	46b3      	mov	fp, r6
 800178a:	42b5      	cmp	r5, r6
 800178c:	d100      	bne.n	8001790 <__aeabi_dsub+0x4c>
 800178e:	e088      	b.n	80018a2 <__aeabi_dsub+0x15e>
 8001790:	4642      	mov	r2, r8
 8001792:	1a12      	subs	r2, r2, r0
 8001794:	2a00      	cmp	r2, #0
 8001796:	dc00      	bgt.n	800179a <__aeabi_dsub+0x56>
 8001798:	e0ae      	b.n	80018f8 <__aeabi_dsub+0x1b4>
 800179a:	2800      	cmp	r0, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_dsub+0x5c>
 800179e:	e0c1      	b.n	8001924 <__aeabi_dsub+0x1e0>
 80017a0:	48be      	ldr	r0, [pc, #760]	; (8001a9c <__aeabi_dsub+0x358>)
 80017a2:	4580      	cmp	r8, r0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dsub+0x64>
 80017a6:	e151      	b.n	8001a4c <__aeabi_dsub+0x308>
 80017a8:	2080      	movs	r0, #128	; 0x80
 80017aa:	0400      	lsls	r0, r0, #16
 80017ac:	4301      	orrs	r1, r0
 80017ae:	2a38      	cmp	r2, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dsub+0x70>
 80017b2:	e17b      	b.n	8001aac <__aeabi_dsub+0x368>
 80017b4:	2a1f      	cmp	r2, #31
 80017b6:	dd00      	ble.n	80017ba <__aeabi_dsub+0x76>
 80017b8:	e1ee      	b.n	8001b98 <__aeabi_dsub+0x454>
 80017ba:	2020      	movs	r0, #32
 80017bc:	003e      	movs	r6, r7
 80017be:	1a80      	subs	r0, r0, r2
 80017c0:	000c      	movs	r4, r1
 80017c2:	40d6      	lsrs	r6, r2
 80017c4:	40d1      	lsrs	r1, r2
 80017c6:	4087      	lsls	r7, r0
 80017c8:	4662      	mov	r2, ip
 80017ca:	4084      	lsls	r4, r0
 80017cc:	1a52      	subs	r2, r2, r1
 80017ce:	1e78      	subs	r0, r7, #1
 80017d0:	4187      	sbcs	r7, r0
 80017d2:	4694      	mov	ip, r2
 80017d4:	4334      	orrs	r4, r6
 80017d6:	4327      	orrs	r7, r4
 80017d8:	1bdc      	subs	r4, r3, r7
 80017da:	42a3      	cmp	r3, r4
 80017dc:	419b      	sbcs	r3, r3
 80017de:	4662      	mov	r2, ip
 80017e0:	425b      	negs	r3, r3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4699      	mov	r9, r3
 80017e6:	464b      	mov	r3, r9
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	d400      	bmi.n	80017ee <__aeabi_dsub+0xaa>
 80017ec:	e118      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 80017ee:	464b      	mov	r3, r9
 80017f0:	0258      	lsls	r0, r3, #9
 80017f2:	0a43      	lsrs	r3, r0, #9
 80017f4:	4699      	mov	r9, r3
 80017f6:	464b      	mov	r3, r9
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d100      	bne.n	80017fe <__aeabi_dsub+0xba>
 80017fc:	e137      	b.n	8001a6e <__aeabi_dsub+0x32a>
 80017fe:	4648      	mov	r0, r9
 8001800:	f000 fc1e 	bl	8002040 <__clzsi2>
 8001804:	0001      	movs	r1, r0
 8001806:	3908      	subs	r1, #8
 8001808:	2320      	movs	r3, #32
 800180a:	0022      	movs	r2, r4
 800180c:	4648      	mov	r0, r9
 800180e:	1a5b      	subs	r3, r3, r1
 8001810:	40da      	lsrs	r2, r3
 8001812:	4088      	lsls	r0, r1
 8001814:	408c      	lsls	r4, r1
 8001816:	4643      	mov	r3, r8
 8001818:	4310      	orrs	r0, r2
 800181a:	4588      	cmp	r8, r1
 800181c:	dd00      	ble.n	8001820 <__aeabi_dsub+0xdc>
 800181e:	e136      	b.n	8001a8e <__aeabi_dsub+0x34a>
 8001820:	1ac9      	subs	r1, r1, r3
 8001822:	1c4b      	adds	r3, r1, #1
 8001824:	2b1f      	cmp	r3, #31
 8001826:	dd00      	ble.n	800182a <__aeabi_dsub+0xe6>
 8001828:	e0ea      	b.n	8001a00 <__aeabi_dsub+0x2bc>
 800182a:	2220      	movs	r2, #32
 800182c:	0026      	movs	r6, r4
 800182e:	1ad2      	subs	r2, r2, r3
 8001830:	0001      	movs	r1, r0
 8001832:	4094      	lsls	r4, r2
 8001834:	40de      	lsrs	r6, r3
 8001836:	40d8      	lsrs	r0, r3
 8001838:	2300      	movs	r3, #0
 800183a:	4091      	lsls	r1, r2
 800183c:	1e62      	subs	r2, r4, #1
 800183e:	4194      	sbcs	r4, r2
 8001840:	4681      	mov	r9, r0
 8001842:	4698      	mov	r8, r3
 8001844:	4331      	orrs	r1, r6
 8001846:	430c      	orrs	r4, r1
 8001848:	0763      	lsls	r3, r4, #29
 800184a:	d009      	beq.n	8001860 <__aeabi_dsub+0x11c>
 800184c:	230f      	movs	r3, #15
 800184e:	4023      	ands	r3, r4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d005      	beq.n	8001860 <__aeabi_dsub+0x11c>
 8001854:	1d23      	adds	r3, r4, #4
 8001856:	42a3      	cmp	r3, r4
 8001858:	41a4      	sbcs	r4, r4
 800185a:	4264      	negs	r4, r4
 800185c:	44a1      	add	r9, r4
 800185e:	001c      	movs	r4, r3
 8001860:	464b      	mov	r3, r9
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	d400      	bmi.n	8001868 <__aeabi_dsub+0x124>
 8001866:	e0de      	b.n	8001a26 <__aeabi_dsub+0x2e2>
 8001868:	4641      	mov	r1, r8
 800186a:	4b8c      	ldr	r3, [pc, #560]	; (8001a9c <__aeabi_dsub+0x358>)
 800186c:	3101      	adds	r1, #1
 800186e:	4299      	cmp	r1, r3
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x130>
 8001872:	e0e7      	b.n	8001a44 <__aeabi_dsub+0x300>
 8001874:	464b      	mov	r3, r9
 8001876:	488a      	ldr	r0, [pc, #552]	; (8001aa0 <__aeabi_dsub+0x35c>)
 8001878:	08e4      	lsrs	r4, r4, #3
 800187a:	4003      	ands	r3, r0
 800187c:	0018      	movs	r0, r3
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	075b      	lsls	r3, r3, #29
 8001882:	0240      	lsls	r0, r0, #9
 8001884:	4323      	orrs	r3, r4
 8001886:	0d4a      	lsrs	r2, r1, #21
 8001888:	0b04      	lsrs	r4, r0, #12
 800188a:	0512      	lsls	r2, r2, #20
 800188c:	07ed      	lsls	r5, r5, #31
 800188e:	4322      	orrs	r2, r4
 8001890:	432a      	orrs	r2, r5
 8001892:	0018      	movs	r0, r3
 8001894:	0011      	movs	r1, r2
 8001896:	bcf0      	pop	{r4, r5, r6, r7}
 8001898:	46bb      	mov	fp, r7
 800189a:	46b2      	mov	sl, r6
 800189c:	46a9      	mov	r9, r5
 800189e:	46a0      	mov	r8, r4
 80018a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a2:	4642      	mov	r2, r8
 80018a4:	1a12      	subs	r2, r2, r0
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	dd52      	ble.n	8001950 <__aeabi_dsub+0x20c>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dsub+0x16c>
 80018ae:	e09c      	b.n	80019ea <__aeabi_dsub+0x2a6>
 80018b0:	45a0      	cmp	r8, r4
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0x172>
 80018b4:	e0ca      	b.n	8001a4c <__aeabi_dsub+0x308>
 80018b6:	2080      	movs	r0, #128	; 0x80
 80018b8:	0400      	lsls	r0, r0, #16
 80018ba:	4301      	orrs	r1, r0
 80018bc:	2a38      	cmp	r2, #56	; 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dsub+0x17e>
 80018c0:	e149      	b.n	8001b56 <__aeabi_dsub+0x412>
 80018c2:	2a1f      	cmp	r2, #31
 80018c4:	dc00      	bgt.n	80018c8 <__aeabi_dsub+0x184>
 80018c6:	e197      	b.n	8001bf8 <__aeabi_dsub+0x4b4>
 80018c8:	0010      	movs	r0, r2
 80018ca:	000e      	movs	r6, r1
 80018cc:	3820      	subs	r0, #32
 80018ce:	40c6      	lsrs	r6, r0
 80018d0:	2a20      	cmp	r2, #32
 80018d2:	d004      	beq.n	80018de <__aeabi_dsub+0x19a>
 80018d4:	2040      	movs	r0, #64	; 0x40
 80018d6:	1a82      	subs	r2, r0, r2
 80018d8:	4091      	lsls	r1, r2
 80018da:	430f      	orrs	r7, r1
 80018dc:	46b9      	mov	r9, r7
 80018de:	464c      	mov	r4, r9
 80018e0:	1e62      	subs	r2, r4, #1
 80018e2:	4194      	sbcs	r4, r2
 80018e4:	4334      	orrs	r4, r6
 80018e6:	e13a      	b.n	8001b5e <__aeabi_dsub+0x41a>
 80018e8:	000a      	movs	r2, r1
 80018ea:	433a      	orrs	r2, r7
 80018ec:	d028      	beq.n	8001940 <__aeabi_dsub+0x1fc>
 80018ee:	46b3      	mov	fp, r6
 80018f0:	42b5      	cmp	r5, r6
 80018f2:	d02b      	beq.n	800194c <__aeabi_dsub+0x208>
 80018f4:	4a6b      	ldr	r2, [pc, #428]	; (8001aa4 <__aeabi_dsub+0x360>)
 80018f6:	4442      	add	r2, r8
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d05d      	beq.n	80019b8 <__aeabi_dsub+0x274>
 80018fc:	4642      	mov	r2, r8
 80018fe:	4644      	mov	r4, r8
 8001900:	1a82      	subs	r2, r0, r2
 8001902:	2c00      	cmp	r4, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dsub+0x1c4>
 8001906:	e0f5      	b.n	8001af4 <__aeabi_dsub+0x3b0>
 8001908:	4665      	mov	r5, ip
 800190a:	431d      	orrs	r5, r3
 800190c:	d100      	bne.n	8001910 <__aeabi_dsub+0x1cc>
 800190e:	e19c      	b.n	8001c4a <__aeabi_dsub+0x506>
 8001910:	1e55      	subs	r5, r2, #1
 8001912:	2a01      	cmp	r2, #1
 8001914:	d100      	bne.n	8001918 <__aeabi_dsub+0x1d4>
 8001916:	e1fb      	b.n	8001d10 <__aeabi_dsub+0x5cc>
 8001918:	4c60      	ldr	r4, [pc, #384]	; (8001a9c <__aeabi_dsub+0x358>)
 800191a:	42a2      	cmp	r2, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x1dc>
 800191e:	e1bd      	b.n	8001c9c <__aeabi_dsub+0x558>
 8001920:	002a      	movs	r2, r5
 8001922:	e0f0      	b.n	8001b06 <__aeabi_dsub+0x3c2>
 8001924:	0008      	movs	r0, r1
 8001926:	4338      	orrs	r0, r7
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x1e8>
 800192a:	e0c3      	b.n	8001ab4 <__aeabi_dsub+0x370>
 800192c:	1e50      	subs	r0, r2, #1
 800192e:	2a01      	cmp	r2, #1
 8001930:	d100      	bne.n	8001934 <__aeabi_dsub+0x1f0>
 8001932:	e1a8      	b.n	8001c86 <__aeabi_dsub+0x542>
 8001934:	4c59      	ldr	r4, [pc, #356]	; (8001a9c <__aeabi_dsub+0x358>)
 8001936:	42a2      	cmp	r2, r4
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x1f8>
 800193a:	e087      	b.n	8001a4c <__aeabi_dsub+0x308>
 800193c:	0002      	movs	r2, r0
 800193e:	e736      	b.n	80017ae <__aeabi_dsub+0x6a>
 8001940:	2201      	movs	r2, #1
 8001942:	4056      	eors	r6, r2
 8001944:	46b3      	mov	fp, r6
 8001946:	42b5      	cmp	r5, r6
 8001948:	d000      	beq.n	800194c <__aeabi_dsub+0x208>
 800194a:	e721      	b.n	8001790 <__aeabi_dsub+0x4c>
 800194c:	4a55      	ldr	r2, [pc, #340]	; (8001aa4 <__aeabi_dsub+0x360>)
 800194e:	4442      	add	r2, r8
 8001950:	2a00      	cmp	r2, #0
 8001952:	d100      	bne.n	8001956 <__aeabi_dsub+0x212>
 8001954:	e0b5      	b.n	8001ac2 <__aeabi_dsub+0x37e>
 8001956:	4642      	mov	r2, r8
 8001958:	4644      	mov	r4, r8
 800195a:	1a82      	subs	r2, r0, r2
 800195c:	2c00      	cmp	r4, #0
 800195e:	d100      	bne.n	8001962 <__aeabi_dsub+0x21e>
 8001960:	e138      	b.n	8001bd4 <__aeabi_dsub+0x490>
 8001962:	4e4e      	ldr	r6, [pc, #312]	; (8001a9c <__aeabi_dsub+0x358>)
 8001964:	42b0      	cmp	r0, r6
 8001966:	d100      	bne.n	800196a <__aeabi_dsub+0x226>
 8001968:	e1de      	b.n	8001d28 <__aeabi_dsub+0x5e4>
 800196a:	2680      	movs	r6, #128	; 0x80
 800196c:	4664      	mov	r4, ip
 800196e:	0436      	lsls	r6, r6, #16
 8001970:	4334      	orrs	r4, r6
 8001972:	46a4      	mov	ip, r4
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x236>
 8001978:	e196      	b.n	8001ca8 <__aeabi_dsub+0x564>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dd00      	ble.n	8001980 <__aeabi_dsub+0x23c>
 800197e:	e224      	b.n	8001dca <__aeabi_dsub+0x686>
 8001980:	2620      	movs	r6, #32
 8001982:	1ab4      	subs	r4, r6, r2
 8001984:	46a2      	mov	sl, r4
 8001986:	4664      	mov	r4, ip
 8001988:	4656      	mov	r6, sl
 800198a:	40b4      	lsls	r4, r6
 800198c:	46a1      	mov	r9, r4
 800198e:	001c      	movs	r4, r3
 8001990:	464e      	mov	r6, r9
 8001992:	40d4      	lsrs	r4, r2
 8001994:	4326      	orrs	r6, r4
 8001996:	0034      	movs	r4, r6
 8001998:	4656      	mov	r6, sl
 800199a:	40b3      	lsls	r3, r6
 800199c:	1e5e      	subs	r6, r3, #1
 800199e:	41b3      	sbcs	r3, r6
 80019a0:	431c      	orrs	r4, r3
 80019a2:	4663      	mov	r3, ip
 80019a4:	40d3      	lsrs	r3, r2
 80019a6:	18c9      	adds	r1, r1, r3
 80019a8:	19e4      	adds	r4, r4, r7
 80019aa:	42bc      	cmp	r4, r7
 80019ac:	41bf      	sbcs	r7, r7
 80019ae:	427f      	negs	r7, r7
 80019b0:	46b9      	mov	r9, r7
 80019b2:	4680      	mov	r8, r0
 80019b4:	4489      	add	r9, r1
 80019b6:	e0d8      	b.n	8001b6a <__aeabi_dsub+0x426>
 80019b8:	4640      	mov	r0, r8
 80019ba:	4c3b      	ldr	r4, [pc, #236]	; (8001aa8 <__aeabi_dsub+0x364>)
 80019bc:	3001      	adds	r0, #1
 80019be:	4220      	tst	r0, r4
 80019c0:	d000      	beq.n	80019c4 <__aeabi_dsub+0x280>
 80019c2:	e0b4      	b.n	8001b2e <__aeabi_dsub+0x3ea>
 80019c4:	4640      	mov	r0, r8
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d000      	beq.n	80019cc <__aeabi_dsub+0x288>
 80019ca:	e144      	b.n	8001c56 <__aeabi_dsub+0x512>
 80019cc:	4660      	mov	r0, ip
 80019ce:	4318      	orrs	r0, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x290>
 80019d2:	e190      	b.n	8001cf6 <__aeabi_dsub+0x5b2>
 80019d4:	0008      	movs	r0, r1
 80019d6:	4338      	orrs	r0, r7
 80019d8:	d000      	beq.n	80019dc <__aeabi_dsub+0x298>
 80019da:	e1aa      	b.n	8001d32 <__aeabi_dsub+0x5ee>
 80019dc:	4661      	mov	r1, ip
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	0749      	lsls	r1, r1, #29
 80019e2:	430b      	orrs	r3, r1
 80019e4:	4661      	mov	r1, ip
 80019e6:	08cc      	lsrs	r4, r1, #3
 80019e8:	e027      	b.n	8001a3a <__aeabi_dsub+0x2f6>
 80019ea:	0008      	movs	r0, r1
 80019ec:	4338      	orrs	r0, r7
 80019ee:	d061      	beq.n	8001ab4 <__aeabi_dsub+0x370>
 80019f0:	1e50      	subs	r0, r2, #1
 80019f2:	2a01      	cmp	r2, #1
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x2b4>
 80019f6:	e139      	b.n	8001c6c <__aeabi_dsub+0x528>
 80019f8:	42a2      	cmp	r2, r4
 80019fa:	d027      	beq.n	8001a4c <__aeabi_dsub+0x308>
 80019fc:	0002      	movs	r2, r0
 80019fe:	e75d      	b.n	80018bc <__aeabi_dsub+0x178>
 8001a00:	0002      	movs	r2, r0
 8001a02:	391f      	subs	r1, #31
 8001a04:	40ca      	lsrs	r2, r1
 8001a06:	0011      	movs	r1, r2
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d003      	beq.n	8001a14 <__aeabi_dsub+0x2d0>
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4098      	lsls	r0, r3
 8001a12:	4304      	orrs	r4, r0
 8001a14:	1e63      	subs	r3, r4, #1
 8001a16:	419c      	sbcs	r4, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	430c      	orrs	r4, r1
 8001a20:	0763      	lsls	r3, r4, #29
 8001a22:	d000      	beq.n	8001a26 <__aeabi_dsub+0x2e2>
 8001a24:	e712      	b.n	800184c <__aeabi_dsub+0x108>
 8001a26:	464b      	mov	r3, r9
 8001a28:	464a      	mov	r2, r9
 8001a2a:	08e4      	lsrs	r4, r4, #3
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	08d4      	lsrs	r4, r2, #3
 8001a32:	4642      	mov	r2, r8
 8001a34:	4919      	ldr	r1, [pc, #100]	; (8001a9c <__aeabi_dsub+0x358>)
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d00e      	beq.n	8001a58 <__aeabi_dsub+0x314>
 8001a3a:	0324      	lsls	r4, r4, #12
 8001a3c:	0552      	lsls	r2, r2, #21
 8001a3e:	0b24      	lsrs	r4, r4, #12
 8001a40:	0d52      	lsrs	r2, r2, #21
 8001a42:	e722      	b.n	800188a <__aeabi_dsub+0x146>
 8001a44:	000a      	movs	r2, r1
 8001a46:	2400      	movs	r4, #0
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e71e      	b.n	800188a <__aeabi_dsub+0x146>
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	4662      	mov	r2, ip
 8001a50:	0752      	lsls	r2, r2, #29
 8001a52:	4313      	orrs	r3, r2
 8001a54:	4662      	mov	r2, ip
 8001a56:	08d4      	lsrs	r4, r2, #3
 8001a58:	001a      	movs	r2, r3
 8001a5a:	4322      	orrs	r2, r4
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x31c>
 8001a5e:	e1fc      	b.n	8001e5a <__aeabi_dsub+0x716>
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0312      	lsls	r2, r2, #12
 8001a64:	4314      	orrs	r4, r2
 8001a66:	0324      	lsls	r4, r4, #12
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <__aeabi_dsub+0x358>)
 8001a6a:	0b24      	lsrs	r4, r4, #12
 8001a6c:	e70d      	b.n	800188a <__aeabi_dsub+0x146>
 8001a6e:	0020      	movs	r0, r4
 8001a70:	f000 fae6 	bl	8002040 <__clzsi2>
 8001a74:	0001      	movs	r1, r0
 8001a76:	3118      	adds	r1, #24
 8001a78:	291f      	cmp	r1, #31
 8001a7a:	dc00      	bgt.n	8001a7e <__aeabi_dsub+0x33a>
 8001a7c:	e6c4      	b.n	8001808 <__aeabi_dsub+0xc4>
 8001a7e:	3808      	subs	r0, #8
 8001a80:	4084      	lsls	r4, r0
 8001a82:	4643      	mov	r3, r8
 8001a84:	0020      	movs	r0, r4
 8001a86:	2400      	movs	r4, #0
 8001a88:	4588      	cmp	r8, r1
 8001a8a:	dc00      	bgt.n	8001a8e <__aeabi_dsub+0x34a>
 8001a8c:	e6c8      	b.n	8001820 <__aeabi_dsub+0xdc>
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__aeabi_dsub+0x35c>)
 8001a90:	1a5b      	subs	r3, r3, r1
 8001a92:	4010      	ands	r0, r2
 8001a94:	4698      	mov	r8, r3
 8001a96:	4681      	mov	r9, r0
 8001a98:	e6d6      	b.n	8001848 <__aeabi_dsub+0x104>
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	000007ff 	.word	0x000007ff
 8001aa0:	ff7fffff 	.word	0xff7fffff
 8001aa4:	fffff801 	.word	0xfffff801
 8001aa8:	000007fe 	.word	0x000007fe
 8001aac:	430f      	orrs	r7, r1
 8001aae:	1e7a      	subs	r2, r7, #1
 8001ab0:	4197      	sbcs	r7, r2
 8001ab2:	e691      	b.n	80017d8 <__aeabi_dsub+0x94>
 8001ab4:	4661      	mov	r1, ip
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	0749      	lsls	r1, r1, #29
 8001aba:	430b      	orrs	r3, r1
 8001abc:	4661      	mov	r1, ip
 8001abe:	08cc      	lsrs	r4, r1, #3
 8001ac0:	e7b8      	b.n	8001a34 <__aeabi_dsub+0x2f0>
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	4cd3      	ldr	r4, [pc, #844]	; (8001e14 <__aeabi_dsub+0x6d0>)
 8001ac6:	3001      	adds	r0, #1
 8001ac8:	4220      	tst	r0, r4
 8001aca:	d000      	beq.n	8001ace <__aeabi_dsub+0x38a>
 8001acc:	e0a2      	b.n	8001c14 <__aeabi_dsub+0x4d0>
 8001ace:	4640      	mov	r0, r8
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d000      	beq.n	8001ad6 <__aeabi_dsub+0x392>
 8001ad4:	e101      	b.n	8001cda <__aeabi_dsub+0x596>
 8001ad6:	4660      	mov	r0, ip
 8001ad8:	4318      	orrs	r0, r3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x39a>
 8001adc:	e15e      	b.n	8001d9c <__aeabi_dsub+0x658>
 8001ade:	0008      	movs	r0, r1
 8001ae0:	4338      	orrs	r0, r7
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x3a2>
 8001ae4:	e15f      	b.n	8001da6 <__aeabi_dsub+0x662>
 8001ae6:	4661      	mov	r1, ip
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	0749      	lsls	r1, r1, #29
 8001aec:	430b      	orrs	r3, r1
 8001aee:	4661      	mov	r1, ip
 8001af0:	08cc      	lsrs	r4, r1, #3
 8001af2:	e7a2      	b.n	8001a3a <__aeabi_dsub+0x2f6>
 8001af4:	4dc8      	ldr	r5, [pc, #800]	; (8001e18 <__aeabi_dsub+0x6d4>)
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x3b8>
 8001afa:	e0cf      	b.n	8001c9c <__aeabi_dsub+0x558>
 8001afc:	2580      	movs	r5, #128	; 0x80
 8001afe:	4664      	mov	r4, ip
 8001b00:	042d      	lsls	r5, r5, #16
 8001b02:	432c      	orrs	r4, r5
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2a38      	cmp	r2, #56	; 0x38
 8001b08:	dc56      	bgt.n	8001bb8 <__aeabi_dsub+0x474>
 8001b0a:	2a1f      	cmp	r2, #31
 8001b0c:	dd00      	ble.n	8001b10 <__aeabi_dsub+0x3cc>
 8001b0e:	e0d1      	b.n	8001cb4 <__aeabi_dsub+0x570>
 8001b10:	2520      	movs	r5, #32
 8001b12:	001e      	movs	r6, r3
 8001b14:	1aad      	subs	r5, r5, r2
 8001b16:	4664      	mov	r4, ip
 8001b18:	40ab      	lsls	r3, r5
 8001b1a:	40ac      	lsls	r4, r5
 8001b1c:	40d6      	lsrs	r6, r2
 8001b1e:	1e5d      	subs	r5, r3, #1
 8001b20:	41ab      	sbcs	r3, r5
 8001b22:	4334      	orrs	r4, r6
 8001b24:	4323      	orrs	r3, r4
 8001b26:	4664      	mov	r4, ip
 8001b28:	40d4      	lsrs	r4, r2
 8001b2a:	1b09      	subs	r1, r1, r4
 8001b2c:	e049      	b.n	8001bc2 <__aeabi_dsub+0x47e>
 8001b2e:	4660      	mov	r0, ip
 8001b30:	1bdc      	subs	r4, r3, r7
 8001b32:	1a46      	subs	r6, r0, r1
 8001b34:	42a3      	cmp	r3, r4
 8001b36:	4180      	sbcs	r0, r0
 8001b38:	4240      	negs	r0, r0
 8001b3a:	4681      	mov	r9, r0
 8001b3c:	0030      	movs	r0, r6
 8001b3e:	464e      	mov	r6, r9
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	4681      	mov	r9, r0
 8001b44:	0200      	lsls	r0, r0, #8
 8001b46:	d476      	bmi.n	8001c36 <__aeabi_dsub+0x4f2>
 8001b48:	464b      	mov	r3, r9
 8001b4a:	4323      	orrs	r3, r4
 8001b4c:	d000      	beq.n	8001b50 <__aeabi_dsub+0x40c>
 8001b4e:	e652      	b.n	80017f6 <__aeabi_dsub+0xb2>
 8001b50:	2400      	movs	r4, #0
 8001b52:	2500      	movs	r5, #0
 8001b54:	e771      	b.n	8001a3a <__aeabi_dsub+0x2f6>
 8001b56:	4339      	orrs	r1, r7
 8001b58:	000c      	movs	r4, r1
 8001b5a:	1e62      	subs	r2, r4, #1
 8001b5c:	4194      	sbcs	r4, r2
 8001b5e:	18e4      	adds	r4, r4, r3
 8001b60:	429c      	cmp	r4, r3
 8001b62:	419b      	sbcs	r3, r3
 8001b64:	425b      	negs	r3, r3
 8001b66:	4463      	add	r3, ip
 8001b68:	4699      	mov	r9, r3
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	d400      	bmi.n	8001b72 <__aeabi_dsub+0x42e>
 8001b70:	e756      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 8001b72:	2301      	movs	r3, #1
 8001b74:	469c      	mov	ip, r3
 8001b76:	4ba8      	ldr	r3, [pc, #672]	; (8001e18 <__aeabi_dsub+0x6d4>)
 8001b78:	44e0      	add	r8, ip
 8001b7a:	4598      	cmp	r8, r3
 8001b7c:	d038      	beq.n	8001bf0 <__aeabi_dsub+0x4ac>
 8001b7e:	464b      	mov	r3, r9
 8001b80:	48a6      	ldr	r0, [pc, #664]	; (8001e1c <__aeabi_dsub+0x6d8>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	4003      	ands	r3, r0
 8001b86:	0018      	movs	r0, r3
 8001b88:	0863      	lsrs	r3, r4, #1
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	431c      	orrs	r4, r3
 8001b8e:	07c3      	lsls	r3, r0, #31
 8001b90:	431c      	orrs	r4, r3
 8001b92:	0843      	lsrs	r3, r0, #1
 8001b94:	4699      	mov	r9, r3
 8001b96:	e657      	b.n	8001848 <__aeabi_dsub+0x104>
 8001b98:	0010      	movs	r0, r2
 8001b9a:	000e      	movs	r6, r1
 8001b9c:	3820      	subs	r0, #32
 8001b9e:	40c6      	lsrs	r6, r0
 8001ba0:	2a20      	cmp	r2, #32
 8001ba2:	d004      	beq.n	8001bae <__aeabi_dsub+0x46a>
 8001ba4:	2040      	movs	r0, #64	; 0x40
 8001ba6:	1a82      	subs	r2, r0, r2
 8001ba8:	4091      	lsls	r1, r2
 8001baa:	430f      	orrs	r7, r1
 8001bac:	46b9      	mov	r9, r7
 8001bae:	464f      	mov	r7, r9
 8001bb0:	1e7a      	subs	r2, r7, #1
 8001bb2:	4197      	sbcs	r7, r2
 8001bb4:	4337      	orrs	r7, r6
 8001bb6:	e60f      	b.n	80017d8 <__aeabi_dsub+0x94>
 8001bb8:	4662      	mov	r2, ip
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	1e5a      	subs	r2, r3, #1
 8001bc0:	4193      	sbcs	r3, r2
 8001bc2:	1afc      	subs	r4, r7, r3
 8001bc4:	42a7      	cmp	r7, r4
 8001bc6:	41bf      	sbcs	r7, r7
 8001bc8:	427f      	negs	r7, r7
 8001bca:	1bcb      	subs	r3, r1, r7
 8001bcc:	4699      	mov	r9, r3
 8001bce:	465d      	mov	r5, fp
 8001bd0:	4680      	mov	r8, r0
 8001bd2:	e608      	b.n	80017e6 <__aeabi_dsub+0xa2>
 8001bd4:	4666      	mov	r6, ip
 8001bd6:	431e      	orrs	r6, r3
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x498>
 8001bda:	e0be      	b.n	8001d5a <__aeabi_dsub+0x616>
 8001bdc:	1e56      	subs	r6, r2, #1
 8001bde:	2a01      	cmp	r2, #1
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x4a0>
 8001be2:	e109      	b.n	8001df8 <__aeabi_dsub+0x6b4>
 8001be4:	4c8c      	ldr	r4, [pc, #560]	; (8001e18 <__aeabi_dsub+0x6d4>)
 8001be6:	42a2      	cmp	r2, r4
 8001be8:	d100      	bne.n	8001bec <__aeabi_dsub+0x4a8>
 8001bea:	e119      	b.n	8001e20 <__aeabi_dsub+0x6dc>
 8001bec:	0032      	movs	r2, r6
 8001bee:	e6c1      	b.n	8001974 <__aeabi_dsub+0x230>
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e648      	b.n	800188a <__aeabi_dsub+0x146>
 8001bf8:	2020      	movs	r0, #32
 8001bfa:	000c      	movs	r4, r1
 8001bfc:	1a80      	subs	r0, r0, r2
 8001bfe:	003e      	movs	r6, r7
 8001c00:	4087      	lsls	r7, r0
 8001c02:	4084      	lsls	r4, r0
 8001c04:	40d6      	lsrs	r6, r2
 8001c06:	1e78      	subs	r0, r7, #1
 8001c08:	4187      	sbcs	r7, r0
 8001c0a:	40d1      	lsrs	r1, r2
 8001c0c:	4334      	orrs	r4, r6
 8001c0e:	433c      	orrs	r4, r7
 8001c10:	448c      	add	ip, r1
 8001c12:	e7a4      	b.n	8001b5e <__aeabi_dsub+0x41a>
 8001c14:	4a80      	ldr	r2, [pc, #512]	; (8001e18 <__aeabi_dsub+0x6d4>)
 8001c16:	4290      	cmp	r0, r2
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x4d8>
 8001c1a:	e0e9      	b.n	8001df0 <__aeabi_dsub+0x6ac>
 8001c1c:	19df      	adds	r7, r3, r7
 8001c1e:	429f      	cmp	r7, r3
 8001c20:	419b      	sbcs	r3, r3
 8001c22:	4461      	add	r1, ip
 8001c24:	425b      	negs	r3, r3
 8001c26:	18c9      	adds	r1, r1, r3
 8001c28:	07cc      	lsls	r4, r1, #31
 8001c2a:	087f      	lsrs	r7, r7, #1
 8001c2c:	084b      	lsrs	r3, r1, #1
 8001c2e:	4699      	mov	r9, r3
 8001c30:	4680      	mov	r8, r0
 8001c32:	433c      	orrs	r4, r7
 8001c34:	e6f4      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 8001c36:	1afc      	subs	r4, r7, r3
 8001c38:	42a7      	cmp	r7, r4
 8001c3a:	41bf      	sbcs	r7, r7
 8001c3c:	4663      	mov	r3, ip
 8001c3e:	427f      	negs	r7, r7
 8001c40:	1ac9      	subs	r1, r1, r3
 8001c42:	1bcb      	subs	r3, r1, r7
 8001c44:	4699      	mov	r9, r3
 8001c46:	465d      	mov	r5, fp
 8001c48:	e5d5      	b.n	80017f6 <__aeabi_dsub+0xb2>
 8001c4a:	08ff      	lsrs	r7, r7, #3
 8001c4c:	074b      	lsls	r3, r1, #29
 8001c4e:	465d      	mov	r5, fp
 8001c50:	433b      	orrs	r3, r7
 8001c52:	08cc      	lsrs	r4, r1, #3
 8001c54:	e6ee      	b.n	8001a34 <__aeabi_dsub+0x2f0>
 8001c56:	4662      	mov	r2, ip
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_dsub+0x51a>
 8001c5c:	e082      	b.n	8001d64 <__aeabi_dsub+0x620>
 8001c5e:	000b      	movs	r3, r1
 8001c60:	433b      	orrs	r3, r7
 8001c62:	d11b      	bne.n	8001c9c <__aeabi_dsub+0x558>
 8001c64:	2480      	movs	r4, #128	; 0x80
 8001c66:	2500      	movs	r5, #0
 8001c68:	0324      	lsls	r4, r4, #12
 8001c6a:	e6f9      	b.n	8001a60 <__aeabi_dsub+0x31c>
 8001c6c:	19dc      	adds	r4, r3, r7
 8001c6e:	429c      	cmp	r4, r3
 8001c70:	419b      	sbcs	r3, r3
 8001c72:	4461      	add	r1, ip
 8001c74:	4689      	mov	r9, r1
 8001c76:	425b      	negs	r3, r3
 8001c78:	4499      	add	r9, r3
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	d444      	bmi.n	8001d0a <__aeabi_dsub+0x5c6>
 8001c80:	2301      	movs	r3, #1
 8001c82:	4698      	mov	r8, r3
 8001c84:	e6cc      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 8001c86:	1bdc      	subs	r4, r3, r7
 8001c88:	4662      	mov	r2, ip
 8001c8a:	42a3      	cmp	r3, r4
 8001c8c:	419b      	sbcs	r3, r3
 8001c8e:	1a51      	subs	r1, r2, r1
 8001c90:	425b      	negs	r3, r3
 8001c92:	1acb      	subs	r3, r1, r3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2301      	movs	r3, #1
 8001c98:	4698      	mov	r8, r3
 8001c9a:	e5a4      	b.n	80017e6 <__aeabi_dsub+0xa2>
 8001c9c:	08ff      	lsrs	r7, r7, #3
 8001c9e:	074b      	lsls	r3, r1, #29
 8001ca0:	465d      	mov	r5, fp
 8001ca2:	433b      	orrs	r3, r7
 8001ca4:	08cc      	lsrs	r4, r1, #3
 8001ca6:	e6d7      	b.n	8001a58 <__aeabi_dsub+0x314>
 8001ca8:	4662      	mov	r2, ip
 8001caa:	431a      	orrs	r2, r3
 8001cac:	0014      	movs	r4, r2
 8001cae:	1e63      	subs	r3, r4, #1
 8001cb0:	419c      	sbcs	r4, r3
 8001cb2:	e679      	b.n	80019a8 <__aeabi_dsub+0x264>
 8001cb4:	0015      	movs	r5, r2
 8001cb6:	4664      	mov	r4, ip
 8001cb8:	3d20      	subs	r5, #32
 8001cba:	40ec      	lsrs	r4, r5
 8001cbc:	46a0      	mov	r8, r4
 8001cbe:	2a20      	cmp	r2, #32
 8001cc0:	d005      	beq.n	8001cce <__aeabi_dsub+0x58a>
 8001cc2:	2540      	movs	r5, #64	; 0x40
 8001cc4:	4664      	mov	r4, ip
 8001cc6:	1aaa      	subs	r2, r5, r2
 8001cc8:	4094      	lsls	r4, r2
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	469a      	mov	sl, r3
 8001cce:	4654      	mov	r4, sl
 8001cd0:	1e63      	subs	r3, r4, #1
 8001cd2:	419c      	sbcs	r4, r3
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	4323      	orrs	r3, r4
 8001cd8:	e773      	b.n	8001bc2 <__aeabi_dsub+0x47e>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	d023      	beq.n	8001d28 <__aeabi_dsub+0x5e4>
 8001ce0:	000a      	movs	r2, r1
 8001ce2:	433a      	orrs	r2, r7
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x5a4>
 8001ce6:	e0a0      	b.n	8001e2a <__aeabi_dsub+0x6e6>
 8001ce8:	4662      	mov	r2, ip
 8001cea:	08db      	lsrs	r3, r3, #3
 8001cec:	0752      	lsls	r2, r2, #29
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	4662      	mov	r2, ip
 8001cf2:	08d4      	lsrs	r4, r2, #3
 8001cf4:	e6b0      	b.n	8001a58 <__aeabi_dsub+0x314>
 8001cf6:	000b      	movs	r3, r1
 8001cf8:	433b      	orrs	r3, r7
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x5ba>
 8001cfc:	e728      	b.n	8001b50 <__aeabi_dsub+0x40c>
 8001cfe:	08ff      	lsrs	r7, r7, #3
 8001d00:	074b      	lsls	r3, r1, #29
 8001d02:	465d      	mov	r5, fp
 8001d04:	433b      	orrs	r3, r7
 8001d06:	08cc      	lsrs	r4, r1, #3
 8001d08:	e697      	b.n	8001a3a <__aeabi_dsub+0x2f6>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	e736      	b.n	8001b7e <__aeabi_dsub+0x43a>
 8001d10:	1afc      	subs	r4, r7, r3
 8001d12:	42a7      	cmp	r7, r4
 8001d14:	41bf      	sbcs	r7, r7
 8001d16:	4663      	mov	r3, ip
 8001d18:	427f      	negs	r7, r7
 8001d1a:	1ac9      	subs	r1, r1, r3
 8001d1c:	1bcb      	subs	r3, r1, r7
 8001d1e:	4699      	mov	r9, r3
 8001d20:	2301      	movs	r3, #1
 8001d22:	465d      	mov	r5, fp
 8001d24:	4698      	mov	r8, r3
 8001d26:	e55e      	b.n	80017e6 <__aeabi_dsub+0xa2>
 8001d28:	074b      	lsls	r3, r1, #29
 8001d2a:	08ff      	lsrs	r7, r7, #3
 8001d2c:	433b      	orrs	r3, r7
 8001d2e:	08cc      	lsrs	r4, r1, #3
 8001d30:	e692      	b.n	8001a58 <__aeabi_dsub+0x314>
 8001d32:	1bdc      	subs	r4, r3, r7
 8001d34:	4660      	mov	r0, ip
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	41b6      	sbcs	r6, r6
 8001d3a:	1a40      	subs	r0, r0, r1
 8001d3c:	4276      	negs	r6, r6
 8001d3e:	1b80      	subs	r0, r0, r6
 8001d40:	4681      	mov	r9, r0
 8001d42:	0200      	lsls	r0, r0, #8
 8001d44:	d560      	bpl.n	8001e08 <__aeabi_dsub+0x6c4>
 8001d46:	1afc      	subs	r4, r7, r3
 8001d48:	42a7      	cmp	r7, r4
 8001d4a:	41bf      	sbcs	r7, r7
 8001d4c:	4663      	mov	r3, ip
 8001d4e:	427f      	negs	r7, r7
 8001d50:	1ac9      	subs	r1, r1, r3
 8001d52:	1bcb      	subs	r3, r1, r7
 8001d54:	4699      	mov	r9, r3
 8001d56:	465d      	mov	r5, fp
 8001d58:	e576      	b.n	8001848 <__aeabi_dsub+0x104>
 8001d5a:	08ff      	lsrs	r7, r7, #3
 8001d5c:	074b      	lsls	r3, r1, #29
 8001d5e:	433b      	orrs	r3, r7
 8001d60:	08cc      	lsrs	r4, r1, #3
 8001d62:	e667      	b.n	8001a34 <__aeabi_dsub+0x2f0>
 8001d64:	000a      	movs	r2, r1
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	433a      	orrs	r2, r7
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x62a>
 8001d6c:	e66f      	b.n	8001a4e <__aeabi_dsub+0x30a>
 8001d6e:	4662      	mov	r2, ip
 8001d70:	0752      	lsls	r2, r2, #29
 8001d72:	4313      	orrs	r3, r2
 8001d74:	4662      	mov	r2, ip
 8001d76:	08d4      	lsrs	r4, r2, #3
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	0312      	lsls	r2, r2, #12
 8001d7c:	4214      	tst	r4, r2
 8001d7e:	d007      	beq.n	8001d90 <__aeabi_dsub+0x64c>
 8001d80:	08c8      	lsrs	r0, r1, #3
 8001d82:	4210      	tst	r0, r2
 8001d84:	d104      	bne.n	8001d90 <__aeabi_dsub+0x64c>
 8001d86:	465d      	mov	r5, fp
 8001d88:	0004      	movs	r4, r0
 8001d8a:	08fb      	lsrs	r3, r7, #3
 8001d8c:	0749      	lsls	r1, r1, #29
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	0f5a      	lsrs	r2, r3, #29
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	0752      	lsls	r2, r2, #29
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	e65d      	b.n	8001a58 <__aeabi_dsub+0x314>
 8001d9c:	074b      	lsls	r3, r1, #29
 8001d9e:	08ff      	lsrs	r7, r7, #3
 8001da0:	433b      	orrs	r3, r7
 8001da2:	08cc      	lsrs	r4, r1, #3
 8001da4:	e649      	b.n	8001a3a <__aeabi_dsub+0x2f6>
 8001da6:	19dc      	adds	r4, r3, r7
 8001da8:	429c      	cmp	r4, r3
 8001daa:	419b      	sbcs	r3, r3
 8001dac:	4461      	add	r1, ip
 8001dae:	4689      	mov	r9, r1
 8001db0:	425b      	negs	r3, r3
 8001db2:	4499      	add	r9, r3
 8001db4:	464b      	mov	r3, r9
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	d400      	bmi.n	8001dbc <__aeabi_dsub+0x678>
 8001dba:	e631      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 8001dbc:	464a      	mov	r2, r9
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <__aeabi_dsub+0x6d8>)
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4691      	mov	r9, r2
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	e62a      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 8001dca:	0016      	movs	r6, r2
 8001dcc:	4664      	mov	r4, ip
 8001dce:	3e20      	subs	r6, #32
 8001dd0:	40f4      	lsrs	r4, r6
 8001dd2:	46a0      	mov	r8, r4
 8001dd4:	2a20      	cmp	r2, #32
 8001dd6:	d005      	beq.n	8001de4 <__aeabi_dsub+0x6a0>
 8001dd8:	2640      	movs	r6, #64	; 0x40
 8001dda:	4664      	mov	r4, ip
 8001ddc:	1ab2      	subs	r2, r6, r2
 8001dde:	4094      	lsls	r4, r2
 8001de0:	4323      	orrs	r3, r4
 8001de2:	469a      	mov	sl, r3
 8001de4:	4654      	mov	r4, sl
 8001de6:	1e63      	subs	r3, r4, #1
 8001de8:	419c      	sbcs	r4, r3
 8001dea:	4643      	mov	r3, r8
 8001dec:	431c      	orrs	r4, r3
 8001dee:	e5db      	b.n	80019a8 <__aeabi_dsub+0x264>
 8001df0:	0002      	movs	r2, r0
 8001df2:	2400      	movs	r4, #0
 8001df4:	2300      	movs	r3, #0
 8001df6:	e548      	b.n	800188a <__aeabi_dsub+0x146>
 8001df8:	19dc      	adds	r4, r3, r7
 8001dfa:	42bc      	cmp	r4, r7
 8001dfc:	41bf      	sbcs	r7, r7
 8001dfe:	4461      	add	r1, ip
 8001e00:	4689      	mov	r9, r1
 8001e02:	427f      	negs	r7, r7
 8001e04:	44b9      	add	r9, r7
 8001e06:	e738      	b.n	8001c7a <__aeabi_dsub+0x536>
 8001e08:	464b      	mov	r3, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x6cc>
 8001e0e:	e69f      	b.n	8001b50 <__aeabi_dsub+0x40c>
 8001e10:	e606      	b.n	8001a20 <__aeabi_dsub+0x2dc>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	000007ff 	.word	0x000007ff
 8001e1c:	ff7fffff 	.word	0xff7fffff
 8001e20:	08ff      	lsrs	r7, r7, #3
 8001e22:	074b      	lsls	r3, r1, #29
 8001e24:	433b      	orrs	r3, r7
 8001e26:	08cc      	lsrs	r4, r1, #3
 8001e28:	e616      	b.n	8001a58 <__aeabi_dsub+0x314>
 8001e2a:	4662      	mov	r2, ip
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	0752      	lsls	r2, r2, #29
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4662      	mov	r2, ip
 8001e34:	08d4      	lsrs	r4, r2, #3
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	0312      	lsls	r2, r2, #12
 8001e3a:	4214      	tst	r4, r2
 8001e3c:	d007      	beq.n	8001e4e <__aeabi_dsub+0x70a>
 8001e3e:	08c8      	lsrs	r0, r1, #3
 8001e40:	4210      	tst	r0, r2
 8001e42:	d104      	bne.n	8001e4e <__aeabi_dsub+0x70a>
 8001e44:	465d      	mov	r5, fp
 8001e46:	0004      	movs	r4, r0
 8001e48:	08fb      	lsrs	r3, r7, #3
 8001e4a:	0749      	lsls	r1, r1, #29
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	0f5a      	lsrs	r2, r3, #29
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	0752      	lsls	r2, r2, #29
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	e5fe      	b.n	8001a58 <__aeabi_dsub+0x314>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4a01      	ldr	r2, [pc, #4]	; (8001e64 <__aeabi_dsub+0x720>)
 8001e5e:	001c      	movs	r4, r3
 8001e60:	e513      	b.n	800188a <__aeabi_dsub+0x146>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff

08001e68 <__aeabi_d2iz>:
 8001e68:	000a      	movs	r2, r1
 8001e6a:	b530      	push	{r4, r5, lr}
 8001e6c:	4c13      	ldr	r4, [pc, #76]	; (8001ebc <__aeabi_d2iz+0x54>)
 8001e6e:	0053      	lsls	r3, r2, #1
 8001e70:	0309      	lsls	r1, r1, #12
 8001e72:	0005      	movs	r5, r0
 8001e74:	0b09      	lsrs	r1, r1, #12
 8001e76:	2000      	movs	r0, #0
 8001e78:	0d5b      	lsrs	r3, r3, #21
 8001e7a:	0fd2      	lsrs	r2, r2, #31
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	dd04      	ble.n	8001e8a <__aeabi_d2iz+0x22>
 8001e80:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <__aeabi_d2iz+0x58>)
 8001e82:	4283      	cmp	r3, r0
 8001e84:	dd02      	ble.n	8001e8c <__aeabi_d2iz+0x24>
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <__aeabi_d2iz+0x5c>)
 8001e88:	18d0      	adds	r0, r2, r3
 8001e8a:	bd30      	pop	{r4, r5, pc}
 8001e8c:	2080      	movs	r0, #128	; 0x80
 8001e8e:	0340      	lsls	r0, r0, #13
 8001e90:	4301      	orrs	r1, r0
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <__aeabi_d2iz+0x60>)
 8001e94:	1ac0      	subs	r0, r0, r3
 8001e96:	281f      	cmp	r0, #31
 8001e98:	dd08      	ble.n	8001eac <__aeabi_d2iz+0x44>
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <__aeabi_d2iz+0x64>)
 8001e9c:	1ac3      	subs	r3, r0, r3
 8001e9e:	40d9      	lsrs	r1, r3
 8001ea0:	000b      	movs	r3, r1
 8001ea2:	4258      	negs	r0, r3
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d1f0      	bne.n	8001e8a <__aeabi_d2iz+0x22>
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	e7ee      	b.n	8001e8a <__aeabi_d2iz+0x22>
 8001eac:	4c08      	ldr	r4, [pc, #32]	; (8001ed0 <__aeabi_d2iz+0x68>)
 8001eae:	40c5      	lsrs	r5, r0
 8001eb0:	46a4      	mov	ip, r4
 8001eb2:	4463      	add	r3, ip
 8001eb4:	4099      	lsls	r1, r3
 8001eb6:	000b      	movs	r3, r1
 8001eb8:	432b      	orrs	r3, r5
 8001eba:	e7f2      	b.n	8001ea2 <__aeabi_d2iz+0x3a>
 8001ebc:	000003fe 	.word	0x000003fe
 8001ec0:	0000041d 	.word	0x0000041d
 8001ec4:	7fffffff 	.word	0x7fffffff
 8001ec8:	00000433 	.word	0x00000433
 8001ecc:	00000413 	.word	0x00000413
 8001ed0:	fffffbed 	.word	0xfffffbed

08001ed4 <__aeabi_i2d>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d016      	beq.n	8001f08 <__aeabi_i2d+0x34>
 8001eda:	17c3      	asrs	r3, r0, #31
 8001edc:	18c5      	adds	r5, r0, r3
 8001ede:	405d      	eors	r5, r3
 8001ee0:	0fc4      	lsrs	r4, r0, #31
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	f000 f8ac 	bl	8002040 <__clzsi2>
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <__aeabi_i2d+0x5c>)
 8001eea:	1a12      	subs	r2, r2, r0
 8001eec:	280a      	cmp	r0, #10
 8001eee:	dc16      	bgt.n	8001f1e <__aeabi_i2d+0x4a>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	002e      	movs	r6, r5
 8001ef4:	3315      	adds	r3, #21
 8001ef6:	409e      	lsls	r6, r3
 8001ef8:	230b      	movs	r3, #11
 8001efa:	1a18      	subs	r0, r3, r0
 8001efc:	40c5      	lsrs	r5, r0
 8001efe:	0552      	lsls	r2, r2, #21
 8001f00:	032d      	lsls	r5, r5, #12
 8001f02:	0b2d      	lsrs	r5, r5, #12
 8001f04:	0d53      	lsrs	r3, r2, #21
 8001f06:	e003      	b.n	8001f10 <__aeabi_i2d+0x3c>
 8001f08:	2400      	movs	r4, #0
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	2600      	movs	r6, #0
 8001f10:	051b      	lsls	r3, r3, #20
 8001f12:	432b      	orrs	r3, r5
 8001f14:	07e4      	lsls	r4, r4, #31
 8001f16:	4323      	orrs	r3, r4
 8001f18:	0030      	movs	r0, r6
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
 8001f1e:	380b      	subs	r0, #11
 8001f20:	4085      	lsls	r5, r0
 8001f22:	0552      	lsls	r2, r2, #21
 8001f24:	032d      	lsls	r5, r5, #12
 8001f26:	2600      	movs	r6, #0
 8001f28:	0b2d      	lsrs	r5, r5, #12
 8001f2a:	0d53      	lsrs	r3, r2, #21
 8001f2c:	e7f0      	b.n	8001f10 <__aeabi_i2d+0x3c>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	0000041e 	.word	0x0000041e

08001f34 <__aeabi_f2d>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	0043      	lsls	r3, r0, #1
 8001f38:	0246      	lsls	r6, r0, #9
 8001f3a:	0fc4      	lsrs	r4, r0, #31
 8001f3c:	20fe      	movs	r0, #254	; 0xfe
 8001f3e:	0e1b      	lsrs	r3, r3, #24
 8001f40:	1c59      	adds	r1, r3, #1
 8001f42:	0a75      	lsrs	r5, r6, #9
 8001f44:	4208      	tst	r0, r1
 8001f46:	d00c      	beq.n	8001f62 <__aeabi_f2d+0x2e>
 8001f48:	22e0      	movs	r2, #224	; 0xe0
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	076d      	lsls	r5, r5, #29
 8001f50:	0b36      	lsrs	r6, r6, #12
 8001f52:	4463      	add	r3, ip
 8001f54:	051b      	lsls	r3, r3, #20
 8001f56:	4333      	orrs	r3, r6
 8001f58:	07e4      	lsls	r4, r4, #31
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	0028      	movs	r0, r5
 8001f5e:	0019      	movs	r1, r3
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d114      	bne.n	8001f90 <__aeabi_f2d+0x5c>
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	d01b      	beq.n	8001fa2 <__aeabi_f2d+0x6e>
 8001f6a:	0028      	movs	r0, r5
 8001f6c:	f000 f868 	bl	8002040 <__clzsi2>
 8001f70:	280a      	cmp	r0, #10
 8001f72:	dc1c      	bgt.n	8001fae <__aeabi_f2d+0x7a>
 8001f74:	230b      	movs	r3, #11
 8001f76:	002e      	movs	r6, r5
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	40de      	lsrs	r6, r3
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	3315      	adds	r3, #21
 8001f80:	409d      	lsls	r5, r3
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <__aeabi_f2d+0x88>)
 8001f84:	0336      	lsls	r6, r6, #12
 8001f86:	1a12      	subs	r2, r2, r0
 8001f88:	0552      	lsls	r2, r2, #21
 8001f8a:	0b36      	lsrs	r6, r6, #12
 8001f8c:	0d53      	lsrs	r3, r2, #21
 8001f8e:	e7e1      	b.n	8001f54 <__aeabi_f2d+0x20>
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	d009      	beq.n	8001fa8 <__aeabi_f2d+0x74>
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	0b36      	lsrs	r6, r6, #12
 8001f98:	0312      	lsls	r2, r2, #12
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <__aeabi_f2d+0x8c>)
 8001f9c:	076d      	lsls	r5, r5, #29
 8001f9e:	4316      	orrs	r6, r2
 8001fa0:	e7d8      	b.n	8001f54 <__aeabi_f2d+0x20>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2600      	movs	r6, #0
 8001fa6:	e7d5      	b.n	8001f54 <__aeabi_f2d+0x20>
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <__aeabi_f2d+0x8c>)
 8001fac:	e7d2      	b.n	8001f54 <__aeabi_f2d+0x20>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	3b0b      	subs	r3, #11
 8001fb2:	409d      	lsls	r5, r3
 8001fb4:	002e      	movs	r6, r5
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	e7e3      	b.n	8001f82 <__aeabi_f2d+0x4e>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	00000389 	.word	0x00000389
 8001fc0:	000007ff 	.word	0x000007ff

08001fc4 <__aeabi_cdrcmple>:
 8001fc4:	4684      	mov	ip, r0
 8001fc6:	0010      	movs	r0, r2
 8001fc8:	4662      	mov	r2, ip
 8001fca:	468c      	mov	ip, r1
 8001fcc:	0019      	movs	r1, r3
 8001fce:	4663      	mov	r3, ip
 8001fd0:	e000      	b.n	8001fd4 <__aeabi_cdcmpeq>
 8001fd2:	46c0      	nop			; (mov r8, r8)

08001fd4 <__aeabi_cdcmpeq>:
 8001fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001fd6:	f000 f905 	bl	80021e4 <__ledf2>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d401      	bmi.n	8001fe2 <__aeabi_cdcmpeq+0xe>
 8001fde:	2100      	movs	r1, #0
 8001fe0:	42c8      	cmn	r0, r1
 8001fe2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001fe4 <__aeabi_dcmpeq>:
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	f000 f855 	bl	8002094 <__eqdf2>
 8001fea:	4240      	negs	r0, r0
 8001fec:	3001      	adds	r0, #1
 8001fee:	bd10      	pop	{r4, pc}

08001ff0 <__aeabi_dcmplt>:
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	f000 f8f7 	bl	80021e4 <__ledf2>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	db01      	blt.n	8001ffe <__aeabi_dcmplt+0xe>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	2001      	movs	r0, #1
 8002000:	bd10      	pop	{r4, pc}
 8002002:	46c0      	nop			; (mov r8, r8)

08002004 <__aeabi_dcmple>:
 8002004:	b510      	push	{r4, lr}
 8002006:	f000 f8ed 	bl	80021e4 <__ledf2>
 800200a:	2800      	cmp	r0, #0
 800200c:	dd01      	ble.n	8002012 <__aeabi_dcmple+0xe>
 800200e:	2000      	movs	r0, #0
 8002010:	bd10      	pop	{r4, pc}
 8002012:	2001      	movs	r0, #1
 8002014:	bd10      	pop	{r4, pc}
 8002016:	46c0      	nop			; (mov r8, r8)

08002018 <__aeabi_dcmpgt>:
 8002018:	b510      	push	{r4, lr}
 800201a:	f000 f87d 	bl	8002118 <__gedf2>
 800201e:	2800      	cmp	r0, #0
 8002020:	dc01      	bgt.n	8002026 <__aeabi_dcmpgt+0xe>
 8002022:	2000      	movs	r0, #0
 8002024:	bd10      	pop	{r4, pc}
 8002026:	2001      	movs	r0, #1
 8002028:	bd10      	pop	{r4, pc}
 800202a:	46c0      	nop			; (mov r8, r8)

0800202c <__aeabi_dcmpge>:
 800202c:	b510      	push	{r4, lr}
 800202e:	f000 f873 	bl	8002118 <__gedf2>
 8002032:	2800      	cmp	r0, #0
 8002034:	da01      	bge.n	800203a <__aeabi_dcmpge+0xe>
 8002036:	2000      	movs	r0, #0
 8002038:	bd10      	pop	{r4, pc}
 800203a:	2001      	movs	r0, #1
 800203c:	bd10      	pop	{r4, pc}
 800203e:	46c0      	nop			; (mov r8, r8)

08002040 <__clzsi2>:
 8002040:	211c      	movs	r1, #28
 8002042:	2301      	movs	r3, #1
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	4298      	cmp	r0, r3
 8002048:	d301      	bcc.n	800204e <__clzsi2+0xe>
 800204a:	0c00      	lsrs	r0, r0, #16
 800204c:	3910      	subs	r1, #16
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	4298      	cmp	r0, r3
 8002052:	d301      	bcc.n	8002058 <__clzsi2+0x18>
 8002054:	0a00      	lsrs	r0, r0, #8
 8002056:	3908      	subs	r1, #8
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	4298      	cmp	r0, r3
 800205c:	d301      	bcc.n	8002062 <__clzsi2+0x22>
 800205e:	0900      	lsrs	r0, r0, #4
 8002060:	3904      	subs	r1, #4
 8002062:	a202      	add	r2, pc, #8	; (adr r2, 800206c <__clzsi2+0x2c>)
 8002064:	5c10      	ldrb	r0, [r2, r0]
 8002066:	1840      	adds	r0, r0, r1
 8002068:	4770      	bx	lr
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	02020304 	.word	0x02020304
 8002070:	01010101 	.word	0x01010101
	...

0800207c <__clzdi2>:
 800207c:	b510      	push	{r4, lr}
 800207e:	2900      	cmp	r1, #0
 8002080:	d103      	bne.n	800208a <__clzdi2+0xe>
 8002082:	f7ff ffdd 	bl	8002040 <__clzsi2>
 8002086:	3020      	adds	r0, #32
 8002088:	e002      	b.n	8002090 <__clzdi2+0x14>
 800208a:	0008      	movs	r0, r1
 800208c:	f7ff ffd8 	bl	8002040 <__clzsi2>
 8002090:	bd10      	pop	{r4, pc}
 8002092:	46c0      	nop			; (mov r8, r8)

08002094 <__eqdf2>:
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002096:	464e      	mov	r6, r9
 8002098:	4645      	mov	r5, r8
 800209a:	46de      	mov	lr, fp
 800209c:	4657      	mov	r7, sl
 800209e:	4690      	mov	r8, r2
 80020a0:	b5e0      	push	{r5, r6, r7, lr}
 80020a2:	0017      	movs	r7, r2
 80020a4:	031a      	lsls	r2, r3, #12
 80020a6:	0b12      	lsrs	r2, r2, #12
 80020a8:	0005      	movs	r5, r0
 80020aa:	4684      	mov	ip, r0
 80020ac:	4819      	ldr	r0, [pc, #100]	; (8002114 <__eqdf2+0x80>)
 80020ae:	030e      	lsls	r6, r1, #12
 80020b0:	004c      	lsls	r4, r1, #1
 80020b2:	4691      	mov	r9, r2
 80020b4:	005a      	lsls	r2, r3, #1
 80020b6:	0fdb      	lsrs	r3, r3, #31
 80020b8:	469b      	mov	fp, r3
 80020ba:	0b36      	lsrs	r6, r6, #12
 80020bc:	0d64      	lsrs	r4, r4, #21
 80020be:	0fc9      	lsrs	r1, r1, #31
 80020c0:	0d52      	lsrs	r2, r2, #21
 80020c2:	4284      	cmp	r4, r0
 80020c4:	d019      	beq.n	80020fa <__eqdf2+0x66>
 80020c6:	4282      	cmp	r2, r0
 80020c8:	d010      	beq.n	80020ec <__eqdf2+0x58>
 80020ca:	2001      	movs	r0, #1
 80020cc:	4294      	cmp	r4, r2
 80020ce:	d10e      	bne.n	80020ee <__eqdf2+0x5a>
 80020d0:	454e      	cmp	r6, r9
 80020d2:	d10c      	bne.n	80020ee <__eqdf2+0x5a>
 80020d4:	2001      	movs	r0, #1
 80020d6:	45c4      	cmp	ip, r8
 80020d8:	d109      	bne.n	80020ee <__eqdf2+0x5a>
 80020da:	4559      	cmp	r1, fp
 80020dc:	d017      	beq.n	800210e <__eqdf2+0x7a>
 80020de:	2c00      	cmp	r4, #0
 80020e0:	d105      	bne.n	80020ee <__eqdf2+0x5a>
 80020e2:	0030      	movs	r0, r6
 80020e4:	4328      	orrs	r0, r5
 80020e6:	1e43      	subs	r3, r0, #1
 80020e8:	4198      	sbcs	r0, r3
 80020ea:	e000      	b.n	80020ee <__eqdf2+0x5a>
 80020ec:	2001      	movs	r0, #1
 80020ee:	bcf0      	pop	{r4, r5, r6, r7}
 80020f0:	46bb      	mov	fp, r7
 80020f2:	46b2      	mov	sl, r6
 80020f4:	46a9      	mov	r9, r5
 80020f6:	46a0      	mov	r8, r4
 80020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fa:	0033      	movs	r3, r6
 80020fc:	2001      	movs	r0, #1
 80020fe:	432b      	orrs	r3, r5
 8002100:	d1f5      	bne.n	80020ee <__eqdf2+0x5a>
 8002102:	42a2      	cmp	r2, r4
 8002104:	d1f3      	bne.n	80020ee <__eqdf2+0x5a>
 8002106:	464b      	mov	r3, r9
 8002108:	433b      	orrs	r3, r7
 800210a:	d1f0      	bne.n	80020ee <__eqdf2+0x5a>
 800210c:	e7e2      	b.n	80020d4 <__eqdf2+0x40>
 800210e:	2000      	movs	r0, #0
 8002110:	e7ed      	b.n	80020ee <__eqdf2+0x5a>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	000007ff 	.word	0x000007ff

08002118 <__gedf2>:
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	4647      	mov	r7, r8
 800211c:	46ce      	mov	lr, r9
 800211e:	0004      	movs	r4, r0
 8002120:	0018      	movs	r0, r3
 8002122:	0016      	movs	r6, r2
 8002124:	031b      	lsls	r3, r3, #12
 8002126:	0b1b      	lsrs	r3, r3, #12
 8002128:	4d2d      	ldr	r5, [pc, #180]	; (80021e0 <__gedf2+0xc8>)
 800212a:	004a      	lsls	r2, r1, #1
 800212c:	4699      	mov	r9, r3
 800212e:	b580      	push	{r7, lr}
 8002130:	0043      	lsls	r3, r0, #1
 8002132:	030f      	lsls	r7, r1, #12
 8002134:	46a4      	mov	ip, r4
 8002136:	46b0      	mov	r8, r6
 8002138:	0b3f      	lsrs	r7, r7, #12
 800213a:	0d52      	lsrs	r2, r2, #21
 800213c:	0fc9      	lsrs	r1, r1, #31
 800213e:	0d5b      	lsrs	r3, r3, #21
 8002140:	0fc0      	lsrs	r0, r0, #31
 8002142:	42aa      	cmp	r2, r5
 8002144:	d021      	beq.n	800218a <__gedf2+0x72>
 8002146:	42ab      	cmp	r3, r5
 8002148:	d013      	beq.n	8002172 <__gedf2+0x5a>
 800214a:	2a00      	cmp	r2, #0
 800214c:	d122      	bne.n	8002194 <__gedf2+0x7c>
 800214e:	433c      	orrs	r4, r7
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <__gedf2+0x42>
 8002154:	464d      	mov	r5, r9
 8002156:	432e      	orrs	r6, r5
 8002158:	d022      	beq.n	80021a0 <__gedf2+0x88>
 800215a:	2c00      	cmp	r4, #0
 800215c:	d010      	beq.n	8002180 <__gedf2+0x68>
 800215e:	4281      	cmp	r1, r0
 8002160:	d022      	beq.n	80021a8 <__gedf2+0x90>
 8002162:	2002      	movs	r0, #2
 8002164:	3901      	subs	r1, #1
 8002166:	4008      	ands	r0, r1
 8002168:	3801      	subs	r0, #1
 800216a:	bcc0      	pop	{r6, r7}
 800216c:	46b9      	mov	r9, r7
 800216e:	46b0      	mov	r8, r6
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002172:	464d      	mov	r5, r9
 8002174:	432e      	orrs	r6, r5
 8002176:	d129      	bne.n	80021cc <__gedf2+0xb4>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d1f0      	bne.n	800215e <__gedf2+0x46>
 800217c:	433c      	orrs	r4, r7
 800217e:	d1ee      	bne.n	800215e <__gedf2+0x46>
 8002180:	2800      	cmp	r0, #0
 8002182:	d1f2      	bne.n	800216a <__gedf2+0x52>
 8002184:	2001      	movs	r0, #1
 8002186:	4240      	negs	r0, r0
 8002188:	e7ef      	b.n	800216a <__gedf2+0x52>
 800218a:	003d      	movs	r5, r7
 800218c:	4325      	orrs	r5, r4
 800218e:	d11d      	bne.n	80021cc <__gedf2+0xb4>
 8002190:	4293      	cmp	r3, r2
 8002192:	d0ee      	beq.n	8002172 <__gedf2+0x5a>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e2      	bne.n	800215e <__gedf2+0x46>
 8002198:	464c      	mov	r4, r9
 800219a:	4326      	orrs	r6, r4
 800219c:	d1df      	bne.n	800215e <__gedf2+0x46>
 800219e:	e7e0      	b.n	8002162 <__gedf2+0x4a>
 80021a0:	2000      	movs	r0, #0
 80021a2:	2c00      	cmp	r4, #0
 80021a4:	d0e1      	beq.n	800216a <__gedf2+0x52>
 80021a6:	e7dc      	b.n	8002162 <__gedf2+0x4a>
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dc0a      	bgt.n	80021c2 <__gedf2+0xaa>
 80021ac:	dbe8      	blt.n	8002180 <__gedf2+0x68>
 80021ae:	454f      	cmp	r7, r9
 80021b0:	d8d7      	bhi.n	8002162 <__gedf2+0x4a>
 80021b2:	d00e      	beq.n	80021d2 <__gedf2+0xba>
 80021b4:	2000      	movs	r0, #0
 80021b6:	454f      	cmp	r7, r9
 80021b8:	d2d7      	bcs.n	800216a <__gedf2+0x52>
 80021ba:	2900      	cmp	r1, #0
 80021bc:	d0e2      	beq.n	8002184 <__gedf2+0x6c>
 80021be:	0008      	movs	r0, r1
 80021c0:	e7d3      	b.n	800216a <__gedf2+0x52>
 80021c2:	4243      	negs	r3, r0
 80021c4:	4158      	adcs	r0, r3
 80021c6:	0040      	lsls	r0, r0, #1
 80021c8:	3801      	subs	r0, #1
 80021ca:	e7ce      	b.n	800216a <__gedf2+0x52>
 80021cc:	2002      	movs	r0, #2
 80021ce:	4240      	negs	r0, r0
 80021d0:	e7cb      	b.n	800216a <__gedf2+0x52>
 80021d2:	45c4      	cmp	ip, r8
 80021d4:	d8c5      	bhi.n	8002162 <__gedf2+0x4a>
 80021d6:	2000      	movs	r0, #0
 80021d8:	45c4      	cmp	ip, r8
 80021da:	d2c6      	bcs.n	800216a <__gedf2+0x52>
 80021dc:	e7ed      	b.n	80021ba <__gedf2+0xa2>
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	000007ff 	.word	0x000007ff

080021e4 <__ledf2>:
 80021e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e6:	4647      	mov	r7, r8
 80021e8:	46ce      	mov	lr, r9
 80021ea:	0004      	movs	r4, r0
 80021ec:	0018      	movs	r0, r3
 80021ee:	0016      	movs	r6, r2
 80021f0:	031b      	lsls	r3, r3, #12
 80021f2:	0b1b      	lsrs	r3, r3, #12
 80021f4:	4d2c      	ldr	r5, [pc, #176]	; (80022a8 <__ledf2+0xc4>)
 80021f6:	004a      	lsls	r2, r1, #1
 80021f8:	4699      	mov	r9, r3
 80021fa:	b580      	push	{r7, lr}
 80021fc:	0043      	lsls	r3, r0, #1
 80021fe:	030f      	lsls	r7, r1, #12
 8002200:	46a4      	mov	ip, r4
 8002202:	46b0      	mov	r8, r6
 8002204:	0b3f      	lsrs	r7, r7, #12
 8002206:	0d52      	lsrs	r2, r2, #21
 8002208:	0fc9      	lsrs	r1, r1, #31
 800220a:	0d5b      	lsrs	r3, r3, #21
 800220c:	0fc0      	lsrs	r0, r0, #31
 800220e:	42aa      	cmp	r2, r5
 8002210:	d00d      	beq.n	800222e <__ledf2+0x4a>
 8002212:	42ab      	cmp	r3, r5
 8002214:	d010      	beq.n	8002238 <__ledf2+0x54>
 8002216:	2a00      	cmp	r2, #0
 8002218:	d127      	bne.n	800226a <__ledf2+0x86>
 800221a:	433c      	orrs	r4, r7
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <__ledf2+0x60>
 8002220:	464d      	mov	r5, r9
 8002222:	432e      	orrs	r6, r5
 8002224:	d10e      	bne.n	8002244 <__ledf2+0x60>
 8002226:	2000      	movs	r0, #0
 8002228:	2c00      	cmp	r4, #0
 800222a:	d015      	beq.n	8002258 <__ledf2+0x74>
 800222c:	e00e      	b.n	800224c <__ledf2+0x68>
 800222e:	003d      	movs	r5, r7
 8002230:	4325      	orrs	r5, r4
 8002232:	d110      	bne.n	8002256 <__ledf2+0x72>
 8002234:	4293      	cmp	r3, r2
 8002236:	d118      	bne.n	800226a <__ledf2+0x86>
 8002238:	464d      	mov	r5, r9
 800223a:	432e      	orrs	r6, r5
 800223c:	d10b      	bne.n	8002256 <__ledf2+0x72>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d102      	bne.n	8002248 <__ledf2+0x64>
 8002242:	433c      	orrs	r4, r7
 8002244:	2c00      	cmp	r4, #0
 8002246:	d00b      	beq.n	8002260 <__ledf2+0x7c>
 8002248:	4281      	cmp	r1, r0
 800224a:	d014      	beq.n	8002276 <__ledf2+0x92>
 800224c:	2002      	movs	r0, #2
 800224e:	3901      	subs	r1, #1
 8002250:	4008      	ands	r0, r1
 8002252:	3801      	subs	r0, #1
 8002254:	e000      	b.n	8002258 <__ledf2+0x74>
 8002256:	2002      	movs	r0, #2
 8002258:	bcc0      	pop	{r6, r7}
 800225a:	46b9      	mov	r9, r7
 800225c:	46b0      	mov	r8, r6
 800225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002260:	2800      	cmp	r0, #0
 8002262:	d1f9      	bne.n	8002258 <__ledf2+0x74>
 8002264:	2001      	movs	r0, #1
 8002266:	4240      	negs	r0, r0
 8002268:	e7f6      	b.n	8002258 <__ledf2+0x74>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ec      	bne.n	8002248 <__ledf2+0x64>
 800226e:	464c      	mov	r4, r9
 8002270:	4326      	orrs	r6, r4
 8002272:	d1e9      	bne.n	8002248 <__ledf2+0x64>
 8002274:	e7ea      	b.n	800224c <__ledf2+0x68>
 8002276:	429a      	cmp	r2, r3
 8002278:	dd04      	ble.n	8002284 <__ledf2+0xa0>
 800227a:	4243      	negs	r3, r0
 800227c:	4158      	adcs	r0, r3
 800227e:	0040      	lsls	r0, r0, #1
 8002280:	3801      	subs	r0, #1
 8002282:	e7e9      	b.n	8002258 <__ledf2+0x74>
 8002284:	429a      	cmp	r2, r3
 8002286:	dbeb      	blt.n	8002260 <__ledf2+0x7c>
 8002288:	454f      	cmp	r7, r9
 800228a:	d8df      	bhi.n	800224c <__ledf2+0x68>
 800228c:	d006      	beq.n	800229c <__ledf2+0xb8>
 800228e:	2000      	movs	r0, #0
 8002290:	454f      	cmp	r7, r9
 8002292:	d2e1      	bcs.n	8002258 <__ledf2+0x74>
 8002294:	2900      	cmp	r1, #0
 8002296:	d0e5      	beq.n	8002264 <__ledf2+0x80>
 8002298:	0008      	movs	r0, r1
 800229a:	e7dd      	b.n	8002258 <__ledf2+0x74>
 800229c:	45c4      	cmp	ip, r8
 800229e:	d8d5      	bhi.n	800224c <__ledf2+0x68>
 80022a0:	2000      	movs	r0, #0
 80022a2:	45c4      	cmp	ip, r8
 80022a4:	d2d8      	bcs.n	8002258 <__ledf2+0x74>
 80022a6:	e7f5      	b.n	8002294 <__ledf2+0xb0>
 80022a8:	000007ff 	.word	0x000007ff

080022ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b090      	sub	sp, #64	; 0x40
 80022b0:	af00      	add	r7, sp, #0
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */

    HAL_Init();
 80022b2:	f001 f97b 	bl	80035ac <HAL_Init>

    /* USER CODE END Init */

    /* Configure the system clock */

    SystemClock_Config();
 80022b6:	f000 fa4d 	bl	8002754 <SystemClock_Config>

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */

    MX_GPIO_Init();
 80022ba:	f000 fb89 	bl	80029d0 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80022be:	f000 fb57 	bl	8002970 <MX_USART2_UART_Init>
    MX_SPI1_Init();
 80022c2:	f000 fb1d 	bl	8002900 <MX_SPI1_Init>
    MX_ADC_Init();
 80022c6:	f000 fab7 	bl	8002838 <MX_ADC_Init>

    /* USER CODE BEGIN 2 */

    // CS pin should default high

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80022ca:	4b5e      	ldr	r3, [pc, #376]	; (8002444 <main+0x198>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	0018      	movs	r0, r3
 80022d2:	f001 ffc9 	bl	8004268 <HAL_GPIO_WritePin>

    printf_to_uart("Starting SPI Test\r\n");
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <main+0x19c>)
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f8e1 	bl	80024a0 <printf_to_uart>

    HAL_Delay(500);  // Waiting for default register initialization of RF
 80022de:	23fa      	movs	r3, #250	; 0xfa
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	0018      	movs	r0, r3
 80022e4:	f001 f9d2 	bl	800368c <HAL_Delay>
                     // generator (synchronous turn on)

    Initialize_Microwave_Generator();
 80022e8:	f000 fcb2 	bl	8002c50 <Initialize_Microwave_Generator>

    // Maximum gain

    sendBytes(0x4DB8, 0b00101000);
 80022ec:	4b57      	ldr	r3, [pc, #348]	; (800244c <main+0x1a0>)
 80022ee:	2128      	movs	r1, #40	; 0x28
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 fc65 	bl	8002bc0 <sendBytes>

    // Set divider to 1

    sendBytes(0x90, 0b00101000);
 80022f6:	2128      	movs	r1, #40	; 0x28
 80022f8:	2090      	movs	r0, #144	; 0x90
 80022fa:	f000 fc61 	bl	8002bc0 <sendBytes>

    // Ref Divider Register-Default value = 1h (Rdiv=1).

    sendBytes(0x1, 0b00010000);
 80022fe:	2110      	movs	r1, #16
 8002300:	2001      	movs	r0, #1
 8002302:	f000 fc5d 	bl	8002bc0 <sendBytes>

    // Set_VCO_Out_Divider(20);

    /* USER CODE END 2 */

    int num_cycles = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
    int samples_per_freq = 100;
 800230a:	2364      	movs	r3, #100	; 0x64
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    int freq_steps = 100;
 800230e:	2364      	movs	r3, #100	; 0x64
 8002310:	623b      	str	r3, [r7, #32]
    int start_frequency = 2700;
 8002312:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <main+0x1a4>)
 8002314:	61fb      	str	r3, [r7, #28]
    int end_frequency = 3000;
 8002316:	4b4f      	ldr	r3, [pc, #316]	; (8002454 <main+0x1a8>)
 8002318:	61bb      	str	r3, [r7, #24]
    int step_size = (end_frequency - start_frequency) / freq_steps;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	6a39      	ldr	r1, [r7, #32]
 8002322:	0018      	movs	r0, r3
 8002324:	f7fd ff84 	bl	8000230 <__divsi3>
 8002328:	0003      	movs	r3, r0
 800232a:	617b      	str	r3, [r7, #20]
    int set_freq;

    int contrast_arr_len = freq_steps * sizeof(unsigned);
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	613b      	str	r3, [r7, #16]
    float cur_sum;
    /* Infinite loop */

    /* USER CODE BEGIN WHILE */

    int ms1 = HAL_GetTick();
 8002332:	f001 f9a1 	bl	8003678 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	60fb      	str	r3, [r7, #12]

    for (unsigned i = 0; i < num_cycles; i++) {
 800233a:	2300      	movs	r3, #0
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
 800233e:	e067      	b.n	8002410 <main+0x164>
        set_freq = start_frequency;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
        contrast_arr = (unsigned *)malloc(contrast_arr_len);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	0018      	movs	r0, r3
 8002348:	f003 ff5c 	bl	8006204 <malloc>
 800234c:	0003      	movs	r3, r0
 800234e:	607b      	str	r3, [r7, #4]
        for (unsigned j = 0; set_freq <= end_frequency; j++) {
 8002350:	2300      	movs	r3, #0
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
 8002354:	e04f      	b.n	80023f6 <main+0x14a>
            set_freq += step_size;
 8002356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	18d3      	adds	r3, r2, r3
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
            cur_sum = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
            for (unsigned sample_count = 0; sample_count < samples_per_freq;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002366:	e01f      	b.n	80023a8 <main+0xfc>
                 sample_count++) {
                cur_sum += (float)measure_at_frequency(set_freq) /
 8002368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f87a 	bl	8002464 <measure_at_frequency>
 8002370:	0003      	movs	r3, r0
 8002372:	0018      	movs	r0, r3
 8002374:	f7fe fc36 	bl	8000be4 <__aeabi_i2f>
 8002378:	1c04      	adds	r4, r0, #0
                           measure_at_frequency(1500);
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <main+0x1ac>)
 800237c:	0018      	movs	r0, r3
 800237e:	f000 f871 	bl	8002464 <measure_at_frequency>
 8002382:	0003      	movs	r3, r0
                cur_sum += (float)measure_at_frequency(set_freq) /
 8002384:	0018      	movs	r0, r3
 8002386:	f7fe fc2d 	bl	8000be4 <__aeabi_i2f>
 800238a:	1c03      	adds	r3, r0, #0
 800238c:	1c19      	adds	r1, r3, #0
 800238e:	1c20      	adds	r0, r4, #0
 8002390:	f7fe fb10 	bl	80009b4 <__aeabi_fdiv>
 8002394:	1c03      	adds	r3, r0, #0
 8002396:	1c19      	adds	r1, r3, #0
 8002398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800239a:	f7fe f96d 	bl	8000678 <__aeabi_fadd>
 800239e:	1c03      	adds	r3, r0, #0
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
                 sample_count++) {
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	3301      	adds	r3, #1
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (unsigned sample_count = 0; sample_count < samples_per_freq;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3db      	bcc.n	8002368 <main+0xbc>
            }
            contrast_arr[j] = (unsigned)(cur_sum * 1e9 / samples_per_freq);
 80023b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023b2:	f7ff fdbf 	bl	8001f34 <__aeabi_f2d>
 80023b6:	2200      	movs	r2, #0
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <main+0x1b0>)
 80023ba:	f7fe ff57 	bl	800126c <__aeabi_dmul>
 80023be:	0002      	movs	r2, r0
 80023c0:	000b      	movs	r3, r1
 80023c2:	0014      	movs	r4, r2
 80023c4:	001d      	movs	r5, r3
 80023c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023c8:	f7ff fd84 	bl	8001ed4 <__aeabi_i2d>
 80023cc:	0002      	movs	r2, r0
 80023ce:	000b      	movs	r3, r1
 80023d0:	0020      	movs	r0, r4
 80023d2:	0029      	movs	r1, r5
 80023d4:	f7fe fc54 	bl	8000c80 <__aeabi_ddiv>
 80023d8:	0002      	movs	r2, r0
 80023da:	000b      	movs	r3, r1
 80023dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023de:	0089      	lsls	r1, r1, #2
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	1844      	adds	r4, r0, r1
 80023e4:	0010      	movs	r0, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	f7fe f85c 	bl	80004a4 <__aeabi_d2uiz>
 80023ec:	0003      	movs	r3, r0
 80023ee:	6023      	str	r3, [r4, #0]
        for (unsigned j = 0; set_freq <= end_frequency; j++) {
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	3301      	adds	r3, #1
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
 80023f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	ddab      	ble.n	8002356 <main+0xaa>
        }
        // HAL_UART_Transmit(&huart2, (uint8_t *)contrast_arr, contrast_arr_len,
        //   HAL_MAX_DELAY); // for production
        print_data_to_uart(contrast_arr, contrast_arr_len);  // for testing
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f899 	bl	800253c <print_data_to_uart>
    for (unsigned i = 0; i < num_cycles; i++) {
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	3301      	adds	r3, #1
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002414:	429a      	cmp	r2, r3
 8002416:	d393      	bcc.n	8002340 <main+0x94>
    }

    int ms2 = HAL_GetTick();
 8002418:	f001 f92e 	bl	8003678 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60bb      	str	r3, [r7, #8]
    printf_to_uart("%d \r\n", ms2 - ms1);
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <main+0x1b4>)
 8002428:	0011      	movs	r1, r2
 800242a:	0018      	movs	r0, r3
 800242c:	f000 f838 	bl	80024a0 <printf_to_uart>

    Set_VCO_Frequency(1500);
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <main+0x1ac>)
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fb5e 	bl	8002af4 <Set_VCO_Frequency>
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b010      	add	sp, #64	; 0x40
 8002440:	bdb0      	pop	{r4, r5, r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	50000400 	.word	0x50000400
 8002448:	08006bac 	.word	0x08006bac
 800244c:	00004db8 	.word	0x00004db8
 8002450:	00000a8c 	.word	0x00000a8c
 8002454:	00000bb8 	.word	0x00000bb8
 8002458:	000005dc 	.word	0x000005dc
 800245c:	41cdcd65 	.word	0x41cdcd65
 8002460:	08006bc0 	.word	0x08006bc0

08002464 <measure_at_frequency>:

/* Does the measurement at arbitrary frequency and returns the photodiode
 * output. */
int measure_at_frequency(int frequency) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    Set_VCO_Frequency(frequency);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fb40 	bl	8002af4 <Set_VCO_Frequency>

    HAL_ADC_Start(&hadc);
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <measure_at_frequency+0x38>)
 8002476:	0018      	movs	r0, r3
 8002478:	f001 faa0 	bl	80039bc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800247c:	2301      	movs	r3, #1
 800247e:	425a      	negs	r2, r3
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <measure_at_frequency+0x38>)
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f001 faed 	bl	8003a64 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc);
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <measure_at_frequency+0x38>)
 800248c:	0018      	movs	r0, r3
 800248e:	f001 fb85 	bl	8003b9c <HAL_ADC_GetValue>
 8002492:	0003      	movs	r3, r0

    // // Convert to string and print
    // printf_to_uart("%hu %d %d\r\n", photodiode_in, frequency,
    //                frequency == 1500);
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000008c 	.word	0x2000008c

080024a0 <printf_to_uart>:

/* Prints data to UART, usage is just like printf. */
void printf_to_uart(char *format, ...) {
 80024a0:	b40f      	push	{r0, r1, r2, r3}
 80024a2:	b5b0      	push	{r4, r5, r7, lr}
 80024a4:	b0aa      	sub	sp, #168	; 0xa8
 80024a6:	af00      	add	r7, sp, #0
    char print_buf[100] = {0};  // allocate a larger buffer
 80024a8:	243c      	movs	r4, #60	; 0x3c
 80024aa:	193b      	adds	r3, r7, r4
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2260      	movs	r2, #96	; 0x60
 80024b4:	2100      	movs	r1, #0
 80024b6:	0018      	movs	r0, r3
 80024b8:	f003 feb7 	bl	800622a <memset>
    char uart_buf[50] = {0};
 80024bc:	2308      	movs	r3, #8
 80024be:	001d      	movs	r5, r3
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	3304      	adds	r3, #4
 80024c8:	222e      	movs	r2, #46	; 0x2e
 80024ca:	2100      	movs	r1, #0
 80024cc:	0018      	movs	r0, r3
 80024ce:	f003 feac 	bl	800622a <memset>
    int print_len;

    va_list args;
    va_start(args, format);
 80024d2:	23b4      	movs	r3, #180	; 0xb4
 80024d4:	0029      	movs	r1, r5
 80024d6:	185b      	adds	r3, r3, r1
 80024d8:	19db      	adds	r3, r3, r7
 80024da:	607b      	str	r3, [r7, #4]
    print_len = vsnprintf(print_buf, sizeof(print_buf), format, args);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	22b0      	movs	r2, #176	; 0xb0
 80024e0:	1852      	adds	r2, r2, r1
 80024e2:	19d2      	adds	r2, r2, r7
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	1938      	adds	r0, r7, r4
 80024e8:	2164      	movs	r1, #100	; 0x64
 80024ea:	f003 fffb 	bl	80064e4 <vsniprintf>
 80024ee:	0003      	movs	r3, r0
 80024f0:	22a4      	movs	r2, #164	; 0xa4
 80024f2:	18b9      	adds	r1, r7, r2
 80024f4:	600b      	str	r3, [r1, #0]
    va_end(args);

    // copy the relevant portion of the print buffer to uart buffer
    int uart_buf_len = (print_len > 50) ? 50 : print_len;
 80024f6:	18bb      	adds	r3, r7, r2
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b32      	cmp	r3, #50	; 0x32
 80024fc:	dd00      	ble.n	8002500 <printf_to_uart+0x60>
 80024fe:	2332      	movs	r3, #50	; 0x32
 8002500:	24a0      	movs	r4, #160	; 0xa0
 8002502:	193a      	adds	r2, r7, r4
 8002504:	6013      	str	r3, [r2, #0]
    memcpy(uart_buf, print_buf, uart_buf_len);
 8002506:	193b      	adds	r3, r7, r4
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	233c      	movs	r3, #60	; 0x3c
 800250c:	18f9      	adds	r1, r7, r3
 800250e:	2508      	movs	r5, #8
 8002510:	197b      	adds	r3, r7, r5
 8002512:	0018      	movs	r0, r3
 8002514:	f003 fe80 	bl	8006218 <memcpy>

    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len,
 8002518:	193b      	adds	r3, r7, r4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29a      	uxth	r2, r3
 800251e:	2301      	movs	r3, #1
 8002520:	425b      	negs	r3, r3
 8002522:	1979      	adds	r1, r7, r5
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <printf_to_uart+0x98>)
 8002526:	f003 f93b 	bl	80057a0 <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b02a      	add	sp, #168	; 0xa8
 8002530:	bcb0      	pop	{r4, r5, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	b004      	add	sp, #16
 8002536:	4718      	bx	r3
 8002538:	20000140 	.word	0x20000140

0800253c <print_data_to_uart>:

/* Prints 32-bit uint array to UART with newlines in between.
 * Prints 30 ints at a time. Slow but only used for testing.
 */
void print_data_to_uart(unsigned *data, int len) {
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	4c79      	ldr	r4, [pc, #484]	; (8002724 <print_data_to_uart+0x1e8>)
 8002540:	44a5      	add	sp, r4
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
    unsigned MAX_INTS_PER_TRANSMIT = 30;  // pulled this out my ass ngl
 8002548:	231e      	movs	r3, #30
 800254a:	4a77      	ldr	r2, [pc, #476]	; (8002728 <print_data_to_uart+0x1ec>)
 800254c:	18ba      	adds	r2, r7, r2
 800254e:	6013      	str	r3, [r2, #0]

    char fmt[50];   // Create a format string buffer
    char buf[500];  // Create a buffer for the formatted string
    char uart_buf[500];

    for (unsigned printed = 0; printed < len;
 8002550:	2300      	movs	r3, #0
 8002552:	4a76      	ldr	r2, [pc, #472]	; (800272c <print_data_to_uart+0x1f0>)
 8002554:	18ba      	adds	r2, r7, r2
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e0d7      	b.n	800270a <print_data_to_uart+0x1ce>
         printed += MAX_INTS_PER_TRANSMIT) {
        for (unsigned i = 0; i < 500; i++) buf[i] = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	2288      	movs	r2, #136	; 0x88
 800255e:	00d2      	lsls	r2, r2, #3
 8002560:	18ba      	adds	r2, r7, r2
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e010      	b.n	8002588 <print_data_to_uart+0x4c>
 8002566:	4b72      	ldr	r3, [pc, #456]	; (8002730 <print_data_to_uart+0x1f4>)
 8002568:	2289      	movs	r2, #137	; 0x89
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	189b      	adds	r3, r3, r2
 800256e:	19da      	adds	r2, r3, r7
 8002570:	2188      	movs	r1, #136	; 0x88
 8002572:	00c9      	lsls	r1, r1, #3
 8002574:	187b      	adds	r3, r7, r1
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	18d3      	adds	r3, r2, r3
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	187b      	adds	r3, r7, r1
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	187a      	adds	r2, r7, r1
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	2388      	movs	r3, #136	; 0x88
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	23fa      	movs	r3, #250	; 0xfa
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	429a      	cmp	r2, r3
 8002596:	d3e6      	bcc.n	8002566 <print_data_to_uart+0x2a>
        for (unsigned i = 0; i < 500; i++) uart_buf[i] = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	4a66      	ldr	r2, [pc, #408]	; (8002734 <print_data_to_uart+0x1f8>)
 800259c:	18ba      	adds	r2, r7, r2
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e00f      	b.n	80025c2 <print_data_to_uart+0x86>
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <print_data_to_uart+0x1fc>)
 80025a4:	2289      	movs	r2, #137	; 0x89
 80025a6:	00d2      	lsls	r2, r2, #3
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	19da      	adds	r2, r3, r7
 80025ac:	4961      	ldr	r1, [pc, #388]	; (8002734 <print_data_to_uart+0x1f8>)
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	18d3      	adds	r3, r2, r3
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	187a      	adds	r2, r7, r1
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <print_data_to_uart+0x1f8>)
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	23fa      	movs	r3, #250	; 0xfa
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d3e8      	bcc.n	80025a2 <print_data_to_uart+0x66>

        int l = 0;  // Keep track of the length of the formatted string
 80025d0:	2300      	movs	r3, #0
 80025d2:	2287      	movs	r2, #135	; 0x87
 80025d4:	00d2      	lsls	r2, r2, #3
 80025d6:	18ba      	adds	r2, r7, r2
 80025d8:	6013      	str	r3, [r2, #0]
        int n;  // Keep track of the number of characters added to the formatted
                // string

        // Build the format string with %d and delimiter
        snprintf(fmt, sizeof(fmt), "%%d%s", "\r\n");
 80025da:	4b58      	ldr	r3, [pc, #352]	; (800273c <print_data_to_uart+0x200>)
 80025dc:	4a58      	ldr	r2, [pc, #352]	; (8002740 <print_data_to_uart+0x204>)
 80025de:	21fc      	movs	r1, #252	; 0xfc
 80025e0:	0089      	lsls	r1, r1, #2
 80025e2:	1878      	adds	r0, r7, r1
 80025e4:	2132      	movs	r1, #50	; 0x32
 80025e6:	f003 ff1d 	bl	8006424 <sniprintf>

        // Add each array element to the formatted string
        unsigned to_transmit = MAX_INTS_PER_TRANSMIT;
 80025ea:	494f      	ldr	r1, [pc, #316]	; (8002728 <print_data_to_uart+0x1ec>)
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4854      	ldr	r0, [pc, #336]	; (8002744 <print_data_to_uart+0x208>)
 80025f2:	183a      	adds	r2, r7, r0
 80025f4:	6013      	str	r3, [r2, #0]
        if (len - printed < MAX_INTS_PER_TRANSMIT) {
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	4c4c      	ldr	r4, [pc, #304]	; (800272c <print_data_to_uart+0x1f0>)
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	187a      	adds	r2, r7, r1
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d905      	bls.n	8002614 <print_data_to_uart+0xd8>
            to_transmit = len - printed;
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	193b      	adds	r3, r7, r4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	183a      	adds	r2, r7, r0
 8002612:	6013      	str	r3, [r2, #0]
        }
        for (unsigned i = 0; i < to_transmit; i++) {
 8002614:	2300      	movs	r3, #0
 8002616:	2286      	movs	r2, #134	; 0x86
 8002618:	00d2      	lsls	r2, r2, #3
 800261a:	18ba      	adds	r2, r7, r2
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e041      	b.n	80026a4 <print_data_to_uart+0x168>
            n = snprintf(buf + l, sizeof(buf) - l, fmt, data[i]);
 8002620:	2487      	movs	r4, #135	; 0x87
 8002622:	00e4      	lsls	r4, r4, #3
 8002624:	193b      	adds	r3, r7, r4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	22fe      	movs	r2, #254	; 0xfe
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	18ba      	adds	r2, r7, r2
 800262e:	18d0      	adds	r0, r2, r3
 8002630:	193b      	adds	r3, r7, r4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	22fa      	movs	r2, #250	; 0xfa
 8002636:	0052      	lsls	r2, r2, #1
 8002638:	1ad1      	subs	r1, r2, r3
 800263a:	2386      	movs	r3, #134	; 0x86
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	18d3      	adds	r3, r2, r3
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	22fc      	movs	r2, #252	; 0xfc
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	18ba      	adds	r2, r7, r2
 8002650:	f003 fee8 	bl	8006424 <sniprintf>
 8002654:	0003      	movs	r3, r0
 8002656:	493c      	ldr	r1, [pc, #240]	; (8002748 <print_data_to_uart+0x20c>)
 8002658:	187a      	adds	r2, r7, r1
 800265a:	6013      	str	r3, [r2, #0]
            if (n < 0 || l + n >= sizeof(buf)) {
 800265c:	187b      	adds	r3, r7, r1
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	db09      	blt.n	8002678 <print_data_to_uart+0x13c>
 8002664:	193b      	adds	r3, r7, r4
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	187b      	adds	r3, r7, r1
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	18d3      	adds	r3, r2, r3
 800266e:	001a      	movs	r2, r3
 8002670:	23fa      	movs	r3, #250	; 0xfa
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	429a      	cmp	r2, r3
 8002676:	d304      	bcc.n	8002682 <print_data_to_uart+0x146>
                printf_to_uart("BRUH\r\n");
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <print_data_to_uart+0x210>)
 800267a:	0018      	movs	r0, r3
 800267c:	f7ff ff10 	bl	80024a0 <printf_to_uart>
 8002680:	e04a      	b.n	8002718 <print_data_to_uart+0x1dc>
                return;
            }
            l += n;
 8002682:	2187      	movs	r1, #135	; 0x87
 8002684:	00c9      	lsls	r1, r1, #3
 8002686:	187b      	adds	r3, r7, r1
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <print_data_to_uart+0x20c>)
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	187a      	adds	r2, r7, r1
 8002694:	6013      	str	r3, [r2, #0]
        for (unsigned i = 0; i < to_transmit; i++) {
 8002696:	2286      	movs	r2, #134	; 0x86
 8002698:	00d2      	lsls	r2, r2, #3
 800269a:	18bb      	adds	r3, r7, r2
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	18ba      	adds	r2, r7, r2
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	2386      	movs	r3, #134	; 0x86
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <print_data_to_uart+0x208>)
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d3b4      	bcc.n	8002620 <print_data_to_uart+0xe4>
        }

        int uart_buf_len = (l > 500) ? 500 : l;
 80026b6:	2387      	movs	r3, #135	; 0x87
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	22fa      	movs	r2, #250	; 0xfa
 80026c0:	0052      	lsls	r2, r2, #1
 80026c2:	4293      	cmp	r3, r2
 80026c4:	dd01      	ble.n	80026ca <print_data_to_uart+0x18e>
 80026c6:	23fa      	movs	r3, #250	; 0xfa
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2485      	movs	r4, #133	; 0x85
 80026cc:	00e4      	lsls	r4, r4, #3
 80026ce:	193a      	adds	r2, r7, r4
 80026d0:	6013      	str	r3, [r2, #0]
        memcpy(uart_buf, buf, uart_buf_len);
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	23fe      	movs	r3, #254	; 0xfe
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	18f9      	adds	r1, r7, r3
 80026dc:	2508      	movs	r5, #8
 80026de:	197b      	adds	r3, r7, r5
 80026e0:	0018      	movs	r0, r3
 80026e2:	f003 fd99 	bl	8006218 <memcpy>

        // Print the formatted string
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len,
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	2301      	movs	r3, #1
 80026ee:	425b      	negs	r3, r3
 80026f0:	1979      	adds	r1, r7, r5
 80026f2:	4817      	ldr	r0, [pc, #92]	; (8002750 <print_data_to_uart+0x214>)
 80026f4:	f003 f854 	bl	80057a0 <HAL_UART_Transmit>
         printed += MAX_INTS_PER_TRANSMIT) {
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <print_data_to_uart+0x1f0>)
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <print_data_to_uart+0x1ec>)
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	18d3      	adds	r3, r2, r3
 8002706:	187a      	adds	r2, r7, r1
 8002708:	6013      	str	r3, [r2, #0]
    for (unsigned printed = 0; printed < len;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <print_data_to_uart+0x1f0>)
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d200      	bcs.n	8002718 <print_data_to_uart+0x1dc>
 8002716:	e720      	b.n	800255a <print_data_to_uart+0x1e>
                          HAL_MAX_DELAY);
    }
}
 8002718:	46bd      	mov	sp, r7
 800271a:	2389      	movs	r3, #137	; 0x89
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	449d      	add	sp, r3
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	fffffbb8 	.word	0xfffffbb8
 8002728:	0000042c 	.word	0x0000042c
 800272c:	00000444 	.word	0x00000444
 8002730:	fffffdb4 	.word	0xfffffdb4
 8002734:	0000043c 	.word	0x0000043c
 8002738:	fffffbc0 	.word	0xfffffbc0
 800273c:	08006bc8 	.word	0x08006bc8
 8002740:	08006bcc 	.word	0x08006bcc
 8002744:	00000434 	.word	0x00000434
 8002748:	00000424 	.word	0x00000424
 800274c:	08006bd4 	.word	0x08006bd4
 8002750:	20000140 	.word	0x20000140

08002754 <SystemClock_Config>:

  */

void SystemClock_Config(void)

{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b09f      	sub	sp, #124	; 0x7c
 8002758:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275a:	2440      	movs	r4, #64	; 0x40
 800275c:	193b      	adds	r3, r7, r4
 800275e:	0018      	movs	r0, r3
 8002760:	2338      	movs	r3, #56	; 0x38
 8002762:	001a      	movs	r2, r3
 8002764:	2100      	movs	r1, #0
 8002766:	f003 fd60 	bl	800622a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276a:	232c      	movs	r3, #44	; 0x2c
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	0018      	movs	r0, r3
 8002770:	2314      	movs	r3, #20
 8002772:	001a      	movs	r2, r3
 8002774:	2100      	movs	r1, #0
 8002776:	f003 fd58 	bl	800622a <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	0018      	movs	r0, r3
 800277e:	2328      	movs	r3, #40	; 0x28
 8002780:	001a      	movs	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f003 fd51 	bl	800622a <memset>

    /** Configure the main internal regulator output voltage

    */

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <SystemClock_Config+0xdc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a29      	ldr	r2, [pc, #164]	; (8002834 <SystemClock_Config+0xe0>)
 800278e:	401a      	ands	r2, r3
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <SystemClock_Config+0xdc>)
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	0109      	lsls	r1, r1, #4
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

    * in the RCC_OscInitTypeDef structure.

    */

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800279a:	0021      	movs	r1, r4
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2202      	movs	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2201      	movs	r2, #1
 80027a6:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2210      	movs	r2, #16
 80027ac:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2202      	movs	r2, #2
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	03d2      	lsls	r2, r2, #15
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	0018      	movs	r0, r3
 80027cc:	f001 fd6a 	bl	80042a4 <HAL_RCC_OscConfig>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0x84>
        Error_Handler();
 80027d4:	f000 fd8e 	bl	80032f4 <Error_Handler>

    /** Initializes the CPU, AHB and APB buses clocks

    */

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	220f      	movs	r2, #15
 80027de:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2203      	movs	r2, #3
 80027e4:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2101      	movs	r1, #1
 80027fc:	0018      	movs	r0, r3
 80027fe:	f002 f925 	bl	8004a4c <HAL_RCC_ClockConfig>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0xb6>
        Error_Handler();
 8002806:	f000 fd75 	bl	80032f4 <Error_Handler>
    }

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	0018      	movs	r0, r3
 800281a:	f002 fb3b 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0xd2>
        Error_Handler();
 8002822:	f000 fd67 	bl	80032f4 <Error_Handler>
    }
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b01f      	add	sp, #124	; 0x7c
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40007000 	.word	0x40007000
 8002834:	ffffe7ff 	.word	0xffffe7ff

08002838 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC_Init 0 */

    /* USER CODE END ADC_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800283e:	003b      	movs	r3, r7
 8002840:	0018      	movs	r0, r3
 8002842:	2308      	movs	r3, #8
 8002844:	001a      	movs	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	f003 fcef 	bl	800622a <memset>
    /** Configure the global features of the ADC (Clock, Resolution, Data
       Alignment and number of conversion)

    */

    hadc.Instance = ADC1;
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <MX_ADC_Init+0xc0>)
 800284e:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <MX_ADC_Init+0xc4>)
 8002850:	601a      	str	r2, [r3, #0]

    hadc.Init.OversamplingMode = DISABLE;
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002854:	2200      	movs	r2, #0
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c

    hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <MX_ADC_Init+0xc0>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	05d2      	lsls	r2, r2, #23
 800285e:	605a      	str	r2, [r3, #4]

    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]

    hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MX_ADC_Init+0xc0>)
 800286e:	2201      	movs	r2, #1
 8002870:	611a      	str	r2, [r3, #16]

    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]

    hadc.Init.ContinuousConvMode = DISABLE;
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MX_ADC_Init+0xc0>)
 800287a:	2220      	movs	r2, #32
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

    hadc.Init.DiscontinuousConvMode = DISABLE;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002882:	2221      	movs	r2, #33	; 0x21
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_ADC_Init+0xc0>)
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	; 0x28

    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002890:	22c2      	movs	r2, #194	; 0xc2
 8002892:	32ff      	adds	r2, #255	; 0xff
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

    hadc.Init.DMAContinuousRequests = DISABLE;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_ADC_Init+0xc0>)
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028a0:	2204      	movs	r2, #4
 80028a2:	615a      	str	r2, [r3, #20]

    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30

    hadc.Init.LowPowerAutoWait = DISABLE;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]

    hadc.Init.LowPowerFrequencyMode = DISABLE;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34

    hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	61da      	str	r2, [r3, #28]

    if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 ff08 	bl	80036d4 <HAL_ADC_Init>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_ADC_Init+0x94>

    {
        Error_Handler();
 80028c8:	f000 fd14 	bl	80032f4 <Error_Handler>

    /** Configure for the selected ADC regular channel to be converted.

    */

    sConfig.Channel = ADC_CHANNEL_0;
 80028cc:	003b      	movs	r3, r7
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80028d2:	003b      	movs	r3, r7
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	0152      	lsls	r2, r2, #5
 80028d8:	605a      	str	r2, [r3, #4]

    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028da:	003a      	movs	r2, r7
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_ADC_Init+0xc0>)
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f001 f967 	bl	8003bb4 <HAL_ADC_ConfigChannel>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <MX_ADC_Init+0xb6>

    {
        Error_Handler();
 80028ea:	f000 fd03 	bl	80032f4 <Error_Handler>
    }

    /* USER CODE BEGIN ADC_Init 2 */

    /* USER CODE END ADC_Init 2 */
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	2000008c 	.word	0x2000008c
 80028fc:	40012400 	.word	0x40012400

08002900 <MX_SPI1_Init>:

  */

static void MX_SPI1_Init(void)

{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0

    /* USER CODE END SPI1_Init 1 */

    /* SPI1 parameter configuration*/

    hspi1.Instance = SPI1;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_SPI1_Init+0x68>)
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <MX_SPI1_Init+0x6c>)
 8002908:	601a      	str	r2, [r3, #0]

    hspi1.Init.Mode = SPI_MODE_MASTER;
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <MX_SPI1_Init+0x68>)
 800290c:	2282      	movs	r2, #130	; 0x82
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	605a      	str	r2, [r3, #4]

    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_SPI1_Init+0x68>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]

    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_SPI1_Init+0x68>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <MX_SPI1_Init+0x68>)
 8002920:	2202      	movs	r2, #2
 8002922:	611a      	str	r2, [r3, #16]

    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_SPI1_Init+0x68>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]

    hspi1.Init.NSS = SPI_NSS_SOFT;
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <MX_SPI1_Init+0x68>)
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	619a      	str	r2, [r3, #24]

    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <MX_SPI1_Init+0x68>)
 8002934:	2208      	movs	r2, #8
 8002936:	61da      	str	r2, [r3, #28]

    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_SPI1_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	621a      	str	r2, [r3, #32]

    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <MX_SPI1_Init+0x68>)
 8002940:	2200      	movs	r2, #0
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_SPI1_Init+0x68>)
 8002946:	2200      	movs	r2, #0
 8002948:	629a      	str	r2, [r3, #40]	; 0x28

    hspi1.Init.CRCPolynomial = 7;
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <MX_SPI1_Init+0x68>)
 800294c:	2207      	movs	r2, #7
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <MX_SPI1_Init+0x68>)
 8002952:	0018      	movs	r0, r3
 8002954:	f002 fc12 	bl	800517c <HAL_SPI_Init>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d001      	beq.n	8002960 <MX_SPI1_Init+0x60>

    {
        Error_Handler();
 800295c:	f000 fcca 	bl	80032f4 <Error_Handler>
    }

    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	200000e8 	.word	0x200000e8
 800296c:	40013000 	.word	0x40013000

08002970 <MX_USART2_UART_Init>:

  */

static void MX_USART2_UART_Init(void)

{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */

    huart2.Instance = USART2;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002976:	4a15      	ldr	r2, [pc, #84]	; (80029cc <MX_USART2_UART_Init+0x5c>)
 8002978:	601a      	str	r2, [r3, #0]

    huart2.Init.BaudRate = 115200;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 800297c:	22e1      	movs	r2, #225	; 0xe1
 800297e:	0252      	lsls	r2, r2, #9
 8002980:	605a      	str	r2, [r3, #4]

    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]

    huart2.Init.StopBits = UART_STOPBITS_1;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]

    huart2.Init.Parity = UART_PARITY_NONE;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]

    huart2.Init.Mode = UART_MODE_TX_RX;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002996:	220c      	movs	r2, #12
 8002998:	615a      	str	r2, [r3, #20]

    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]

    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]

    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]

    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_UART_Init(&huart2) != HAL_OK)
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f002 fe9f 	bl	80056f8 <HAL_UART_Init>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <MX_USART2_UART_Init+0x52>

    {
        Error_Handler();
 80029be:	f000 fc99 	bl	80032f4 <Error_Handler>
    }

    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000140 	.word	0x20000140
 80029cc:	40004400 	.word	0x40004400

080029d0 <MX_GPIO_Init>:

  */

static void MX_GPIO_Init(void)

{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	2414      	movs	r4, #20
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	0018      	movs	r0, r3
 80029dc:	2314      	movs	r3, #20
 80029de:	001a      	movs	r2, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	f003 fc22 	bl	800622a <memset>

    /* GPIO Ports Clock Enable */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e6:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <MX_GPIO_Init+0x118>)
 80029e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <MX_GPIO_Init+0x118>)
 80029ec:	2104      	movs	r1, #4
 80029ee:	430a      	orrs	r2, r1
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <MX_GPIO_Init+0x118>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	2204      	movs	r2, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029fe:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	430a      	orrs	r2, r1
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	2201      	movs	r2, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a34:	2102      	movs	r1, #2
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <MX_GPIO_Init+0x118>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <MX_GPIO_Init+0x11c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 fc0b 	bl	8004268 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */

    GPIO_InitStruct.Pin = B1_Pin;
 8002a52:	193b      	adds	r3, r7, r4
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0192      	lsls	r2, r2, #6
 8002a58:	601a      	str	r2, [r3, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	2284      	movs	r2, #132	; 0x84
 8002a5e:	0392      	lsls	r2, r2, #14
 8002a60:	605a      	str	r2, [r3, #4]

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]

    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <MX_GPIO_Init+0x120>)
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	0010      	movs	r0, r2
 8002a70:	f001 fa7c 	bl	8003f6c <HAL_GPIO_Init>

    /*Configure GPIO pin : PA10 */

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	00d2      	lsls	r2, r2, #3
 8002a7a:	601a      	str	r2, [r3, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	2203      	movs	r2, #3
 8002a80:	605a      	str	r2, [r3, #4]

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	193a      	adds	r2, r7, r4
 8002a8a:	23a0      	movs	r3, #160	; 0xa0
 8002a8c:	05db      	lsls	r3, r3, #23
 8002a8e:	0011      	movs	r1, r2
 8002a90:	0018      	movs	r0, r3
 8002a92:	f001 fa6b 	bl	8003f6c <HAL_GPIO_Init>

    /*Configure GPIO pin : PA12 */

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	0152      	lsls	r2, r2, #5
 8002a9c:	601a      	str	r2, [r3, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	193a      	adds	r2, r7, r4
 8002aac:	23a0      	movs	r3, #160	; 0xa0
 8002aae:	05db      	lsls	r3, r3, #23
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f001 fa5a 	bl	8003f6c <HAL_GPIO_Init>

    /*Configure GPIO pin : PB6 */

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ab8:	0021      	movs	r1, r4
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	605a      	str	r2, [r3, #4]

    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]

    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	4a05      	ldr	r2, [pc, #20]	; (8002aec <MX_GPIO_Init+0x11c>)
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f001 fa47 	bl	8003f6c <HAL_GPIO_Init>
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b00b      	add	sp, #44	; 0x2c
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	50000400 	.word	0x50000400
 8002af0:	50000800 	.word	0x50000800

08002af4 <Set_VCO_Frequency>:
    sendBytes(0x0, 0b00101000);
}

/* USER CODE BEGIN 4 */

void Set_VCO_Frequency(int freq) {
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
    int xtal = 50;
 8002afc:	2332      	movs	r3, #50	; 0x32
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24

    int integer_data = freq / xtal;
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd fb94 	bl	8000230 <__divsi3>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	623b      	str	r3, [r7, #32]

    int frac_mod = freq % xtal;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7fd fc73 	bl	80003fc <__aeabi_idivmod>
 8002b16:	000b      	movs	r3, r1
 8002b18:	61fb      	str	r3, [r7, #28]

    double frac_value = 1.0 * freq / xtal - integer_data;
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f9da 	bl	8001ed4 <__aeabi_i2d>
 8002b20:	0004      	movs	r4, r0
 8002b22:	000d      	movs	r5, r1
 8002b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b26:	f7ff f9d5 	bl	8001ed4 <__aeabi_i2d>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	0020      	movs	r0, r4
 8002b30:	0029      	movs	r1, r5
 8002b32:	f7fe f8a5 	bl	8000c80 <__aeabi_ddiv>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	0014      	movs	r4, r2
 8002b3c:	001d      	movs	r5, r3
 8002b3e:	6a38      	ldr	r0, [r7, #32]
 8002b40:	f7ff f9c8 	bl	8001ed4 <__aeabi_i2d>
 8002b44:	0002      	movs	r2, r0
 8002b46:	000b      	movs	r3, r1
 8002b48:	0020      	movs	r0, r4
 8002b4a:	0029      	movs	r1, r5
 8002b4c:	f7fe fdfa 	bl	8001744 <__aeabi_dsub>
 8002b50:	0002      	movs	r2, r0
 8002b52:	000b      	movs	r3, r1
 8002b54:	613a      	str	r2, [r7, #16]
 8002b56:	617b      	str	r3, [r7, #20]

    int frac_data = frac_value * pow(2, 24);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <Set_VCO_Frequency+0xc8>)
 8002b5c:	6938      	ldr	r0, [r7, #16]
 8002b5e:	6979      	ldr	r1, [r7, #20]
 8002b60:	f7fe fb84 	bl	800126c <__aeabi_dmul>
 8002b64:	0002      	movs	r2, r0
 8002b66:	000b      	movs	r3, r1
 8002b68:	0010      	movs	r0, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	f7ff f97c 	bl	8001e68 <__aeabi_d2iz>
 8002b70:	0003      	movs	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]

    uint8_t reg_5 = 0b00101000;
 8002b74:	240b      	movs	r4, #11
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	2228      	movs	r2, #40	; 0x28
 8002b7a:	701a      	strb	r2, [r3, #0]

    // REG 3 1C

    uint8_t reg_3 = 0b00011000;
 8002b7c:	210a      	movs	r1, #10
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2218      	movs	r2, #24
 8002b82:	701a      	strb	r2, [r3, #0]

    sendBytes(integer_data, reg_3);
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 f817 	bl	8002bc0 <sendBytes>

    // REG 5 0

    sendBytes(0, reg_5);
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	0019      	movs	r1, r3
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f811 	bl	8002bc0 <sendBytes>

    // REG 4 0

    uint8_t reg_4 = 0b00100000;
 8002b9e:	2109      	movs	r1, #9
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	701a      	strb	r2, [r3, #0]

    sendBytes(frac_data, reg_4);
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f806 	bl	8002bc0 <sendBytes>
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b00a      	add	sp, #40	; 0x28
 8002bba:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbc:	41700000 	.word	0x41700000

08002bc0 <sendBytes>:

void sendBytes(int data, uint8_t addressByte) {
 8002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	000a      	movs	r2, r1
 8002bca:	1cfb      	adds	r3, r7, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
    uint8_t firstIntDataByte = data & 0xff;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	240f      	movs	r4, #15
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	701a      	strb	r2, [r3, #0]

    data = data >> 8;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	121b      	asrs	r3, r3, #8
 8002bdc:	607b      	str	r3, [r7, #4]

    uint8_t secondIntDataByte = data & 0xff;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	250e      	movs	r5, #14
 8002be4:	197b      	adds	r3, r7, r5
 8002be6:	701a      	strb	r2, [r3, #0]

    data = data >> 8;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	121b      	asrs	r3, r3, #8
 8002bec:	607b      	str	r3, [r7, #4]

    uint8_t thirdIntDataByte = data & 0xff;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	260d      	movs	r6, #13
 8002bf4:	19bb      	adds	r3, r7, r6
 8002bf6:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <sendBytes+0x88>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 fb32 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&thirdIntDataByte, 1, 100);
 8002c04:	19b9      	adds	r1, r7, r6
 8002c06:	4811      	ldr	r0, [pc, #68]	; (8002c4c <sendBytes+0x8c>)
 8002c08:	2364      	movs	r3, #100	; 0x64
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f002 fb4a 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&secondIntDataByte, 1, 100);
 8002c10:	1979      	adds	r1, r7, r5
 8002c12:	480e      	ldr	r0, [pc, #56]	; (8002c4c <sendBytes+0x8c>)
 8002c14:	2364      	movs	r3, #100	; 0x64
 8002c16:	2201      	movs	r2, #1
 8002c18:	f002 fb44 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&firstIntDataByte, 1, 100);
 8002c1c:	1939      	adds	r1, r7, r4
 8002c1e:	480b      	ldr	r0, [pc, #44]	; (8002c4c <sendBytes+0x8c>)
 8002c20:	2364      	movs	r3, #100	; 0x64
 8002c22:	2201      	movs	r2, #1
 8002c24:	f002 fb3e 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&addressByte, 1, 100);
 8002c28:	1cf9      	adds	r1, r7, #3
 8002c2a:	4808      	ldr	r0, [pc, #32]	; (8002c4c <sendBytes+0x8c>)
 8002c2c:	2364      	movs	r3, #100	; 0x64
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f002 fb38 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <sendBytes+0x88>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f001 fb14 	bl	8004268 <HAL_GPIO_WritePin>
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b005      	add	sp, #20
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c48:	50000400 	.word	0x50000400
 8002c4c:	200000e8 	.word	0x200000e8

08002c50 <Initialize_Microwave_Generator>:

void Initialize_Microwave_Generator(void) {
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
    uint8_t VarZero = 0b00000000;
 8002c56:	2427      	movs	r4, #39	; 0x27
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]

    uint8_t VarOne = 0b00100000;
 8002c5e:	2626      	movs	r6, #38	; 0x26
 8002c60:	19bb      	adds	r3, r7, r6
 8002c62:	2220      	movs	r2, #32
 8002c64:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwo = 0b00000010;
 8002c66:	2325      	movs	r3, #37	; 0x25
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]

    uint8_t VarThree = 0b00001000;
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	18bb      	adds	r3, r7, r2
 8002c72:	2208      	movs	r2, #8
 8002c74:	701a      	strb	r2, [r3, #0]

    uint8_t VarFour = 0b00000001;
 8002c76:	2323      	movs	r3, #35	; 0x23
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]

    uint8_t VarFive = 0b00010000;
 8002c7e:	2122      	movs	r1, #34	; 0x22
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	2210      	movs	r2, #16
 8002c84:	701a      	strb	r2, [r3, #0]

    uint8_t VarSix = 0b10010000;
 8002c86:	2521      	movs	r5, #33	; 0x21
 8002c88:	197b      	adds	r3, r7, r5
 8002c8a:	2290      	movs	r2, #144	; 0x90
 8002c8c:	701a      	strb	r2, [r3, #0]

    uint8_t VarSeven = 0b00101000;
 8002c8e:	2520      	movs	r5, #32
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	2228      	movs	r2, #40	; 0x28
 8002c94:	701a      	strb	r2, [r3, #0]

    uint8_t VarEight = 0b00001111;
 8002c96:	221f      	movs	r2, #31
 8002c98:	18bb      	adds	r3, r7, r2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	701a      	strb	r2, [r3, #0]

    uint8_t VarNine = 0b10011000;
 8002c9e:	211e      	movs	r1, #30
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	2298      	movs	r2, #152	; 0x98
 8002ca4:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneZero = 0b01001011;
 8002ca6:	211d      	movs	r1, #29
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	224b      	movs	r2, #75	; 0x4b
 8002cac:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneOne = 0b00111000;
 8002cae:	211c      	movs	r1, #28
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	2238      	movs	r2, #56	; 0x38
 8002cb4:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneTwo = 0b01001010;
 8002cb6:	231b      	movs	r3, #27
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	224a      	movs	r2, #74	; 0x4a
 8002cbc:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneThree = 0b00110000;
 8002cbe:	231a      	movs	r3, #26
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2230      	movs	r2, #48	; 0x30
 8002cc4:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneFour = 0b01001101;
 8002cc6:	2319      	movs	r3, #25
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	224d      	movs	r2, #77	; 0x4d
 8002ccc:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneFive = 0b11000001;
 8002cce:	2218      	movs	r2, #24
 8002cd0:	18bb      	adds	r3, r7, r2
 8002cd2:	22c1      	movs	r2, #193	; 0xc1
 8002cd4:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneSix = 0b10111110;
 8002cd6:	2117      	movs	r1, #23
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	22be      	movs	r2, #190	; 0xbe
 8002cdc:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneSeven = 0b11111111;
 8002cde:	2016      	movs	r0, #22
 8002ce0:	183b      	adds	r3, r7, r0
 8002ce2:	22ff      	movs	r2, #255	; 0xff
 8002ce4:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneEight = 0b01000000;
 8002ce6:	2315      	movs	r3, #21
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	701a      	strb	r2, [r3, #0]

    uint8_t VarOneNine = 0b00111111;
 8002cee:	2214      	movs	r2, #20
 8002cf0:	18bb      	adds	r3, r7, r2
 8002cf2:	223f      	movs	r2, #63	; 0x3f
 8002cf4:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoZero = 0b11111110;
 8002cf6:	2113      	movs	r1, #19
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	22fe      	movs	r2, #254	; 0xfe
 8002cfc:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoOne = 0b11111101;
 8002cfe:	2012      	movs	r0, #18
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	22fd      	movs	r2, #253	; 0xfd
 8002d04:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoTwo = 0b01001000;
 8002d06:	2311      	movs	r3, #17
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2248      	movs	r2, #72	; 0x48
 8002d0c:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoThree = 0b01000110;
 8002d0e:	2210      	movs	r2, #16
 8002d10:	18bb      	adds	r3, r7, r2
 8002d12:	2246      	movs	r2, #70	; 0x46
 8002d14:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoFour = 0b01010000;
 8002d16:	210f      	movs	r1, #15
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2250      	movs	r2, #80	; 0x50
 8002d1c:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoFive = 0b01001111;
 8002d1e:	200e      	movs	r0, #14
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	224f      	movs	r2, #79	; 0x4f
 8002d24:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoSix = 0b10000000;
 8002d26:	230d      	movs	r3, #13
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoSeven = 0b01100001;
 8002d2e:	220c      	movs	r2, #12
 8002d30:	18bb      	adds	r3, r7, r2
 8002d32:	2261      	movs	r2, #97	; 0x61
 8002d34:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoEight = 0b01011000;
 8002d36:	210b      	movs	r1, #11
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2258      	movs	r2, #88	; 0x58
 8002d3c:	701a      	strb	r2, [r3, #0]

    uint8_t VarTwoNine = 0b01100000;
 8002d3e:	200a      	movs	r0, #10
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	2260      	movs	r2, #96	; 0x60
 8002d44:	701a      	strb	r2, [r3, #0]

    uint8_t VarThreeZero = 0b10000001;
 8002d46:	2309      	movs	r3, #9
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2281      	movs	r2, #129	; 0x81
 8002d4c:	701a      	strb	r2, [r3, #0]

    uint8_t VarThreeOne = 0b01111000;
 8002d4e:	2208      	movs	r2, #8
 8002d50:	18bb      	adds	r3, r7, r2
 8002d52:	2278      	movs	r2, #120	; 0x78
 8002d54:	701a      	strb	r2, [r3, #0]

    uint8_t VarThreeTwo = 0b00101010;
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	222a      	movs	r2, #42	; 0x2a
 8002d5a:	701a      	strb	r2, [r3, #0]

    uint8_t VarThreeThree = 0b00011000;
 8002d5c:	1dbb      	adds	r3, r7, #6
 8002d5e:	2218      	movs	r2, #24
 8002d60:	701a      	strb	r2, [r3, #0]

    uint8_t VarThreeFour = 0b01100110;
 8002d62:	1d7b      	adds	r3, r7, #5
 8002d64:	2266      	movs	r2, #102	; 0x66
 8002d66:	701a      	strb	r2, [r3, #0]

    // REG 0 20

    // RESET command.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002d68:	4bfe      	ldr	r3, [pc, #1016]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f001 fa7a 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002d74:	1939      	adds	r1, r7, r4
 8002d76:	48fc      	ldr	r0, [pc, #1008]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002d78:	2364      	movs	r3, #100	; 0x64
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f002 fa92 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002d80:	1939      	adds	r1, r7, r4
 8002d82:	48f9      	ldr	r0, [pc, #996]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002d84:	2364      	movs	r3, #100	; 0x64
 8002d86:	2201      	movs	r2, #1
 8002d88:	f002 fa8c 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOne, 1, 100);
 8002d8c:	19b9      	adds	r1, r7, r6
 8002d8e:	48f6      	ldr	r0, [pc, #984]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002d90:	2364      	movs	r3, #100	; 0x64
 8002d92:	2201      	movs	r2, #1
 8002d94:	f002 fa86 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002d98:	1939      	adds	r1, r7, r4
 8002d9a:	48f3      	ldr	r0, [pc, #972]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002d9c:	2364      	movs	r3, #100	; 0x64
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f002 fa80 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002da4:	4bef      	ldr	r3, [pc, #956]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	2140      	movs	r1, #64	; 0x40
 8002daa:	0018      	movs	r0, r3
 8002dac:	f001 fa5c 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002db0:	2032      	movs	r0, #50	; 0x32
 8002db2:	f000 fc6b 	bl	800368c <HAL_Delay>

    // Default = 2.  This value assigns PLL Chip Enable control to the SPI Reg 1
    // [1], 1 enabled, 0 disabled.  To assign PLL CE control to CE pin, write
    // Reg 1[0]=1.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002db6:	4beb      	ldr	r3, [pc, #940]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	2140      	movs	r1, #64	; 0x40
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f001 fa53 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002dc2:	1939      	adds	r1, r7, r4
 8002dc4:	48e8      	ldr	r0, [pc, #928]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002dc6:	2364      	movs	r3, #100	; 0x64
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f002 fa6b 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002dce:	1939      	adds	r1, r7, r4
 8002dd0:	48e5      	ldr	r0, [pc, #916]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002dd2:	2364      	movs	r3, #100	; 0x64
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f002 fa65 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwo, 1, 100);
 8002dda:	2025      	movs	r0, #37	; 0x25
 8002ddc:	1839      	adds	r1, r7, r0
 8002dde:	48e2      	ldr	r0, [pc, #904]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002de0:	2364      	movs	r3, #100	; 0x64
 8002de2:	2201      	movs	r2, #1
 8002de4:	f002 fa5e 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThree, 1, 100);
 8002de8:	2024      	movs	r0, #36	; 0x24
 8002dea:	1839      	adds	r1, r7, r0
 8002dec:	48de      	ldr	r0, [pc, #888]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002dee:	2364      	movs	r3, #100	; 0x64
 8002df0:	2201      	movs	r2, #1
 8002df2:	f002 fa57 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002df6:	4bdb      	ldr	r3, [pc, #876]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2140      	movs	r1, #64	; 0x40
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f001 fa33 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002e02:	2032      	movs	r0, #50	; 0x32
 8002e04:	f000 fc42 	bl	800368c <HAL_Delay>

    // REG 2 1

    // Ref Divider Register-Default value = 1h (Rdiv=1). Program as needed.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002e08:	4bd6      	ldr	r3, [pc, #856]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f001 fa2a 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002e14:	1939      	adds	r1, r7, r4
 8002e16:	48d4      	ldr	r0, [pc, #848]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e18:	2364      	movs	r3, #100	; 0x64
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f002 fa42 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002e20:	1939      	adds	r1, r7, r4
 8002e22:	48d1      	ldr	r0, [pc, #836]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e24:	2364      	movs	r3, #100	; 0x64
 8002e26:	2201      	movs	r2, #1
 8002e28:	f002 fa3c 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarFour, 1, 100);
 8002e2c:	2323      	movs	r3, #35	; 0x23
 8002e2e:	18f9      	adds	r1, r7, r3
 8002e30:	48cd      	ldr	r0, [pc, #820]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e32:	2364      	movs	r3, #100	; 0x64
 8002e34:	2201      	movs	r2, #1
 8002e36:	f002 fa35 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarFive, 1, 100);
 8002e3a:	2022      	movs	r0, #34	; 0x22
 8002e3c:	1839      	adds	r1, r7, r0
 8002e3e:	48ca      	ldr	r0, [pc, #808]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e40:	2364      	movs	r3, #100	; 0x64
 8002e42:	2201      	movs	r2, #1
 8002e44:	f002 fa2e 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002e48:	4bc6      	ldr	r3, [pc, #792]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f001 fa0a 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002e54:	2032      	movs	r0, #50	; 0x32
 8002e56:	f000 fc19 	bl	800368c <HAL_Delay>

    // REG 5 90

    // Reg02 = 000000001 = fo (VCO output Div-by-1);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002e5a:	4bc2      	ldr	r3, [pc, #776]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	0018      	movs	r0, r3
 8002e62:	f001 fa01 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002e66:	1939      	adds	r1, r7, r4
 8002e68:	48bf      	ldr	r0, [pc, #764]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e6a:	2364      	movs	r3, #100	; 0x64
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f002 fa19 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002e72:	1939      	adds	r1, r7, r4
 8002e74:	48bc      	ldr	r0, [pc, #752]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e76:	2364      	movs	r3, #100	; 0x64
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f002 fa13 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarSix, 1, 100);
 8002e7e:	2021      	movs	r0, #33	; 0x21
 8002e80:	1839      	adds	r1, r7, r0
 8002e82:	48b9      	ldr	r0, [pc, #740]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e84:	2364      	movs	r3, #100	; 0x64
 8002e86:	2201      	movs	r2, #1
 8002e88:	f002 fa0c 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarSeven, 1, 100);
 8002e8c:	1979      	adds	r1, r7, r5
 8002e8e:	48b6      	ldr	r0, [pc, #728]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002e90:	2364      	movs	r3, #100	; 0x64
 8002e92:	2201      	movs	r2, #1
 8002e94:	f002 fa06 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002e98:	4bb2      	ldr	r3, [pc, #712]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f001 f9e2 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002ea4:	2032      	movs	r0, #50	; 0x32
 8002ea6:	f000 fbf1 	bl	800368c <HAL_Delay>

    // REG 5 F98

    // Reg03 = 000011111 = Hi Perf, RF_P & RF_N enabled, 5dB RL,

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002eaa:	4bae      	ldr	r3, [pc, #696]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f001 f9d9 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002eb6:	1939      	adds	r1, r7, r4
 8002eb8:	48ab      	ldr	r0, [pc, #684]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002eba:	2364      	movs	r3, #100	; 0x64
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f002 f9f1 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarEight, 1, 100);
 8002ec2:	221f      	movs	r2, #31
 8002ec4:	18b9      	adds	r1, r7, r2
 8002ec6:	48a8      	ldr	r0, [pc, #672]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002ec8:	2364      	movs	r3, #100	; 0x64
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f002 f9ea 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarNine, 1, 100);
 8002ed0:	201e      	movs	r0, #30
 8002ed2:	1839      	adds	r1, r7, r0
 8002ed4:	48a4      	ldr	r0, [pc, #656]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002ed6:	2364      	movs	r3, #100	; 0x64
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f002 f9e3 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarSeven, 1, 100);
 8002ede:	1979      	adds	r1, r7, r5
 8002ee0:	48a1      	ldr	r0, [pc, #644]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002ee2:	2364      	movs	r3, #100	; 0x64
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f002 f9dd 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002eea:	4b9e      	ldr	r3, [pc, #632]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	2140      	movs	r1, #64	; 0x40
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f001 f9b9 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002ef6:	2032      	movs	r0, #50	; 0x32
 8002ef8:	f000 fbc8 	bl	800368c <HAL_Delay>

    // REG 5 4B38

    // Reg07 = 010010110 = o/p -6dB.  For maximum o/p power program 4DB8h.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002efc:	4b99      	ldr	r3, [pc, #612]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	0018      	movs	r0, r3
 8002f04:	f001 f9b0 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002f08:	1939      	adds	r1, r7, r4
 8002f0a:	4897      	ldr	r0, [pc, #604]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f0c:	2364      	movs	r3, #100	; 0x64
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f002 f9c8 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneZero, 1, 100);
 8002f14:	201d      	movs	r0, #29
 8002f16:	1839      	adds	r1, r7, r0
 8002f18:	4893      	ldr	r0, [pc, #588]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f1a:	2364      	movs	r3, #100	; 0x64
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f002 f9c1 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneOne, 1, 100);
 8002f22:	211c      	movs	r1, #28
 8002f24:	1879      	adds	r1, r7, r1
 8002f26:	4890      	ldr	r0, [pc, #576]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f28:	2364      	movs	r3, #100	; 0x64
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f002 f9ba 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarSeven, 1, 100);
 8002f30:	1979      	adds	r1, r7, r5
 8002f32:	488d      	ldr	r0, [pc, #564]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f34:	2364      	movs	r3, #100	; 0x64
 8002f36:	2201      	movs	r2, #1
 8002f38:	f002 f9b4 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002f3c:	4b89      	ldr	r3, [pc, #548]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2140      	movs	r1, #64	; 0x40
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 f990 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002f48:	2032      	movs	r0, #50	; 0x32
 8002f4a:	f000 fb9f 	bl	800368c <HAL_Delay>

    // REG 5 0

    // Close out VCO register programming by writing Reg 5 = 0.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 f987 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002f5a:	1939      	adds	r1, r7, r4
 8002f5c:	4882      	ldr	r0, [pc, #520]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f5e:	2364      	movs	r3, #100	; 0x64
 8002f60:	2201      	movs	r2, #1
 8002f62:	f002 f99f 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002f66:	1939      	adds	r1, r7, r4
 8002f68:	487f      	ldr	r0, [pc, #508]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f6a:	2364      	movs	r3, #100	; 0x64
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f002 f999 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002f72:	1939      	adds	r1, r7, r4
 8002f74:	487c      	ldr	r0, [pc, #496]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f76:	2364      	movs	r3, #100	; 0x64
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f002 f993 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarSeven, 1, 100);
 8002f7e:	1979      	adds	r1, r7, r5
 8002f80:	4879      	ldr	r0, [pc, #484]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002f82:	2364      	movs	r3, #100	; 0x64
 8002f84:	2201      	movs	r2, #1
 8002f86:	f002 f98d 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002f8a:	4b76      	ldr	r3, [pc, #472]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	0018      	movs	r0, r3
 8002f92:	f001 f969 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002f96:	2032      	movs	r0, #50	; 0x32
 8002f98:	f000 fb78 	bl	800368c <HAL_Delay>
    // REG 6 F4A

    // Delta-Sigma Modulator Configuration Register. Program this value for Frac
    // Mode.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002f9c:	4b71      	ldr	r3, [pc, #452]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f001 f960 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002fa8:	1939      	adds	r1, r7, r4
 8002faa:	486f      	ldr	r0, [pc, #444]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002fac:	2364      	movs	r3, #100	; 0x64
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f002 f978 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarEight, 1, 100);
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	18b9      	adds	r1, r7, r2
 8002fb8:	486b      	ldr	r0, [pc, #428]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002fba:	2364      	movs	r3, #100	; 0x64
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f002 f971 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneTwo, 1, 100);
 8002fc2:	221b      	movs	r2, #27
 8002fc4:	18b9      	adds	r1, r7, r2
 8002fc6:	4868      	ldr	r0, [pc, #416]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002fc8:	2364      	movs	r3, #100	; 0x64
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f002 f96a 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneThree, 1, 100);
 8002fd0:	221a      	movs	r2, #26
 8002fd2:	18b9      	adds	r1, r7, r2
 8002fd4:	4864      	ldr	r0, [pc, #400]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8002fd6:	2364      	movs	r3, #100	; 0x64
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f002 f963 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 f93f 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8002fea:	2032      	movs	r0, #50	; 0x32
 8002fec:	f000 fb4e 	bl	800368c <HAL_Delay>

    // 14Dh is the default value for LD programming (correct for 50MHz
    // comparison). For different configurations, especially higher PFD rates,
    // this may need to change.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8002ff0:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f001 f936 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8002ffc:	1939      	adds	r1, r7, r4
 8002ffe:	485a      	ldr	r0, [pc, #360]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003000:	2364      	movs	r3, #100	; 0x64
 8003002:	2201      	movs	r2, #1
 8003004:	f002 f94e 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarFour, 1, 100);
 8003008:	2323      	movs	r3, #35	; 0x23
 800300a:	18f9      	adds	r1, r7, r3
 800300c:	4856      	ldr	r0, [pc, #344]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 800300e:	2364      	movs	r3, #100	; 0x64
 8003010:	2201      	movs	r2, #1
 8003012:	f002 f947 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneFour, 1, 100);
 8003016:	2319      	movs	r3, #25
 8003018:	18f9      	adds	r1, r7, r3
 800301a:	4853      	ldr	r0, [pc, #332]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	2201      	movs	r2, #1
 8003020:	f002 f940 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneOne, 1, 100);
 8003024:	211c      	movs	r1, #28
 8003026:	1879      	adds	r1, r7, r1
 8003028:	484f      	ldr	r0, [pc, #316]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 800302a:	2364      	movs	r3, #100	; 0x64
 800302c:	2201      	movs	r2, #1
 800302e:	f002 f939 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8003032:	4b4c      	ldr	r3, [pc, #304]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8003034:	2201      	movs	r2, #1
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	0018      	movs	r0, r3
 800303a:	f001 f915 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 800303e:	2032      	movs	r0, #50	; 0x32
 8003040:	f000 fb24 	bl	800368c <HAL_Delay>

    // REG 8 C1BEFF

    // Default value = C1BEFFh.  No need to program.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8003046:	2200      	movs	r2, #0
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	0018      	movs	r0, r3
 800304c:	f001 f90c 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneFive, 1, 100);
 8003050:	2218      	movs	r2, #24
 8003052:	18b9      	adds	r1, r7, r2
 8003054:	4844      	ldr	r0, [pc, #272]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003056:	2364      	movs	r3, #100	; 0x64
 8003058:	2201      	movs	r2, #1
 800305a:	f002 f923 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneSix, 1, 100);
 800305e:	2117      	movs	r1, #23
 8003060:	1879      	adds	r1, r7, r1
 8003062:	4841      	ldr	r0, [pc, #260]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003064:	2364      	movs	r3, #100	; 0x64
 8003066:	2201      	movs	r2, #1
 8003068:	f002 f91c 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneSeven, 1, 100);
 800306c:	2016      	movs	r0, #22
 800306e:	1839      	adds	r1, r7, r0
 8003070:	483d      	ldr	r0, [pc, #244]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003072:	2364      	movs	r3, #100	; 0x64
 8003074:	2201      	movs	r2, #1
 8003076:	f002 f915 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneEight, 1, 100);
 800307a:	2315      	movs	r3, #21
 800307c:	18f9      	adds	r1, r7, r3
 800307e:	483a      	ldr	r0, [pc, #232]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003080:	2364      	movs	r3, #100	; 0x64
 8003082:	2201      	movs	r2, #1
 8003084:	f002 f90e 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 800308a:	2201      	movs	r2, #1
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	0018      	movs	r0, r3
 8003090:	f001 f8ea 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8003094:	2032      	movs	r0, #50	; 0x32
 8003096:	f000 faf9 	bl	800368c <HAL_Delay>
    // REG 9 3FFEFD

    // CP Register-Program as needed. 3FFEFDh = 2.54mA CP current with 635uA Up
    // CP Offset current.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 800309a:	4b32      	ldr	r3, [pc, #200]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 800309c:	2200      	movs	r2, #0
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	0018      	movs	r0, r3
 80030a2:	f001 f8e1 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOneNine, 1, 100);
 80030a6:	2214      	movs	r2, #20
 80030a8:	18b9      	adds	r1, r7, r2
 80030aa:	482f      	ldr	r0, [pc, #188]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 80030ac:	2364      	movs	r3, #100	; 0x64
 80030ae:	2201      	movs	r2, #1
 80030b0:	f002 f8f8 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoZero, 1, 100);
 80030b4:	2113      	movs	r1, #19
 80030b6:	1879      	adds	r1, r7, r1
 80030b8:	482b      	ldr	r0, [pc, #172]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 80030ba:	2364      	movs	r3, #100	; 0x64
 80030bc:	2201      	movs	r2, #1
 80030be:	f002 f8f1 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoOne, 1, 100);
 80030c2:	2012      	movs	r0, #18
 80030c4:	1839      	adds	r1, r7, r0
 80030c6:	4828      	ldr	r0, [pc, #160]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 80030c8:	2364      	movs	r3, #100	; 0x64
 80030ca:	2201      	movs	r2, #1
 80030cc:	f002 f8ea 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoTwo, 1, 100);
 80030d0:	2311      	movs	r3, #17
 80030d2:	18f9      	adds	r1, r7, r3
 80030d4:	4824      	ldr	r0, [pc, #144]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 80030d6:	2364      	movs	r3, #100	; 0x64
 80030d8:	2201      	movs	r2, #1
 80030da:	f002 f8e3 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	2140      	movs	r1, #64	; 0x40
 80030e4:	0018      	movs	r0, r3
 80030e6:	f001 f8bf 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 80030ea:	2032      	movs	r0, #50	; 0x32
 80030ec:	f000 face 	bl	800368c <HAL_Delay>

    // REG A 2046

    // VCO Tuning Configuration Register-Program this value.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	0018      	movs	r0, r3
 80030f8:	f001 f8b6 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 80030fc:	1939      	adds	r1, r7, r4
 80030fe:	481a      	ldr	r0, [pc, #104]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003100:	2364      	movs	r3, #100	; 0x64
 8003102:	2201      	movs	r2, #1
 8003104:	f002 f8ce 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOne, 1, 100);
 8003108:	19b9      	adds	r1, r7, r6
 800310a:	4817      	ldr	r0, [pc, #92]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 800310c:	2364      	movs	r3, #100	; 0x64
 800310e:	2201      	movs	r2, #1
 8003110:	f002 f8c8 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoThree, 1, 100);
 8003114:	2210      	movs	r2, #16
 8003116:	18b9      	adds	r1, r7, r2
 8003118:	4813      	ldr	r0, [pc, #76]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 800311a:	2364      	movs	r3, #100	; 0x64
 800311c:	2201      	movs	r2, #1
 800311e:	f002 f8c1 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoFour, 1, 100);
 8003122:	210f      	movs	r1, #15
 8003124:	1879      	adds	r1, r7, r1
 8003126:	4810      	ldr	r0, [pc, #64]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003128:	2364      	movs	r3, #100	; 0x64
 800312a:	2201      	movs	r2, #1
 800312c:	f002 f8ba 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8003132:	2201      	movs	r2, #1
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	0018      	movs	r0, r3
 8003138:	f001 f896 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 800313c:	2032      	movs	r0, #50	; 0x32
 800313e:	f000 faa5 	bl	800368c <HAL_Delay>

    // PFD/CP Control Register.  Default value = F8061h.  4F8061h sets LD/SDO
    // output level to 3.3V from 1.8V default (bit[22]=1 sets 3.3V output
    // level).

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <Initialize_Microwave_Generator+0x514>)
 8003144:	2200      	movs	r2, #0
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	0018      	movs	r0, r3
 800314a:	f001 f88d 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoFive, 1, 100);
 800314e:	200e      	movs	r0, #14
 8003150:	1839      	adds	r1, r7, r0
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <Initialize_Microwave_Generator+0x518>)
 8003154:	2364      	movs	r3, #100	; 0x64
 8003156:	2201      	movs	r2, #1
 8003158:	f002 f8a4 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoSix, 1, 100);
 800315c:	230d      	movs	r3, #13
 800315e:	18f9      	adds	r1, r7, r3
 8003160:	e004      	b.n	800316c <Initialize_Microwave_Generator+0x51c>
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	50000400 	.word	0x50000400
 8003168:	200000e8 	.word	0x200000e8
 800316c:	485f      	ldr	r0, [pc, #380]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800316e:	2364      	movs	r3, #100	; 0x64
 8003170:	2201      	movs	r2, #1
 8003172:	f002 f897 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoSeven, 1, 100);
 8003176:	220c      	movs	r2, #12
 8003178:	18b9      	adds	r1, r7, r2
 800317a:	485c      	ldr	r0, [pc, #368]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800317c:	2364      	movs	r3, #100	; 0x64
 800317e:	2201      	movs	r2, #1
 8003180:	f002 f890 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoEight, 1, 100);
 8003184:	210b      	movs	r1, #11
 8003186:	1879      	adds	r1, r7, r1
 8003188:	4858      	ldr	r0, [pc, #352]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800318a:	2364      	movs	r3, #100	; 0x64
 800318c:	2201      	movs	r2, #1
 800318e:	f002 f889 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 8003194:	2201      	movs	r2, #1
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	0018      	movs	r0, r3
 800319a:	f001 f865 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 800319e:	2032      	movs	r0, #50	; 0x32
 80031a0:	f000 fa74 	bl	800368c <HAL_Delay>
    // REG C 0

    // Exact Frequency register.  Default value =0h.  No need to program if not
    // using Exact Frequency Mode.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	0018      	movs	r0, r3
 80031ac:	f001 f85c 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 80031b0:	1939      	adds	r1, r7, r4
 80031b2:	484e      	ldr	r0, [pc, #312]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80031b4:	2364      	movs	r3, #100	; 0x64
 80031b6:	2201      	movs	r2, #1
 80031b8:	f002 f874 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 80031bc:	1939      	adds	r1, r7, r4
 80031be:	484b      	ldr	r0, [pc, #300]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80031c0:	2364      	movs	r3, #100	; 0x64
 80031c2:	2201      	movs	r2, #1
 80031c4:	f002 f86e 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 80031c8:	1939      	adds	r1, r7, r4
 80031ca:	4848      	ldr	r0, [pc, #288]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80031cc:	2364      	movs	r3, #100	; 0x64
 80031ce:	2201      	movs	r2, #1
 80031d0:	f002 f868 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarTwoNine, 1, 100);
 80031d4:	200a      	movs	r0, #10
 80031d6:	1839      	adds	r1, r7, r0
 80031d8:	4844      	ldr	r0, [pc, #272]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80031da:	2364      	movs	r3, #100	; 0x64
 80031dc:	2201      	movs	r2, #1
 80031de:	f002 f861 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	0018      	movs	r0, r3
 80031ea:	f001 f83d 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 80031ee:	2032      	movs	r0, #50	; 0x32
 80031f0:	f000 fa4c 	bl	800368c <HAL_Delay>

    // Default vaue =1. 81h configures LD/SDO pin to output LD status always,
    // except during SPI reads when the pin is automatically mux'ed to output
    // the serial data.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	0018      	movs	r0, r3
 80031fc:	f001 f834 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8003200:	1939      	adds	r1, r7, r4
 8003202:	483a      	ldr	r0, [pc, #232]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 8003204:	2364      	movs	r3, #100	; 0x64
 8003206:	2201      	movs	r2, #1
 8003208:	f002 f84c 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 800320c:	1939      	adds	r1, r7, r4
 800320e:	4837      	ldr	r0, [pc, #220]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 8003210:	2364      	movs	r3, #100	; 0x64
 8003212:	2201      	movs	r2, #1
 8003214:	f002 f846 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeZero, 1, 100);
 8003218:	2309      	movs	r3, #9
 800321a:	18f9      	adds	r1, r7, r3
 800321c:	4833      	ldr	r0, [pc, #204]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800321e:	2364      	movs	r3, #100	; 0x64
 8003220:	2201      	movs	r2, #1
 8003222:	f002 f83f 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeOne, 1, 100);
 8003226:	2208      	movs	r2, #8
 8003228:	18b9      	adds	r1, r7, r2
 800322a:	4830      	ldr	r0, [pc, #192]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800322c:	2364      	movs	r3, #100	; 0x64
 800322e:	2201      	movs	r2, #1
 8003230:	f002 f838 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8003234:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 8003236:	2201      	movs	r2, #1
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	0018      	movs	r0, r3
 800323c:	f001 f814 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8003240:	2032      	movs	r0, #50	; 0x32
 8003242:	f000 fa23 	bl	800368c <HAL_Delay>

    // REG 3 2A

    // Integer VCO Divider Register-Progarm as needed to set frequency.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 8003248:	2200      	movs	r2, #0
 800324a:	2140      	movs	r1, #64	; 0x40
 800324c:	0018      	movs	r0, r3
 800324e:	f001 f80b 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 8003252:	1939      	adds	r1, r7, r4
 8003254:	4825      	ldr	r0, [pc, #148]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 8003256:	2364      	movs	r3, #100	; 0x64
 8003258:	2201      	movs	r2, #1
 800325a:	f002 f823 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarZero, 1, 100);
 800325e:	1939      	adds	r1, r7, r4
 8003260:	4822      	ldr	r0, [pc, #136]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 8003262:	2364      	movs	r3, #100	; 0x64
 8003264:	2201      	movs	r2, #1
 8003266:	f002 f81d 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeTwo, 1, 100);
 800326a:	1df9      	adds	r1, r7, #7
 800326c:	481f      	ldr	r0, [pc, #124]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800326e:	2364      	movs	r3, #100	; 0x64
 8003270:	2201      	movs	r2, #1
 8003272:	f002 f817 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeThree, 1, 100);
 8003276:	1db9      	adds	r1, r7, #6
 8003278:	481c      	ldr	r0, [pc, #112]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 800327a:	2364      	movs	r3, #100	; 0x64
 800327c:	2201      	movs	r2, #1
 800327e:	f002 f811 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 8003284:	2201      	movs	r2, #1
 8003286:	2140      	movs	r1, #64	; 0x40
 8003288:	0018      	movs	r0, r3
 800328a:	f000 ffed 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 800328e:	2032      	movs	r0, #50	; 0x32
 8003290:	f000 f9fc 	bl	800368c <HAL_Delay>
    // REG 4 666666

    // Fractional VCO Divider Register-Program as needed to set frequency. When
    // this register is written, a VCO auto-cal is initiated.

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // SEN Deassert
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 8003296:	2200      	movs	r2, #0
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	0018      	movs	r0, r3
 800329c:	f000 ffe4 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeFour, 1, 100);
 80032a0:	1d79      	adds	r1, r7, #5
 80032a2:	4812      	ldr	r0, [pc, #72]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80032a4:	2364      	movs	r3, #100	; 0x64
 80032a6:	2201      	movs	r2, #1
 80032a8:	f001 fffc 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeFour, 1, 100);
 80032ac:	1d79      	adds	r1, r7, #5
 80032ae:	480f      	ldr	r0, [pc, #60]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80032b0:	2364      	movs	r3, #100	; 0x64
 80032b2:	2201      	movs	r2, #1
 80032b4:	f001 fff6 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarThreeFour, 1, 100);
 80032b8:	1d79      	adds	r1, r7, #5
 80032ba:	480c      	ldr	r0, [pc, #48]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80032bc:	2364      	movs	r3, #100	; 0x64
 80032be:	2201      	movs	r2, #1
 80032c0:	f001 fff0 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&VarOne, 1, 100);
 80032c4:	19b9      	adds	r1, r7, r6
 80032c6:	4809      	ldr	r0, [pc, #36]	; (80032ec <Initialize_Microwave_Generator+0x69c>)
 80032c8:	2364      	movs	r3, #100	; 0x64
 80032ca:	2201      	movs	r2, #1
 80032cc:	f001 ffea 	bl	80052a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SEN Assert
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <Initialize_Microwave_Generator+0x6a0>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	2140      	movs	r1, #64	; 0x40
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 ffc6 	bl	8004268 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 80032dc:	2032      	movs	r0, #50	; 0x32
 80032de:	f000 f9d5 	bl	800368c <HAL_Delay>
}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b00b      	add	sp, #44	; 0x2c
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	200000e8 	.word	0x200000e8
 80032f0:	50000400 	.word	0x50000400

080032f4 <Error_Handler>:

  */

void Error_Handler(void)

{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f8:	b672      	cpsid	i
}
 80032fa:	46c0      	nop			; (mov r8, r8)
    /* User can add his own implementation to report the HAL error return state
     */

    __disable_irq();

    while (1)
 80032fc:	e7fe      	b.n	80032fc <Error_Handler+0x8>
	...

08003300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_MspInit+0x24>)
 8003306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_MspInit+0x24>)
 800330a:	2101      	movs	r1, #1
 800330c:	430a      	orrs	r2, r1
 800330e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_MspInit+0x24>)
 8003312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_MspInit+0x24>)
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0549      	lsls	r1, r1, #21
 800331a:	430a      	orrs	r2, r1
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	240c      	movs	r4, #12
 8003332:	193b      	adds	r3, r7, r4
 8003334:	0018      	movs	r0, r3
 8003336:	2314      	movs	r3, #20
 8003338:	001a      	movs	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f002 ff75 	bl	800622a <memset>
  if(hadc->Instance==ADC1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a14      	ldr	r2, [pc, #80]	; (8003398 <HAL_ADC_MspInit+0x70>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d122      	bne.n	8003390 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_ADC_MspInit+0x74>)
 800334c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_ADC_MspInit+0x74>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0089      	lsls	r1, r1, #2
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_ADC_MspInit+0x74>)
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_ADC_MspInit+0x74>)
 800335e:	2101      	movs	r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_ADC_MspInit+0x74>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2201      	movs	r2, #1
 800336a:	4013      	ands	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003370:	193b      	adds	r3, r7, r4
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003376:	193b      	adds	r3, r7, r4
 8003378:	2203      	movs	r2, #3
 800337a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	193b      	adds	r3, r7, r4
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	193a      	adds	r2, r7, r4
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fdee 	bl	8003f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b009      	add	sp, #36	; 0x24
 8003396:	bd90      	pop	{r4, r7, pc}
 8003398:	40012400 	.word	0x40012400
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	240c      	movs	r4, #12
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	0018      	movs	r0, r3
 80033ae:	2314      	movs	r3, #20
 80033b0:	001a      	movs	r2, r3
 80033b2:	2100      	movs	r1, #0
 80033b4:	f002 ff39 	bl	800622a <memset>
  if(hspi->Instance==SPI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_SPI_MspInit+0x80>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d129      	bne.n	8003416 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_SPI_MspInit+0x84>)
 80033c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_SPI_MspInit+0x84>)
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	0149      	lsls	r1, r1, #5
 80033cc:	430a      	orrs	r2, r1
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <HAL_SPI_MspInit+0x84>)
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_SPI_MspInit+0x84>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	430a      	orrs	r2, r1
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_SPI_MspInit+0x84>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033e8:	0021      	movs	r1, r4
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	22e0      	movs	r2, #224	; 0xe0
 80033ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2202      	movs	r2, #2
 80033f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2203      	movs	r2, #3
 8003400:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	187a      	adds	r2, r7, r1
 800340a:	23a0      	movs	r3, #160	; 0xa0
 800340c:	05db      	lsls	r3, r3, #23
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f000 fdab 	bl	8003f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b009      	add	sp, #36	; 0x24
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40013000 	.word	0x40013000
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	240c      	movs	r4, #12
 8003432:	193b      	adds	r3, r7, r4
 8003434:	0018      	movs	r0, r3
 8003436:	2314      	movs	r3, #20
 8003438:	001a      	movs	r2, r3
 800343a:	2100      	movs	r1, #0
 800343c:	f002 fef5 	bl	800622a <memset>
  if(huart->Instance==USART2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_UART_MspInit+0x80>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d129      	bne.n	800349e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_UART_MspInit+0x84>)
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	4b17      	ldr	r3, [pc, #92]	; (80034ac <HAL_UART_MspInit+0x84>)
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	0289      	lsls	r1, r1, #10
 8003454:	430a      	orrs	r2, r1
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_UART_MspInit+0x84>)
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_UART_MspInit+0x84>)
 800345e:	2101      	movs	r1, #1
 8003460:	430a      	orrs	r2, r1
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_UART_MspInit+0x84>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003470:	0021      	movs	r1, r4
 8003472:	187b      	adds	r3, r7, r1
 8003474:	220c      	movs	r2, #12
 8003476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	187b      	adds	r3, r7, r1
 800347a:	2202      	movs	r2, #2
 800347c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2203      	movs	r2, #3
 8003488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2204      	movs	r2, #4
 800348e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	187a      	adds	r2, r7, r1
 8003492:	23a0      	movs	r3, #160	; 0xa0
 8003494:	05db      	lsls	r3, r3, #23
 8003496:	0011      	movs	r1, r2
 8003498:	0018      	movs	r0, r3
 800349a:	f000 fd67 	bl	8003f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b009      	add	sp, #36	; 0x24
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	40004400 	.word	0x40004400
 80034ac:	40021000 	.word	0x40021000

080034b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b4:	e7fe      	b.n	80034b4 <NMI_Handler+0x4>

080034b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ba:	e7fe      	b.n	80034ba <HardFault_Handler+0x4>

080034bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d4:	f000 f8be 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <_sbrk+0x5c>)
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <_sbrk+0x60>)
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <_sbrk+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <_sbrk+0x64>)
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <_sbrk+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <_sbrk+0x64>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	18d3      	adds	r3, r2, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d207      	bcs.n	8003520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003510:	f002 fe4e 	bl	80061b0 <__errno>
 8003514:	0003      	movs	r3, r0
 8003516:	220c      	movs	r2, #12
 8003518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351a:	2301      	movs	r3, #1
 800351c:	425b      	negs	r3, r3
 800351e:	e009      	b.n	8003534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <_sbrk+0x64>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	18d2      	adds	r2, r2, r3
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <_sbrk+0x64>)
 8003530:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b006      	add	sp, #24
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20005000 	.word	0x20005000
 8003540:	00000400 	.word	0x00000400
 8003544:	200001c4 	.word	0x200001c4
 8003548:	200001e0 	.word	0x200001e0

0800354c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800355a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <LoopForever+0x6>)
  ldr r1, =_edata
 800355e:	490e      	ldr	r1, [pc, #56]	; (8003598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <LoopForever+0xe>)
  movs r3, #0
 8003562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003564:	e002      	b.n	800356c <LoopCopyDataInit>

08003566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800356a:	3304      	adds	r3, #4

0800356c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800356c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003570:	d3f9      	bcc.n	8003566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003572:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003574:	4c0b      	ldr	r4, [pc, #44]	; (80035a4 <LoopForever+0x16>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003578:	e001      	b.n	800357e <LoopFillZerobss>

0800357a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800357a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800357c:	3204      	adds	r2, #4

0800357e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003580:	d3fb      	bcc.n	800357a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003582:	f7ff ffe3 	bl	800354c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003586:	f002 fe19 	bl	80061bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800358a:	f7fe fe8f 	bl	80022ac <main>

0800358e <LoopForever>:

LoopForever:
    b LoopForever
 800358e:	e7fe      	b.n	800358e <LoopForever>
   ldr   r0, =_estack
 8003590:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003598:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800359c:	08006d8c 	.word	0x08006d8c
  ldr r2, =_sbss
 80035a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80035a4:	200001dc 	.word	0x200001dc

080035a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a8:	e7fe      	b.n	80035a8 <ADC1_COMP_IRQHandler>
	...

080035ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_Init+0x3c>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_Init+0x3c>)
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035c4:	2000      	movs	r0, #0
 80035c6:	f000 f811 	bl	80035ec <HAL_InitTick>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80035ce:	1dfb      	adds	r3, r7, #7
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e001      	b.n	80035da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035d6:	f7ff fe93 	bl	8003300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_InitTick+0x5c>)
 80035f6:	681c      	ldr	r4, [r3, #0]
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_InitTick+0x60>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	0019      	movs	r1, r3
 80035fe:	23fa      	movs	r3, #250	; 0xfa
 8003600:	0098      	lsls	r0, r3, #2
 8003602:	f7fc fd8b 	bl	800011c <__udivsi3>
 8003606:	0003      	movs	r3, r0
 8003608:	0019      	movs	r1, r3
 800360a:	0020      	movs	r0, r4
 800360c:	f7fc fd86 	bl	800011c <__udivsi3>
 8003610:	0003      	movs	r3, r0
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fc9d 	bl	8003f52 <HAL_SYSTICK_Config>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d001      	beq.n	8003620 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e00f      	b.n	8003640 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d80b      	bhi.n	800363e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	2301      	movs	r3, #1
 800362a:	425b      	negs	r3, r3
 800362c:	2200      	movs	r2, #0
 800362e:	0018      	movs	r0, r3
 8003630:	f000 fc7a 	bl	8003f28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_InitTick+0x64>)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b003      	add	sp, #12
 8003646:	bd90      	pop	{r4, r7, pc}
 8003648:	20000000 	.word	0x20000000
 800364c:	20000008 	.word	0x20000008
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_IncTick+0x1c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	001a      	movs	r2, r3
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_IncTick+0x20>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	18d2      	adds	r2, r2, r3
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_IncTick+0x20>)
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000008 	.word	0x20000008
 8003674:	200001c8 	.word	0x200001c8

08003678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  return uwTick;
 800367c:	4b02      	ldr	r3, [pc, #8]	; (8003688 <HAL_GetTick+0x10>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	200001c8 	.word	0x200001c8

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff fff0 	bl	8003678 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	001a      	movs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	189b      	adds	r3, r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	f7ff ffe0 	bl	8003678 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	20000008 	.word	0x20000008

080036d4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e159      	b.n	800399a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2250      	movs	r2, #80	; 0x50
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0018      	movs	r0, r3
 8003700:	f7ff fe12 	bl	8003328 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	2210      	movs	r2, #16
 800370a:	4013      	ands	r3, r2
 800370c:	2b10      	cmp	r3, #16
 800370e:	d005      	beq.n	800371c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2204      	movs	r2, #4
 8003718:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800371a:	d00b      	beq.n	8003734 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	2210      	movs	r2, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2250      	movs	r2, #80	; 0x50
 800372c:	2100      	movs	r1, #0
 800372e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e132      	b.n	800399a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	4a9a      	ldr	r2, [pc, #616]	; (80039a4 <HAL_ADC_Init+0x2d0>)
 800373a:	4013      	ands	r3, r2
 800373c:	2202      	movs	r2, #2
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2203      	movs	r2, #3
 800374c:	4013      	ands	r3, r2
 800374e:	2b01      	cmp	r3, #1
 8003750:	d108      	bne.n	8003764 <HAL_ADC_Init+0x90>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2201      	movs	r2, #1
 800375a:	4013      	ands	r3, r2
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_ADC_Init+0x90>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_ADC_Init+0x92>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d149      	bne.n	80037fe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	23c0      	movs	r3, #192	; 0xc0
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	429a      	cmp	r2, r3
 8003774:	d00b      	beq.n	800378e <HAL_ADC_Init+0xba>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	05db      	lsls	r3, r3, #23
 800377e:	429a      	cmp	r2, r3
 8003780:	d005      	beq.n	800378e <HAL_ADC_Init+0xba>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	429a      	cmp	r2, r3
 800378c:	d111      	bne.n	80037b2 <HAL_ADC_Init+0xde>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	0892      	lsrs	r2, r2, #2
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6919      	ldr	r1, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	611a      	str	r2, [r3, #16]
 80037b0:	e014      	b.n	80037dc <HAL_ADC_Init+0x108>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	0892      	lsrs	r2, r2, #2
 80037c0:	611a      	str	r2, [r3, #16]
 80037c2:	4b79      	ldr	r3, [pc, #484]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 80037c8:	4978      	ldr	r1, [pc, #480]	; (80039ac <HAL_ADC_Init+0x2d8>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4b74      	ldr	r3, [pc, #464]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2118      	movs	r1, #24
 80037e8:	438a      	bics	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68d9      	ldr	r1, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80037fe:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 8003804:	496a      	ldr	r1, [pc, #424]	; (80039b0 <HAL_ADC_Init+0x2dc>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	065a      	lsls	r2, r3, #25
 8003814:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <HAL_ADC_Init+0x2d4>)
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	055b      	lsls	r3, r3, #21
 8003824:	4013      	ands	r3, r2
 8003826:	d108      	bne.n	800383a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0549      	lsls	r1, r1, #21
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	495b      	ldr	r1, [pc, #364]	; (80039b4 <HAL_ADC_Init+0x2e0>)
 8003846:	400a      	ands	r2, r1
 8003848:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68d9      	ldr	r1, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d101      	bne.n	8003860 <HAL_ADC_Init+0x18c>
 800385c:	2304      	movs	r3, #4
 800385e:	e000      	b.n	8003862 <HAL_ADC_Init+0x18e>
 8003860:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003862:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2020      	movs	r0, #32
 8003868:	5c1b      	ldrb	r3, [r3, r0]
 800386a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800386c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	202c      	movs	r0, #44	; 0x2c
 8003872:	5c1b      	ldrb	r3, [r3, r0]
 8003874:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003876:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800387c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003884:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800388c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	23c2      	movs	r3, #194	; 0xc2
 800389c:	33ff      	adds	r3, #255	; 0xff
 800389e:	429a      	cmp	r2, r3
 80038a0:	d00b      	beq.n	80038ba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68d9      	ldr	r1, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2221      	movs	r2, #33	; 0x21
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d11a      	bne.n	80038fa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	5c9b      	ldrb	r3, [r3, r2]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0249      	lsls	r1, r1, #9
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e00b      	b.n	80038fa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	2220      	movs	r2, #32
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	2201      	movs	r2, #1
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d11f      	bne.n	8003942 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	492a      	ldr	r1, [pc, #168]	; (80039b8 <HAL_ADC_Init+0x2e4>)
 800390e:	400a      	ands	r2, r1
 8003910:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6919      	ldr	r1, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003920:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003926:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	430a      	orrs	r2, r1
 800393e:	611a      	str	r2, [r3, #16]
 8003940:	e00e      	b.n	8003960 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2201      	movs	r2, #1
 800394a:	4013      	ands	r3, r2
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2107      	movs	r1, #7
 800396c:	438a      	bics	r2, r1
 800396e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6959      	ldr	r1, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	2203      	movs	r2, #3
 800398e:	4393      	bics	r3, r2
 8003990:	2201      	movs	r2, #1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	fffffefd 	.word	0xfffffefd
 80039a8:	40012708 	.word	0x40012708
 80039ac:	ffc3ffff 	.word	0xffc3ffff
 80039b0:	fdffffff 	.word	0xfdffffff
 80039b4:	fffe0219 	.word	0xfffe0219
 80039b8:	fffffc03 	.word	0xfffffc03

080039bc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2204      	movs	r2, #4
 80039d4:	4013      	ands	r3, r2
 80039d6:	d138      	bne.n	8003a4a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2250      	movs	r2, #80	; 0x50
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_Start+0x2a>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e038      	b.n	8003a58 <HAL_ADC_Start+0x9c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2250      	movs	r2, #80	; 0x50
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d007      	beq.n	8003a06 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80039f6:	230f      	movs	r3, #15
 80039f8:	18fc      	adds	r4, r7, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f979 	bl	8003cf4 <ADC_Enable>
 8003a02:	0003      	movs	r3, r0
 8003a04:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a06:	230f      	movs	r3, #15
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d120      	bne.n	8003a52 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_ADC_Start+0xa4>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	0052      	lsls	r2, r2, #1
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2250      	movs	r2, #80	; 0x50
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	221c      	movs	r2, #28
 8003a36:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2104      	movs	r1, #4
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	e003      	b.n	8003a52 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a4a:	230f      	movs	r3, #15
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2202      	movs	r2, #2
 8003a50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a52:	230f      	movs	r3, #15
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b005      	add	sp, #20
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	fffff0fe 	.word	0xfffff0fe

08003a64 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d102      	bne.n	8003a84 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e014      	b.n	8003aae <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10b      	bne.n	8003aaa <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	2220      	movs	r2, #32
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2250      	movs	r2, #80	; 0x50
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e072      	b.n	8003b90 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003aaa:	230c      	movs	r3, #12
 8003aac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003aae:	f7ff fde3 	bl	8003678 <HAL_GetTick>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003ab6:	e01f      	b.n	8003af8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	d01c      	beq.n	8003af8 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_ADC_PollForConversion+0x70>
 8003ac4:	f7ff fdd8 	bl	8003678 <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d211      	bcs.n	8003af8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4013      	ands	r3, r2
 8003ade:	d10b      	bne.n	8003af8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2250      	movs	r2, #80	; 0x50
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e04b      	b.n	8003b90 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	d0d9      	beq.n	8003ab8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	23c0      	movs	r3, #192	; 0xc0
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d12e      	bne.n	8003b7e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d129      	bne.n	8003b7e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d122      	bne.n	8003b7e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
 8003b42:	d110      	bne.n	8003b66 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	210c      	movs	r1, #12
 8003b50:	438a      	bics	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <HAL_ADC_PollForConversion+0x134>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
 8003b64:	e00b      	b.n	8003b7e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b76:	2201      	movs	r2, #1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b004      	add	sp, #16
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	fffffefe 	.word	0xfffffefe

08003b9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2250      	movs	r2, #80	; 0x50
 8003bc2:	5c9b      	ldrb	r3, [r3, r2]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x18>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e085      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x124>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2250      	movs	r2, #80	; 0x50
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	2220      	movs	r2, #32
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2250      	movs	r2, #80	; 0x50
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e06f      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	; (8003ce0 <HAL_ADC_ConfigChannel+0x12c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d035      	beq.n	8003c6e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	035b      	lsls	r3, r3, #13
 8003c0e:	0b5a      	lsrs	r2, r3, #13
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	02db      	lsls	r3, r3, #11
 8003c20:	4013      	ands	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003c24:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	0409      	lsls	r1, r1, #16
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003c32:	200a      	movs	r0, #10
 8003c34:	f000 f8c6 	bl	8003dc4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	029b      	lsls	r3, r3, #10
 8003c40:	4013      	ands	r3, r2
 8003c42:	d006      	beq.n	8003c52 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	03c9      	lsls	r1, r1, #15
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	025b      	lsls	r3, r3, #9
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d037      	beq.n	8003cce <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	0449      	lsls	r1, r1, #17
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e02f      	b.n	8003cce <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	035b      	lsls	r3, r3, #13
 8003c7a:	0b5b      	lsrs	r3, r3, #13
 8003c7c:	43d9      	mvns	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	400a      	ands	r2, r1
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	02db      	lsls	r3, r3, #11
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d005      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003c98:	4913      	ldr	r1, [pc, #76]	; (8003ce8 <HAL_ADC_ConfigChannel+0x134>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	029b      	lsls	r3, r3, #10
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d005      	beq.n	8003cb6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003cb0:	490e      	ldr	r1, [pc, #56]	; (8003cec <HAL_ADC_ConfigChannel+0x138>)
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	025b      	lsls	r3, r3, #9
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d005      	beq.n	8003cce <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_ADC_ConfigChannel+0x130>)
 8003cc8:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <HAL_ADC_ConfigChannel+0x13c>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2250      	movs	r2, #80	; 0x50
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	00001001 	.word	0x00001001
 8003ce4:	40012708 	.word	0x40012708
 8003ce8:	ff7fffff 	.word	0xff7fffff
 8003cec:	ffbfffff 	.word	0xffbfffff
 8003cf0:	feffffff 	.word	0xfeffffff

08003cf4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2203      	movs	r2, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d108      	bne.n	8003d20 <ADC_Enable+0x2c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <ADC_Enable+0x2c>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <ADC_Enable+0x2e>
 8003d20:	2300      	movs	r3, #0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d146      	bne.n	8003db4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <ADC_Enable+0xcc>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	2210      	movs	r2, #16
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	2201      	movs	r2, #1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e033      	b.n	8003db6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f000 f830 	bl	8003dc4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d64:	f7ff fc88 	bl	8003678 <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d6c:	e01b      	b.n	8003da6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d6e:	f7ff fc83 	bl	8003678 <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b0a      	cmp	r3, #10
 8003d7a:	d914      	bls.n	8003da6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d00d      	beq.n	8003da6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	2210      	movs	r2, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e007      	b.n	8003db6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2201      	movs	r2, #1
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d1dc      	bne.n	8003d6e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	80000017 	.word	0x80000017

08003dc4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <ADC_DelayMicroSecond+0x38>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	490b      	ldr	r1, [pc, #44]	; (8003e00 <ADC_DelayMicroSecond+0x3c>)
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc f9a2 	bl	800011c <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	001a      	movs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4353      	muls	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003de2:	e002      	b.n	8003dea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f9      	bne.n	8003de4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	000f4240 	.word	0x000f4240

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	1dfb      	adds	r3, r7, #7
 8003e10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e12:	1dfb      	adds	r3, r7, #7
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b7f      	cmp	r3, #127	; 0x7f
 8003e18:	d828      	bhi.n	8003e6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <__NVIC_SetPriority+0xd4>)
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	33c0      	adds	r3, #192	; 0xc0
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	589b      	ldr	r3, [r3, r2]
 8003e2a:	1dfa      	adds	r2, r7, #7
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	0011      	movs	r1, r2
 8003e30:	2203      	movs	r2, #3
 8003e32:	400a      	ands	r2, r1
 8003e34:	00d2      	lsls	r2, r2, #3
 8003e36:	21ff      	movs	r1, #255	; 0xff
 8003e38:	4091      	lsls	r1, r2
 8003e3a:	000a      	movs	r2, r1
 8003e3c:	43d2      	mvns	r2, r2
 8003e3e:	401a      	ands	r2, r3
 8003e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	401a      	ands	r2, r3
 8003e4a:	1dfb      	adds	r3, r7, #7
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	2303      	movs	r3, #3
 8003e52:	4003      	ands	r3, r0
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e58:	481f      	ldr	r0, [pc, #124]	; (8003ed8 <__NVIC_SetPriority+0xd4>)
 8003e5a:	1dfb      	adds	r3, r7, #7
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	430a      	orrs	r2, r1
 8003e64:	33c0      	adds	r3, #192	; 0xc0
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e6a:	e031      	b.n	8003ed0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e6c:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <__NVIC_SetPriority+0xd8>)
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	0019      	movs	r1, r3
 8003e74:	230f      	movs	r3, #15
 8003e76:	400b      	ands	r3, r1
 8003e78:	3b08      	subs	r3, #8
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3306      	adds	r3, #6
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	18d3      	adds	r3, r2, r3
 8003e82:	3304      	adds	r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	1dfa      	adds	r2, r7, #7
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	0011      	movs	r1, r2
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	400a      	ands	r2, r1
 8003e90:	00d2      	lsls	r2, r2, #3
 8003e92:	21ff      	movs	r1, #255	; 0xff
 8003e94:	4091      	lsls	r1, r2
 8003e96:	000a      	movs	r2, r1
 8003e98:	43d2      	mvns	r2, r2
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	22ff      	movs	r2, #255	; 0xff
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	2303      	movs	r3, #3
 8003eae:	4003      	ands	r3, r0
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eb4:	4809      	ldr	r0, [pc, #36]	; (8003edc <__NVIC_SetPriority+0xd8>)
 8003eb6:	1dfb      	adds	r3, r7, #7
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	001c      	movs	r4, r3
 8003ebc:	230f      	movs	r3, #15
 8003ebe:	4023      	ands	r3, r4
 8003ec0:	3b08      	subs	r3, #8
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	3306      	adds	r3, #6
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18c3      	adds	r3, r0, r3
 8003ecc:	3304      	adds	r3, #4
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b003      	add	sp, #12
 8003ed6:	bd90      	pop	{r4, r7, pc}
 8003ed8:	e000e100 	.word	0xe000e100
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	045b      	lsls	r3, r3, #17
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d301      	bcc.n	8003ef8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e010      	b.n	8003f1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <SysTick_Config+0x44>)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	3a01      	subs	r2, #1
 8003efe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f00:	2301      	movs	r3, #1
 8003f02:	425b      	negs	r3, r3
 8003f04:	2103      	movs	r1, #3
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7ff ff7c 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <SysTick_Config+0x44>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <SysTick_Config+0x44>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	e000e010 	.word	0xe000e010

08003f28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	210f      	movs	r1, #15
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	1c02      	adds	r2, r0, #0
 8003f38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff ff5d 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff ffbf 	bl	8003ee0 <SysTick_Config>
 8003f62:	0003      	movs	r3, r0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b002      	add	sp, #8
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f82:	e155      	b.n	8004230 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4091      	lsls	r1, r2
 8003f8e:	000a      	movs	r2, r1
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d100      	bne.n	8003f9c <HAL_GPIO_Init+0x30>
 8003f9a:	e146      	b.n	800422a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d005      	beq.n	8003fb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2203      	movs	r2, #3
 8003fae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d130      	bne.n	8004016 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	0013      	movs	r3, r2
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fea:	2201      	movs	r2, #1
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	0013      	movs	r3, r2
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	2201      	movs	r2, #1
 8004002:	401a      	ands	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2203      	movs	r2, #3
 800401c:	4013      	ands	r3, r2
 800401e:	2b03      	cmp	r3, #3
 8004020:	d017      	beq.n	8004052 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	409a      	lsls	r2, r3
 8004030:	0013      	movs	r3, r2
 8004032:	43da      	mvns	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	0013      	movs	r3, r2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2203      	movs	r2, #3
 8004058:	4013      	ands	r3, r2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d123      	bne.n	80040a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	08da      	lsrs	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3208      	adds	r2, #8
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	58d3      	ldr	r3, [r2, r3]
 800406a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2207      	movs	r2, #7
 8004070:	4013      	ands	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	409a      	lsls	r2, r3
 8004078:	0013      	movs	r3, r2
 800407a:	43da      	mvns	r2, r3
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2107      	movs	r1, #7
 800408a:	400b      	ands	r3, r1
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	409a      	lsls	r2, r3
 8004090:	0013      	movs	r3, r2
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	08da      	lsrs	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3208      	adds	r2, #8
 80040a0:	0092      	lsls	r2, r2, #2
 80040a2:	6939      	ldr	r1, [r7, #16]
 80040a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	2203      	movs	r2, #3
 80040b2:	409a      	lsls	r2, r3
 80040b4:	0013      	movs	r3, r2
 80040b6:	43da      	mvns	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2203      	movs	r2, #3
 80040c4:	401a      	ands	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	0013      	movs	r3, r2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	23c0      	movs	r3, #192	; 0xc0
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	4013      	ands	r3, r2
 80040e4:	d100      	bne.n	80040e8 <HAL_GPIO_Init+0x17c>
 80040e6:	e0a0      	b.n	800422a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e8:	4b57      	ldr	r3, [pc, #348]	; (8004248 <HAL_GPIO_Init+0x2dc>)
 80040ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ec:	4b56      	ldr	r3, [pc, #344]	; (8004248 <HAL_GPIO_Init+0x2dc>)
 80040ee:	2101      	movs	r1, #1
 80040f0:	430a      	orrs	r2, r1
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f4:	4a55      	ldr	r2, [pc, #340]	; (800424c <HAL_GPIO_Init+0x2e0>)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	589b      	ldr	r3, [r3, r2]
 8004100:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2203      	movs	r2, #3
 8004106:	4013      	ands	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	409a      	lsls	r2, r3
 800410e:	0013      	movs	r3, r2
 8004110:	43da      	mvns	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	23a0      	movs	r3, #160	; 0xa0
 800411c:	05db      	lsls	r3, r3, #23
 800411e:	429a      	cmp	r2, r3
 8004120:	d01f      	beq.n	8004162 <HAL_GPIO_Init+0x1f6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <HAL_GPIO_Init+0x2e4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d019      	beq.n	800415e <HAL_GPIO_Init+0x1f2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a49      	ldr	r2, [pc, #292]	; (8004254 <HAL_GPIO_Init+0x2e8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_GPIO_Init+0x1ee>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a48      	ldr	r2, [pc, #288]	; (8004258 <HAL_GPIO_Init+0x2ec>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00d      	beq.n	8004156 <HAL_GPIO_Init+0x1ea>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a47      	ldr	r2, [pc, #284]	; (800425c <HAL_GPIO_Init+0x2f0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <HAL_GPIO_Init+0x1e6>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a46      	ldr	r2, [pc, #280]	; (8004260 <HAL_GPIO_Init+0x2f4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_GPIO_Init+0x1e2>
 800414a:	2305      	movs	r3, #5
 800414c:	e00a      	b.n	8004164 <HAL_GPIO_Init+0x1f8>
 800414e:	2306      	movs	r3, #6
 8004150:	e008      	b.n	8004164 <HAL_GPIO_Init+0x1f8>
 8004152:	2304      	movs	r3, #4
 8004154:	e006      	b.n	8004164 <HAL_GPIO_Init+0x1f8>
 8004156:	2303      	movs	r3, #3
 8004158:	e004      	b.n	8004164 <HAL_GPIO_Init+0x1f8>
 800415a:	2302      	movs	r3, #2
 800415c:	e002      	b.n	8004164 <HAL_GPIO_Init+0x1f8>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_GPIO_Init+0x1f8>
 8004162:	2300      	movs	r3, #0
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	2103      	movs	r1, #3
 8004168:	400a      	ands	r2, r1
 800416a:	0092      	lsls	r2, r2, #2
 800416c:	4093      	lsls	r3, r2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004174:	4935      	ldr	r1, [pc, #212]	; (800424c <HAL_GPIO_Init+0x2e0>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	3302      	adds	r3, #2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43da      	mvns	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	025b      	lsls	r3, r3, #9
 800419a:	4013      	ands	r3, r2
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	43da      	mvns	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	4013      	ands	r3, r2
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	43da      	mvns	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	035b      	lsls	r3, r3, #13
 80041ee:	4013      	ands	r3, r2
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	43da      	mvns	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	039b      	lsls	r3, r3, #14
 8004218:	4013      	ands	r3, r2
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_GPIO_Init+0x2f8>)
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3301      	adds	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	40da      	lsrs	r2, r3
 8004238:	1e13      	subs	r3, r2, #0
 800423a:	d000      	beq.n	800423e <HAL_GPIO_Init+0x2d2>
 800423c:	e6a2      	b.n	8003f84 <HAL_GPIO_Init+0x18>
  }
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b006      	add	sp, #24
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	40010000 	.word	0x40010000
 8004250:	50000400 	.word	0x50000400
 8004254:	50000800 	.word	0x50000800
 8004258:	50000c00 	.word	0x50000c00
 800425c:	50001000 	.word	0x50001000
 8004260:	50001c00 	.word	0x50001c00
 8004264:	40010400 	.word	0x40010400

08004268 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	0008      	movs	r0, r1
 8004272:	0011      	movs	r1, r2
 8004274:	1cbb      	adds	r3, r7, #2
 8004276:	1c02      	adds	r2, r0, #0
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	1c7b      	adds	r3, r7, #1
 800427c:	1c0a      	adds	r2, r1, #0
 800427e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004280:	1c7b      	adds	r3, r7, #1
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004288:	1cbb      	adds	r3, r7, #2
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004290:	e003      	b.n	800429a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004292:	1cbb      	adds	r3, r7, #2
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f000 fbbf 	bl	8004a36 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b8:	4bc9      	ldr	r3, [pc, #804]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	220c      	movs	r2, #12
 80042be:	4013      	ands	r3, r2
 80042c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c2:	4bc7      	ldr	r3, [pc, #796]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	025b      	lsls	r3, r3, #9
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	d100      	bne.n	80042da <HAL_RCC_OscConfig+0x36>
 80042d8:	e07e      	b.n	80043d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d007      	beq.n	80042f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d112      	bne.n	800430c <HAL_RCC_OscConfig+0x68>
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	025b      	lsls	r3, r3, #9
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10d      	bne.n	800430c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	4bbb      	ldr	r3, [pc, #748]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	4013      	ands	r3, r2
 80042fa:	d100      	bne.n	80042fe <HAL_RCC_OscConfig+0x5a>
 80042fc:	e06b      	b.n	80043d6 <HAL_RCC_OscConfig+0x132>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d167      	bne.n	80043d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f000 fb95 	bl	8004a36 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	025b      	lsls	r3, r3, #9
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x84>
 8004318:	4bb1      	ldr	r3, [pc, #708]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4bb0      	ldr	r3, [pc, #704]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	0249      	lsls	r1, r1, #9
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e027      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	23a0      	movs	r3, #160	; 0xa0
 800432e:	02db      	lsls	r3, r3, #11
 8004330:	429a      	cmp	r2, r3
 8004332:	d10e      	bne.n	8004352 <HAL_RCC_OscConfig+0xae>
 8004334:	4baa      	ldr	r3, [pc, #680]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4ba9      	ldr	r3, [pc, #676]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	02c9      	lsls	r1, r1, #11
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	4ba7      	ldr	r3, [pc, #668]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4ba6      	ldr	r3, [pc, #664]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	0249      	lsls	r1, r1, #9
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e012      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 8004352:	4ba3      	ldr	r3, [pc, #652]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4ba2      	ldr	r3, [pc, #648]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004358:	49a2      	ldr	r1, [pc, #648]	; (80045e4 <HAL_RCC_OscConfig+0x340>)
 800435a:	400a      	ands	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	4ba0      	ldr	r3, [pc, #640]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	025b      	lsls	r3, r3, #9
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4b9c      	ldr	r3, [pc, #624]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b9b      	ldr	r3, [pc, #620]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004372:	499d      	ldr	r1, [pc, #628]	; (80045e8 <HAL_RCC_OscConfig+0x344>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7ff f97a 	bl	8003678 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004388:	e009      	b.n	800439e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438a:	f7ff f975 	bl	8003678 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d902      	bls.n	800439e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	f000 fb4c 	bl	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800439e:	4b90      	ldr	r3, [pc, #576]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	4013      	ands	r3, r2
 80043a8:	d0ef      	beq.n	800438a <HAL_RCC_OscConfig+0xe6>
 80043aa:	e015      	b.n	80043d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7ff f964 	bl	8003678 <HAL_GetTick>
 80043b0:	0003      	movs	r3, r0
 80043b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b6:	f7ff f95f 	bl	8003678 <HAL_GetTick>
 80043ba:	0002      	movs	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b64      	cmp	r3, #100	; 0x64
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e336      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043c8:	4b85      	ldr	r3, [pc, #532]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	4013      	ands	r3, r2
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x112>
 80043d4:	e000      	b.n	80043d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2202      	movs	r2, #2
 80043de:	4013      	ands	r3, r2
 80043e0:	d100      	bne.n	80043e4 <HAL_RCC_OscConfig+0x140>
 80043e2:	e099      	b.n	8004518 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	2220      	movs	r2, #32
 80043ee:	4013      	ands	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80043f2:	4b7b      	ldr	r3, [pc, #492]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b7a      	ldr	r3, [pc, #488]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80043f8:	2120      	movs	r1, #32
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	2220      	movs	r2, #32
 8004402:	4393      	bics	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d005      	beq.n	8004418 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d13e      	bne.n	8004490 <HAL_RCC_OscConfig+0x1ec>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d13b      	bne.n	8004490 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004418:	4b71      	ldr	r3, [pc, #452]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2204      	movs	r2, #4
 800441e:	4013      	ands	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_RCC_OscConfig+0x188>
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e304      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b6c      	ldr	r3, [pc, #432]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_RCC_OscConfig+0x348>)
 8004432:	4013      	ands	r3, r2
 8004434:	0019      	movs	r1, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004442:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2209      	movs	r2, #9
 8004448:	4393      	bics	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004454:	f000 fc42 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004458:	0001      	movs	r1, r0
 800445a:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	220f      	movs	r2, #15
 8004462:	4013      	ands	r3, r2
 8004464:	4a62      	ldr	r2, [pc, #392]	; (80045f0 <HAL_RCC_OscConfig+0x34c>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	000a      	movs	r2, r1
 800446a:	40da      	lsrs	r2, r3
 800446c:	4b61      	ldr	r3, [pc, #388]	; (80045f4 <HAL_RCC_OscConfig+0x350>)
 800446e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004470:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_RCC_OscConfig+0x354>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2513      	movs	r5, #19
 8004476:	197c      	adds	r4, r7, r5
 8004478:	0018      	movs	r0, r3
 800447a:	f7ff f8b7 	bl	80035ec <HAL_InitTick>
 800447e:	0003      	movs	r3, r0
 8004480:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004482:	197b      	adds	r3, r7, r5
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d046      	beq.n	8004518 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800448a:	197b      	adds	r3, r7, r5
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	e2d2      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d027      	beq.n	80044e6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004496:	4b52      	ldr	r3, [pc, #328]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2209      	movs	r2, #9
 800449c:	4393      	bics	r3, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	4b4f      	ldr	r3, [pc, #316]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7ff f8e6 	bl	8003678 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b2:	f7ff f8e1 	bl	8003678 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e2b8      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c4:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2204      	movs	r2, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	d0f1      	beq.n	80044b2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b44      	ldr	r3, [pc, #272]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4a46      	ldr	r2, [pc, #280]	; (80045ec <HAL_RCC_OscConfig+0x348>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	e018      	b.n	8004518 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b3e      	ldr	r3, [pc, #248]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80044ec:	2101      	movs	r1, #1
 80044ee:	438a      	bics	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f2:	f7ff f8c1 	bl	8003678 <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fc:	f7ff f8bc 	bl	8003678 <HAL_GetTick>
 8004500:	0002      	movs	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e293      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800450e:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2204      	movs	r2, #4
 8004514:	4013      	ands	r3, r2
 8004516:	d1f1      	bne.n	80044fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	4013      	ands	r3, r2
 8004520:	d100      	bne.n	8004524 <HAL_RCC_OscConfig+0x280>
 8004522:	e0a2      	b.n	800466a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d140      	bne.n	80045ac <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4013      	ands	r3, r2
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x29e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e279      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4a2d      	ldr	r2, [pc, #180]	; (80045fc <HAL_RCC_OscConfig+0x358>)
 8004548:	4013      	ands	r3, r2
 800454a:	0019      	movs	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	0a19      	lsrs	r1, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	061a      	lsls	r2, r3, #24
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	0b5b      	lsrs	r3, r3, #13
 8004570:	3301      	adds	r3, #1
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	0212      	lsls	r2, r2, #8
 8004576:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004578:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	210f      	movs	r1, #15
 8004580:	400b      	ands	r3, r1
 8004582:	491b      	ldr	r1, [pc, #108]	; (80045f0 <HAL_RCC_OscConfig+0x34c>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_RCC_OscConfig+0x350>)
 800458a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCC_OscConfig+0x354>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2513      	movs	r5, #19
 8004592:	197c      	adds	r4, r7, r5
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff f829 	bl	80035ec <HAL_InitTick>
 800459a:	0003      	movs	r3, r0
 800459c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800459e:	197b      	adds	r3, r7, r5
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d061      	beq.n	800466a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80045a6:	197b      	adds	r3, r7, r5
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	e244      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d040      	beq.n	8004636 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x33c>)
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	0049      	lsls	r1, r1, #1
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7ff f859 	bl	8003678 <HAL_GetTick>
 80045c6:	0003      	movs	r3, r0
 80045c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ca:	e019      	b.n	8004600 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045cc:	f7ff f854 	bl	8003678 <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d912      	bls.n	8004600 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e22b      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40021000 	.word	0x40021000
 80045e4:	fffeffff 	.word	0xfffeffff
 80045e8:	fffbffff 	.word	0xfffbffff
 80045ec:	ffffe0ff 	.word	0xffffe0ff
 80045f0:	08006cdc 	.word	0x08006cdc
 80045f4:	20000000 	.word	0x20000000
 80045f8:	20000004 	.word	0x20000004
 80045fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004600:	4bca      	ldr	r3, [pc, #808]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4013      	ands	r3, r2
 800460a:	d0df      	beq.n	80045cc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460c:	4bc7      	ldr	r3, [pc, #796]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4ac7      	ldr	r2, [pc, #796]	; (8004930 <HAL_RCC_OscConfig+0x68c>)
 8004612:	4013      	ands	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800461a:	4bc4      	ldr	r3, [pc, #784]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004620:	4bc2      	ldr	r3, [pc, #776]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	0a19      	lsrs	r1, r3, #8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	061a      	lsls	r2, r3, #24
 800462e:	4bbf      	ldr	r3, [pc, #764]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	e019      	b.n	800466a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004636:	4bbd      	ldr	r3, [pc, #756]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4bbc      	ldr	r3, [pc, #752]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800463c:	49bd      	ldr	r1, [pc, #756]	; (8004934 <HAL_RCC_OscConfig+0x690>)
 800463e:	400a      	ands	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7ff f819 	bl	8003678 <HAL_GetTick>
 8004646:	0003      	movs	r3, r0
 8004648:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464c:	f7ff f814 	bl	8003678 <HAL_GetTick>
 8004650:	0002      	movs	r2, r0
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1eb      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800465e:	4bb3      	ldr	r3, [pc, #716]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4013      	ands	r3, r2
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2208      	movs	r2, #8
 8004670:	4013      	ands	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d019      	beq.n	80046b0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467c:	4bab      	ldr	r3, [pc, #684]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800467e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004680:	4baa      	ldr	r3, [pc, #680]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004682:	2101      	movs	r1, #1
 8004684:	430a      	orrs	r2, r1
 8004686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fe fff6 	bl	8003678 <HAL_GetTick>
 800468c:	0003      	movs	r3, r0
 800468e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004692:	f7fe fff1 	bl	8003678 <HAL_GetTick>
 8004696:	0002      	movs	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1c8      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046a4:	4ba1      	ldr	r3, [pc, #644]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	2202      	movs	r2, #2
 80046aa:	4013      	ands	r3, r2
 80046ac:	d0f1      	beq.n	8004692 <HAL_RCC_OscConfig+0x3ee>
 80046ae:	e018      	b.n	80046e2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b0:	4b9e      	ldr	r3, [pc, #632]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80046b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046b4:	4b9d      	ldr	r3, [pc, #628]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80046b6:	2101      	movs	r1, #1
 80046b8:	438a      	bics	r2, r1
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fe ffdc 	bl	8003678 <HAL_GetTick>
 80046c0:	0003      	movs	r3, r0
 80046c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fe ffd7 	bl	8003678 <HAL_GetTick>
 80046ca:	0002      	movs	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e1ae      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d8:	4b94      	ldr	r3, [pc, #592]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	2202      	movs	r2, #2
 80046de:	4013      	ands	r3, r2
 80046e0:	d1f1      	bne.n	80046c6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	d100      	bne.n	80046ee <HAL_RCC_OscConfig+0x44a>
 80046ec:	e0ae      	b.n	800484c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2023      	movs	r0, #35	; 0x23
 80046f0:	183b      	adds	r3, r7, r0
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b8d      	ldr	r3, [pc, #564]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80046f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	055b      	lsls	r3, r3, #21
 80046fe:	4013      	ands	r3, r2
 8004700:	d109      	bne.n	8004716 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b8a      	ldr	r3, [pc, #552]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004706:	4b89      	ldr	r3, [pc, #548]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0549      	lsls	r1, r1, #21
 800470c:	430a      	orrs	r2, r1
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004710:	183b      	adds	r3, r7, r0
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004716:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCC_OscConfig+0x694>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4013      	ands	r3, r2
 8004720:	d11a      	bne.n	8004758 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004722:	4b85      	ldr	r3, [pc, #532]	; (8004938 <HAL_RCC_OscConfig+0x694>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b84      	ldr	r3, [pc, #528]	; (8004938 <HAL_RCC_OscConfig+0x694>)
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	0049      	lsls	r1, r1, #1
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004730:	f7fe ffa2 	bl	8003678 <HAL_GetTick>
 8004734:	0003      	movs	r3, r0
 8004736:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473a:	f7fe ff9d 	bl	8003678 <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b64      	cmp	r3, #100	; 0x64
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e174      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	4b7a      	ldr	r3, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x694>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	429a      	cmp	r2, r3
 8004762:	d107      	bne.n	8004774 <HAL_RCC_OscConfig+0x4d0>
 8004764:	4b71      	ldr	r3, [pc, #452]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004768:	4b70      	ldr	r3, [pc, #448]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800476a:	2180      	movs	r1, #128	; 0x80
 800476c:	0049      	lsls	r1, r1, #1
 800476e:	430a      	orrs	r2, r1
 8004770:	651a      	str	r2, [r3, #80]	; 0x50
 8004772:	e031      	b.n	80047d8 <HAL_RCC_OscConfig+0x534>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10c      	bne.n	8004796 <HAL_RCC_OscConfig+0x4f2>
 800477c:	4b6b      	ldr	r3, [pc, #428]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800477e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004780:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004782:	496c      	ldr	r1, [pc, #432]	; (8004934 <HAL_RCC_OscConfig+0x690>)
 8004784:	400a      	ands	r2, r1
 8004786:	651a      	str	r2, [r3, #80]	; 0x50
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800478a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800478c:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800478e:	496b      	ldr	r1, [pc, #428]	; (800493c <HAL_RCC_OscConfig+0x698>)
 8004790:	400a      	ands	r2, r1
 8004792:	651a      	str	r2, [r3, #80]	; 0x50
 8004794:	e020      	b.n	80047d8 <HAL_RCC_OscConfig+0x534>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	23a0      	movs	r3, #160	; 0xa0
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	429a      	cmp	r2, r3
 80047a0:	d10e      	bne.n	80047c0 <HAL_RCC_OscConfig+0x51c>
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047a6:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	00c9      	lsls	r1, r1, #3
 80047ac:	430a      	orrs	r2, r1
 80047ae:	651a      	str	r2, [r3, #80]	; 0x50
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047b4:	4b5d      	ldr	r3, [pc, #372]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	0049      	lsls	r1, r1, #1
 80047ba:	430a      	orrs	r2, r1
 80047bc:	651a      	str	r2, [r3, #80]	; 0x50
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0x534>
 80047c0:	4b5a      	ldr	r3, [pc, #360]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047c6:	495b      	ldr	r1, [pc, #364]	; (8004934 <HAL_RCC_OscConfig+0x690>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50
 80047cc:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047d0:	4b56      	ldr	r3, [pc, #344]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80047d2:	495a      	ldr	r1, [pc, #360]	; (800493c <HAL_RCC_OscConfig+0x698>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e0:	f7fe ff4a 	bl	8003678 <HAL_GetTick>
 80047e4:	0003      	movs	r3, r0
 80047e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e8:	e009      	b.n	80047fe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fe ff45 	bl	8003678 <HAL_GetTick>
 80047ee:	0002      	movs	r2, r0
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	4a52      	ldr	r2, [pc, #328]	; (8004940 <HAL_RCC_OscConfig+0x69c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e11b      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fe:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4013      	ands	r3, r2
 8004808:	d0ef      	beq.n	80047ea <HAL_RCC_OscConfig+0x546>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe ff34 	bl	8003678 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004814:	e009      	b.n	800482a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe ff2f 	bl	8003678 <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_RCC_OscConfig+0x69c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e105      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800482a:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800482c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4013      	ands	r3, r2
 8004834:	d1ef      	bne.n	8004816 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004836:	2323      	movs	r3, #35	; 0x23
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004840:	4b3a      	ldr	r3, [pc, #232]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004846:	493f      	ldr	r1, [pc, #252]	; (8004944 <HAL_RCC_OscConfig+0x6a0>)
 8004848:	400a      	ands	r2, r1
 800484a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2220      	movs	r2, #32
 8004852:	4013      	ands	r3, r2
 8004854:	d049      	beq.n	80048ea <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d026      	beq.n	80048ac <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b32      	ldr	r3, [pc, #200]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004864:	2101      	movs	r1, #1
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
 800486a:	4b30      	ldr	r3, [pc, #192]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800486c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486e:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004870:	2101      	movs	r1, #1
 8004872:	430a      	orrs	r2, r1
 8004874:	635a      	str	r2, [r3, #52]	; 0x34
 8004876:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_RCC_OscConfig+0x6a4>)
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	4b33      	ldr	r3, [pc, #204]	; (8004948 <HAL_RCC_OscConfig+0x6a4>)
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	0189      	lsls	r1, r1, #6
 8004880:	430a      	orrs	r2, r1
 8004882:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fe fef8 	bl	8003678 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800488e:	f7fe fef3 	bl	8003678 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0ca      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048a0:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d0f1      	beq.n	800488e <HAL_RCC_OscConfig+0x5ea>
 80048aa:	e01e      	b.n	80048ea <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80048ac:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	4b1e      	ldr	r3, [pc, #120]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80048b2:	2101      	movs	r1, #1
 80048b4:	438a      	bics	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_RCC_OscConfig+0x6a4>)
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	4b22      	ldr	r3, [pc, #136]	; (8004948 <HAL_RCC_OscConfig+0x6a4>)
 80048be:	4923      	ldr	r1, [pc, #140]	; (800494c <HAL_RCC_OscConfig+0x6a8>)
 80048c0:	400a      	ands	r2, r1
 80048c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fe fed8 	bl	8003678 <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ce:	f7fe fed3 	bl	8003678 <HAL_GetTick>
 80048d2:	0002      	movs	r2, r0
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0aa      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_OscConfig+0x688>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2202      	movs	r2, #2
 80048e6:	4013      	ands	r3, r2
 80048e8:	d1f1      	bne.n	80048ce <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d100      	bne.n	80048f4 <HAL_RCC_OscConfig+0x650>
 80048f2:	e09f      	b.n	8004a34 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d100      	bne.n	80048fc <HAL_RCC_OscConfig+0x658>
 80048fa:	e078      	b.n	80049ee <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	2b02      	cmp	r3, #2
 8004902:	d159      	bne.n	80049b8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCC_OscConfig+0x688>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_RCC_OscConfig+0x688>)
 800490a:	4911      	ldr	r1, [pc, #68]	; (8004950 <HAL_RCC_OscConfig+0x6ac>)
 800490c:	400a      	ands	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fe feb2 	bl	8003678 <HAL_GetTick>
 8004914:	0003      	movs	r3, r0
 8004916:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491a:	f7fe fead 	bl	8003678 <HAL_GetTick>
 800491e:	0002      	movs	r2, r0
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d915      	bls.n	8004954 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e084      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
 800492c:	40021000 	.word	0x40021000
 8004930:	ffff1fff 	.word	0xffff1fff
 8004934:	fffffeff 	.word	0xfffffeff
 8004938:	40007000 	.word	0x40007000
 800493c:	fffffbff 	.word	0xfffffbff
 8004940:	00001388 	.word	0x00001388
 8004944:	efffffff 	.word	0xefffffff
 8004948:	40010000 	.word	0x40010000
 800494c:	ffffdfff 	.word	0xffffdfff
 8004950:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004954:	4b3a      	ldr	r3, [pc, #232]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	049b      	lsls	r3, r3, #18
 800495c:	4013      	ands	r3, r2
 800495e:	d1dc      	bne.n	800491a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a37      	ldr	r2, [pc, #220]	; (8004a44 <HAL_RCC_OscConfig+0x7a0>)
 8004966:	4013      	ands	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	431a      	orrs	r2, r3
 800497a:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 800497c:	430a      	orrs	r2, r1
 800497e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	0449      	lsls	r1, r1, #17
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe fe73 	bl	8003678 <HAL_GetTick>
 8004992:	0003      	movs	r3, r0
 8004994:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fe fe6e 	bl	8003678 <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e045      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049aa:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	049b      	lsls	r3, r3, #18
 80049b2:	4013      	ands	r3, r2
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x6f4>
 80049b6:	e03d      	b.n	8004a34 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 80049be:	4922      	ldr	r1, [pc, #136]	; (8004a48 <HAL_RCC_OscConfig+0x7a4>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe fe58 	bl	8003678 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe fe53 	bl	8003678 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e02a      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	049b      	lsls	r3, r3, #18
 80049e8:	4013      	ands	r3, r2
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x72a>
 80049ec:	e022      	b.n	8004a34 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e01d      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <HAL_RCC_OscConfig+0x79c>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	025b      	lsls	r3, r3, #9
 8004a06:	401a      	ands	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d10f      	bne.n	8004a30 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	23f0      	movs	r3, #240	; 0xf0
 8004a14:	039b      	lsls	r3, r3, #14
 8004a16:	401a      	ands	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	23c0      	movs	r3, #192	; 0xc0
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	401a      	ands	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b00a      	add	sp, #40	; 0x28
 8004a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	40021000 	.word	0x40021000
 8004a44:	ff02ffff 	.word	0xff02ffff
 8004a48:	feffffff 	.word	0xfeffffff

08004a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a4c:	b5b0      	push	{r4, r5, r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e128      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a60:	4b96      	ldr	r3, [pc, #600]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d91e      	bls.n	8004aac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b93      	ldr	r3, [pc, #588]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4393      	bics	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	4b90      	ldr	r3, [pc, #576]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a80:	f7fe fdfa 	bl	8003678 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a88:	e009      	b.n	8004a9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8a:	f7fe fdf5 	bl	8003678 <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a8a      	ldr	r2, [pc, #552]	; (8004cc0 <HAL_RCC_ClockConfig+0x274>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e109      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b87      	ldr	r3, [pc, #540]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1ee      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab6:	4b83      	ldr	r3, [pc, #524]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	22f0      	movs	r2, #240	; 0xf0
 8004abc:	4393      	bics	r3, r2
 8004abe:	0019      	movs	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0x8a>
 8004ad4:	e089      	b.n	8004bea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ade:	4b79      	ldr	r3, [pc, #484]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d120      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0e1      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d107      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af6:	4b73      	ldr	r3, [pc, #460]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	049b      	lsls	r3, r3, #18
 8004afe:	4013      	ands	r3, r2
 8004b00:	d114      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0d5      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0e:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2204      	movs	r2, #4
 8004b14:	4013      	ands	r3, r2
 8004b16:	d109      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0ca      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b1c:	4b69      	ldr	r3, [pc, #420]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0c2      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2c:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2203      	movs	r2, #3
 8004b32:	4393      	bics	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	4b62      	ldr	r3, [pc, #392]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fe fd9a 	bl	8003678 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d111      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b52:	f7fe fd91 	bl	8003678 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <HAL_RCC_ClockConfig+0x274>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0a5      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b66:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d1ef      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x106>
 8004b72:	e03a      	b.n	8004bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d111      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b7c:	e009      	b.n	8004b92 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7e:	f7fe fd7b 	bl	8003678 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	4a4d      	ldr	r2, [pc, #308]	; (8004cc0 <HAL_RCC_ClockConfig+0x274>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e08f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b92:	4b4c      	ldr	r3, [pc, #304]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	220c      	movs	r2, #12
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d1ef      	bne.n	8004b7e <HAL_RCC_ClockConfig+0x132>
 8004b9e:	e024      	b.n	8004bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d11b      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ba8:	e009      	b.n	8004bbe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004baa:	f7fe fd65 	bl	8003678 <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	4a42      	ldr	r2, [pc, #264]	; (8004cc0 <HAL_RCC_ClockConfig+0x274>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e079      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bbe:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	220c      	movs	r2, #12
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d1ef      	bne.n	8004baa <HAL_RCC_ClockConfig+0x15e>
 8004bca:	e00e      	b.n	8004bea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bcc:	f7fe fd54 	bl	8003678 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	; (8004cc0 <HAL_RCC_ClockConfig+0x274>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e068      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004be0:	4b38      	ldr	r3, [pc, #224]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	220c      	movs	r2, #12
 8004be6:	4013      	ands	r3, r2
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bea:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d21e      	bcs.n	8004c36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf8:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4393      	bics	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	4b2e      	ldr	r3, [pc, #184]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c0a:	f7fe fd35 	bl	8003678 <HAL_GetTick>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c12:	e009      	b.n	8004c28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fe fd30 	bl	8003678 <HAL_GetTick>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <HAL_RCC_ClockConfig+0x274>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e044      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c28:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCC_ClockConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <HAL_RCC_ClockConfig+0x27c>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c5e:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <HAL_RCC_ClockConfig+0x280>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	0019      	movs	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	00da      	lsls	r2, r3, #3
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004c70:	430a      	orrs	r2, r1
 8004c72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c74:	f000 f832 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004c78:	0001      	movs	r1, r0
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCC_ClockConfig+0x278>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	091b      	lsrs	r3, r3, #4
 8004c80:	220f      	movs	r2, #15
 8004c82:	4013      	ands	r3, r2
 8004c84:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <HAL_RCC_ClockConfig+0x284>)
 8004c86:	5cd3      	ldrb	r3, [r2, r3]
 8004c88:	000a      	movs	r2, r1
 8004c8a:	40da      	lsrs	r2, r3
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_RCC_ClockConfig+0x288>)
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCC_ClockConfig+0x28c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	250b      	movs	r5, #11
 8004c96:	197c      	adds	r4, r7, r5
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7fe fca7 	bl	80035ec <HAL_InitTick>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ca2:	197b      	adds	r3, r7, r5
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004caa:	197b      	adds	r3, r7, r5
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	00001388 	.word	0x00001388
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	fffff8ff 	.word	0xfffff8ff
 8004ccc:	ffffc7ff 	.word	0xffffc7ff
 8004cd0:	08006cdc 	.word	0x08006cdc
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	20000004 	.word	0x20000004

08004cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cdc:	b5b0      	push	{r4, r5, r7, lr}
 8004cde:	b08e      	sub	sp, #56	; 0x38
 8004ce0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cea:	230c      	movs	r3, #12
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d014      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x40>
 8004cf2:	d900      	bls.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x1a>
 8004cf4:	e07b      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0x112>
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x24>
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d00b      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfe:	e076      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004d00:	4b44      	ldr	r3, [pc, #272]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2210      	movs	r2, #16
 8004d06:	4013      	ands	r3, r2
 8004d08:	d002      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004d0a:	4b43      	ldr	r3, [pc, #268]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004d0e:	e07c      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004d10:	4b42      	ldr	r3, [pc, #264]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x140>)
 8004d12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d14:	e079      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d16:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x144>)
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d1a:	e076      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	0c9a      	lsrs	r2, r3, #18
 8004d20:	230f      	movs	r3, #15
 8004d22:	401a      	ands	r2, r3
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x148>)
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	0d9a      	lsrs	r2, r3, #22
 8004d2e:	2303      	movs	r3, #3
 8004d30:	4013      	ands	r3, r2
 8004d32:	3301      	adds	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d36:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	025b      	lsls	r3, r3, #9
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d01a      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	4a35      	ldr	r2, [pc, #212]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x144>)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	69b8      	ldr	r0, [r7, #24]
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	f7fb fb79 	bl	8000448 <__aeabi_lmul>
 8004d56:	0002      	movs	r2, r0
 8004d58:	000b      	movs	r3, r1
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f7fb fb4d 	bl	8000408 <__aeabi_uldivmod>
 8004d6e:	0002      	movs	r2, r0
 8004d70:	000b      	movs	r3, r1
 8004d72:	0013      	movs	r3, r2
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
 8004d76:	e037      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004d78:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2210      	movs	r2, #16
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d01a      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	68b8      	ldr	r0, [r7, #8]
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	f7fb fb59 	bl	8000448 <__aeabi_lmul>
 8004d96:	0002      	movs	r2, r0
 8004d98:	000b      	movs	r3, r1
 8004d9a:	0010      	movs	r0, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f7fb fb2d 	bl	8000408 <__aeabi_uldivmod>
 8004dae:	0002      	movs	r2, r0
 8004db0:	000b      	movs	r3, r1
 8004db2:	0013      	movs	r3, r2
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
 8004db6:	e017      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	0018      	movs	r0, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x140>)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f7fb fb40 	bl	8000448 <__aeabi_lmul>
 8004dc8:	0002      	movs	r2, r0
 8004dca:	000b      	movs	r3, r1
 8004dcc:	0010      	movs	r0, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	001c      	movs	r4, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	001d      	movs	r5, r3
 8004dd8:	0022      	movs	r2, r4
 8004dda:	002b      	movs	r3, r5
 8004ddc:	f7fb fb14 	bl	8000408 <__aeabi_uldivmod>
 8004de0:	0002      	movs	r2, r0
 8004de2:	000b      	movs	r3, r1
 8004de4:	0013      	movs	r3, r2
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dec:	e00d      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	2207      	movs	r2, #7
 8004df6:	4013      	ands	r3, r2
 8004df8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	0212      	lsls	r2, r2, #8
 8004e02:	409a      	lsls	r2, r3
 8004e04:	0013      	movs	r3, r2
 8004e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e08:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b00e      	add	sp, #56	; 0x38
 8004e12:	bdb0      	pop	{r4, r5, r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	003d0900 	.word	0x003d0900
 8004e1c:	00f42400 	.word	0x00f42400
 8004e20:	007a1200 	.word	0x007a1200
 8004e24:	08006cf4 	.word	0x08006cf4

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	20000000 	.word	0x20000000

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e40:	f7ff fff2 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e44:	0001      	movs	r1, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	4013      	ands	r3, r2
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	40d9      	lsrs	r1, r3
 8004e56:	000b      	movs	r3, r1
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	40021000 	.word	0x40021000
 8004e64:	08006cec 	.word	0x08006cec

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e6c:	f7ff ffdc 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e70:	0001      	movs	r1, r0
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	0adb      	lsrs	r3, r3, #11
 8004e78:	2207      	movs	r2, #7
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
 8004e80:	40d9      	lsrs	r1, r3
 8004e82:	000b      	movs	r3, r1
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	08006cec 	.word	0x08006cec

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004e9c:	2317      	movs	r3, #23
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d106      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d100      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004eba:	e0d9      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ebc:	4ba4      	ldr	r3, [pc, #656]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	055b      	lsls	r3, r3, #21
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d10a      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec8:	4ba1      	ldr	r3, [pc, #644]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ecc:	4ba0      	ldr	r3, [pc, #640]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	0549      	lsls	r1, r1, #21
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ed6:	2317      	movs	r3, #23
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d11a      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eea:	4b9a      	ldr	r3, [pc, #616]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	0049      	lsls	r1, r1, #1
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef8:	f7fe fbbe 	bl	8003678 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f00:	e008      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fe fbb9 	bl	8003678 <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	; 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e118      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f14:	4b8f      	ldr	r3, [pc, #572]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004f20:	4b8b      	ldr	r3, [pc, #556]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	23c0      	movs	r3, #192	; 0xc0
 8004f26:	039b      	lsls	r3, r3, #14
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	23c0      	movs	r3, #192	; 0xc0
 8004f32:	039b      	lsls	r3, r3, #14
 8004f34:	4013      	ands	r3, r2
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	23c0      	movs	r3, #192	; 0xc0
 8004f42:	039b      	lsls	r3, r3, #14
 8004f44:	4013      	ands	r3, r2
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d013      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	23c0      	movs	r3, #192	; 0xc0
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	401a      	ands	r2, r3
 8004f56:	23c0      	movs	r3, #192	; 0xc0
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d10a      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f5e:	4b7c      	ldr	r3, [pc, #496]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	401a      	ands	r2, r3
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	029b      	lsls	r3, r3, #10
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0e8      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004f74:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f78:	23c0      	movs	r3, #192	; 0xc0
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d049      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	23c0      	movs	r3, #192	; 0xc0
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	4013      	ands	r3, r2
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d004      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	23c0      	movs	r3, #192	; 0xc0
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	4013      	ands	r3, r2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d034      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d02e      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004fbc:	4b64      	ldr	r3, [pc, #400]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc0:	4a65      	ldr	r2, [pc, #404]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc6:	4b62      	ldr	r3, [pc, #392]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	0309      	lsls	r1, r1, #12
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd4:	4b5e      	ldr	r3, [pc, #376]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fd8:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004fda:	4960      	ldr	r1, [pc, #384]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004fe0:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4013      	ands	r3, r2
 8004fee:	d014      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fe fb42 	bl	8003678 <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ff8:	e009      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ffa:	f7fe fb3d 	bl	8003678 <HAL_GetTick>
 8004ffe:	0002      	movs	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	4a56      	ldr	r2, [pc, #344]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e09b      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800500e:	4b50      	ldr	r3, [pc, #320]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4013      	ands	r3, r2
 8005018:	d0ef      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	23c0      	movs	r3, #192	; 0xc0
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	401a      	ands	r2, r3
 8005024:	23c0      	movs	r3, #192	; 0xc0
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	429a      	cmp	r2, r3
 800502a:	d10c      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800502c:	4b48      	ldr	r3, [pc, #288]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4c      	ldr	r2, [pc, #304]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005032:	4013      	ands	r3, r2
 8005034:	0019      	movs	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	23c0      	movs	r3, #192	; 0xc0
 800503c:	039b      	lsls	r3, r3, #14
 800503e:	401a      	ands	r2, r3
 8005040:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	4b42      	ldr	r3, [pc, #264]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005048:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	23c0      	movs	r3, #192	; 0xc0
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	401a      	ands	r2, r3
 8005054:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005056:	430a      	orrs	r2, r1
 8005058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800505a:	2317      	movs	r3, #23
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d105      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005064:	4b3a      	ldr	r3, [pc, #232]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005068:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800506a:	493f      	ldr	r1, [pc, #252]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800506c:	400a      	ands	r2, r1
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2201      	movs	r2, #1
 8005076:	4013      	ands	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507a:	4b35      	ldr	r3, [pc, #212]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	2203      	movs	r2, #3
 8005080:	4393      	bics	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	4b31      	ldr	r3, [pc, #196]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800508a:	430a      	orrs	r2, r1
 800508c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2202      	movs	r2, #2
 8005094:	4013      	ands	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	220c      	movs	r2, #12
 800509e:	4393      	bics	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050a8:	430a      	orrs	r2, r1
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2204      	movs	r2, #4
 80050b2:	4013      	ands	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b6:	4b26      	ldr	r3, [pc, #152]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	4a2c      	ldr	r2, [pc, #176]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80050bc:	4013      	ands	r3, r2
 80050be:	0019      	movs	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050c6:	430a      	orrs	r2, r1
 80050c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2208      	movs	r2, #8
 80050d0:	4013      	ands	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050d4:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d8:	4a25      	ldr	r2, [pc, #148]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050e4:	430a      	orrs	r2, r1
 80050e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4013      	ands	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	0019      	movs	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005104:	430a      	orrs	r2, r1
 8005106:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2240      	movs	r2, #64	; 0x40
 800510e:	4013      	ands	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	4a17      	ldr	r2, [pc, #92]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005118:	4013      	ands	r3, r2
 800511a:	0019      	movs	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005122:	430a      	orrs	r2, r1
 8005124:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	4013      	ands	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	4a10      	ldr	r2, [pc, #64]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005136:	4013      	ands	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005140:	430a      	orrs	r2, r1
 8005142:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b006      	add	sp, #24
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
 8005158:	fffcffff 	.word	0xfffcffff
 800515c:	fff7ffff 	.word	0xfff7ffff
 8005160:	00001388 	.word	0x00001388
 8005164:	ffcfffff 	.word	0xffcfffff
 8005168:	efffffff 	.word	0xefffffff
 800516c:	fffff3ff 	.word	0xfffff3ff
 8005170:	ffffcfff 	.word	0xffffcfff
 8005174:	fbffffff 	.word	0xfbffffff
 8005178:	fff3ffff 	.word	0xfff3ffff

0800517c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e083      	b.n	8005296 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	2382      	movs	r3, #130	; 0x82
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	429a      	cmp	r2, r3
 80051a0:	d009      	beq.n	80051b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	61da      	str	r2, [r3, #28]
 80051a8:	e005      	b.n	80051b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2251      	movs	r2, #81	; 0x51
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2250      	movs	r2, #80	; 0x50
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7fe f8e4 	bl	80033a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2251      	movs	r2, #81	; 0x51
 80051dc:	2102      	movs	r1, #2
 80051de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2140      	movs	r1, #64	; 0x40
 80051ec:	438a      	bics	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	2382      	movs	r3, #130	; 0x82
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	401a      	ands	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6899      	ldr	r1, [r3, #8]
 80051fe:	2384      	movs	r3, #132	; 0x84
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	400b      	ands	r3, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68d9      	ldr	r1, [r3, #12]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	400b      	ands	r3, r1
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2102      	movs	r1, #2
 8005218:	400b      	ands	r3, r1
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	2101      	movs	r1, #1
 8005222:	400b      	ands	r3, r1
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	400b      	ands	r3, r1
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	2138      	movs	r1, #56	; 0x38
 8005238:	400b      	ands	r3, r1
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	400b      	ands	r3, r1
 8005244:	431a      	orrs	r2, r3
 8005246:	0011      	movs	r1, r2
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	019b      	lsls	r3, r3, #6
 8005250:	401a      	ands	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	2204      	movs	r2, #4
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2210      	movs	r2, #16
 800526c:	401a      	ands	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <HAL_SPI_Init+0x124>)
 8005282:	400a      	ands	r2, r1
 8005284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2251      	movs	r2, #81	; 0x51
 8005290:	2101      	movs	r1, #1
 8005292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	0018      	movs	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	b002      	add	sp, #8
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	fffff7ff 	.word	0xfffff7ff

080052a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	1dbb      	adds	r3, r7, #6
 80052b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052b4:	231f      	movs	r3, #31
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2250      	movs	r2, #80	; 0x50
 80052c0:	5c9b      	ldrb	r3, [r3, r2]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Transmit+0x26>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e13e      	b.n	8005548 <HAL_SPI_Transmit+0x2a4>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2250      	movs	r2, #80	; 0x50
 80052ce:	2101      	movs	r1, #1
 80052d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d2:	f7fe f9d1 	bl	8003678 <HAL_GetTick>
 80052d6:	0003      	movs	r3, r0
 80052d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052da:	2316      	movs	r3, #22
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	1dba      	adds	r2, r7, #6
 80052e0:	8812      	ldrh	r2, [r2, #0]
 80052e2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2251      	movs	r2, #81	; 0x51
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d004      	beq.n	80052fa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80052f0:	231f      	movs	r3, #31
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	2202      	movs	r2, #2
 80052f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80052f8:	e11b      	b.n	8005532 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_SPI_Transmit+0x64>
 8005300:	1dbb      	adds	r3, r7, #6
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005308:	231f      	movs	r3, #31
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005310:	e10f      	b.n	8005532 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2251      	movs	r2, #81	; 0x51
 8005316:	2103      	movs	r1, #3
 8005318:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1dba      	adds	r2, r7, #6
 800532a:	8812      	ldrh	r2, [r2, #0]
 800532c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1dba      	adds	r2, r7, #6
 8005332:	8812      	ldrh	r2, [r2, #0]
 8005334:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	429a      	cmp	r2, r3
 800535e:	d110      	bne.n	8005382 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2140      	movs	r1, #64	; 0x40
 800536c:	438a      	bics	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	01c9      	lsls	r1, r1, #7
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2240      	movs	r2, #64	; 0x40
 800538a:	4013      	ands	r3, r2
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2140      	movs	r1, #64	; 0x40
 800539c:	430a      	orrs	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d14e      	bne.n	800544a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <HAL_SPI_Transmit+0x11a>
 80053b4:	2316      	movs	r3, #22
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d13f      	bne.n	800543e <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	881a      	ldrh	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	1c9a      	adds	r2, r3, #2
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053e2:	e02c      	b.n	800543e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2202      	movs	r2, #2
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d112      	bne.n	8005418 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
 8005416:	e012      	b.n	800543e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005418:	f7fe f92e 	bl	8003678 <HAL_GetTick>
 800541c:	0002      	movs	r2, r0
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d802      	bhi.n	800542e <HAL_SPI_Transmit+0x18a>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	d102      	bne.n	8005434 <HAL_SPI_Transmit+0x190>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8005434:	231f      	movs	r3, #31
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2203      	movs	r2, #3
 800543a:	701a      	strb	r2, [r3, #0]
          goto error;
 800543c:	e079      	b.n	8005532 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1cd      	bne.n	80053e4 <HAL_SPI_Transmit+0x140>
 8005448:	e04f      	b.n	80054ea <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <HAL_SPI_Transmit+0x1b8>
 8005452:	2316      	movs	r3, #22
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d141      	bne.n	80054e0 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005482:	e02d      	b.n	80054e0 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2202      	movs	r2, #2
 800548c:	4013      	ands	r3, r2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d113      	bne.n	80054ba <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	7812      	ldrb	r2, [r2, #0]
 800549e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80054b8:	e012      	b.n	80054e0 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ba:	f7fe f8dd 	bl	8003678 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d802      	bhi.n	80054d0 <HAL_SPI_Transmit+0x22c>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	d102      	bne.n	80054d6 <HAL_SPI_Transmit+0x232>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80054d6:	231f      	movs	r3, #31
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2203      	movs	r2, #3
 80054dc:	701a      	strb	r2, [r3, #0]
          goto error;
 80054de:	e028      	b.n	8005532 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1cc      	bne.n	8005484 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 f8bb 	bl	800566c <SPI_EndRxTxTransaction>
 80054f6:	1e03      	subs	r3, r0, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8005526:	231f      	movs	r3, #31
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e000      	b.n	8005532 <HAL_SPI_Transmit+0x28e>
  }

error:
 8005530:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2251      	movs	r2, #81	; 0x51
 8005536:	2101      	movs	r1, #1
 8005538:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2250      	movs	r2, #80	; 0x50
 800553e:	2100      	movs	r1, #0
 8005540:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005542:	231f      	movs	r3, #31
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b008      	add	sp, #32
 800554e:	bd80      	pop	{r7, pc}

08005550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	1dfb      	adds	r3, r7, #7
 800555e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005560:	f7fe f88a 	bl	8003678 <HAL_GetTick>
 8005564:	0002      	movs	r2, r0
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005570:	f7fe f882 	bl	8003678 <HAL_GetTick>
 8005574:	0003      	movs	r3, r0
 8005576:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005578:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	015b      	lsls	r3, r3, #5
 800557e:	0d1b      	lsrs	r3, r3, #20
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	4353      	muls	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005586:	e058      	b.n	800563a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	d055      	beq.n	800563a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800558e:	f7fe f873 	bl	8003678 <HAL_GetTick>
 8005592:	0002      	movs	r2, r0
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	429a      	cmp	r2, r3
 800559c:	d902      	bls.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d142      	bne.n	800562a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	21e0      	movs	r1, #224	; 0xe0
 80055b0:	438a      	bics	r2, r1
 80055b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	2382      	movs	r3, #130	; 0x82
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	429a      	cmp	r2, r3
 80055be:	d113      	bne.n	80055e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d005      	beq.n	80055d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d107      	bne.n	80055e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2140      	movs	r1, #64	; 0x40
 80055e4:	438a      	bics	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	019b      	lsls	r3, r3, #6
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d110      	bne.n	8005616 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	491a      	ldr	r1, [pc, #104]	; (8005668 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005600:	400a      	ands	r2, r1
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	0189      	lsls	r1, r1, #6
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2251      	movs	r2, #81	; 0x51
 800561a:	2101      	movs	r1, #1
 800561c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2250      	movs	r2, #80	; 0x50
 8005622:	2100      	movs	r1, #0
 8005624:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e017      	b.n	800565a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3b01      	subs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	425a      	negs	r2, r3
 800564a:	4153      	adcs	r3, r2
 800564c:	b2db      	uxtb	r3, r3
 800564e:	001a      	movs	r2, r3
 8005650:	1dfb      	adds	r3, r7, #7
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d197      	bne.n	8005588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b008      	add	sp, #32
 8005660:	bd80      	pop	{r7, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	20000000 	.word	0x20000000
 8005668:	ffffdfff 	.word	0xffffdfff

0800566c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005678:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <SPI_EndRxTxTransaction+0x84>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	491d      	ldr	r1, [pc, #116]	; (80056f4 <SPI_EndRxTxTransaction+0x88>)
 800567e:	0018      	movs	r0, r3
 8005680:	f7fa fd4c 	bl	800011c <__udivsi3>
 8005684:	0003      	movs	r3, r0
 8005686:	001a      	movs	r2, r3
 8005688:	0013      	movs	r3, r2
 800568a:	015b      	lsls	r3, r3, #5
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	189b      	adds	r3, r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	2382      	movs	r3, #130	; 0x82
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	429a      	cmp	r2, r3
 80056a0:	d112      	bne.n	80056c8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	0013      	movs	r3, r2
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	f7ff ff4e 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 80056b4:	1e03      	subs	r3, r0, #0
 80056b6:	d016      	beq.n	80056e6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	2220      	movs	r2, #32
 80056be:	431a      	orrs	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e00f      	b.n	80056e8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	4013      	ands	r3, r2
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d0f2      	beq.n	80056c8 <SPI_EndRxTxTransaction+0x5c>
 80056e2:	e000      	b.n	80056e6 <SPI_EndRxTxTransaction+0x7a>
        break;
 80056e4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b006      	add	sp, #24
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000000 	.word	0x20000000
 80056f4:	016e3600 	.word	0x016e3600

080056f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e044      	b.n	8005794 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2274      	movs	r2, #116	; 0x74
 8005716:	2100      	movs	r1, #0
 8005718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f7fd fe83 	bl	8003428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2224      	movs	r2, #36	; 0x24
 8005726:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	438a      	bics	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 f8d8 	bl	80058f0 <UART_SetConfig>
 8005740:	0003      	movs	r3, r0
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e024      	b.n	8005794 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fb6b 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	490d      	ldr	r1, [pc, #52]	; (800579c <HAL_UART_Init+0xa4>)
 8005766:	400a      	ands	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	212a      	movs	r1, #42	; 0x2a
 8005776:	438a      	bics	r2, r1
 8005778:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0018      	movs	r0, r3
 800578e:	f000 fc03 	bl	8005f98 <UART_CheckIdleState>
 8005792:	0003      	movs	r3, r0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffffb7ff 	.word	0xffffb7ff

080057a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	1dbb      	adds	r3, r7, #6
 80057ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d000      	beq.n	80057ba <HAL_UART_Transmit+0x1a>
 80057b8:	e095      	b.n	80058e6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_UART_Transmit+0x28>
 80057c0:	1dbb      	adds	r3, r7, #6
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e08d      	b.n	80058e8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	015b      	lsls	r3, r3, #5
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d109      	bne.n	80057ec <HAL_UART_Transmit+0x4c>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2201      	movs	r2, #1
 80057e4:	4013      	ands	r3, r2
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e07d      	b.n	80058e8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2274      	movs	r2, #116	; 0x74
 80057f0:	5c9b      	ldrb	r3, [r3, r2]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Transmit+0x5a>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e076      	b.n	80058e8 <HAL_UART_Transmit+0x148>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2274      	movs	r2, #116	; 0x74
 80057fe:	2101      	movs	r1, #1
 8005800:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2280      	movs	r2, #128	; 0x80
 8005806:	2100      	movs	r1, #0
 8005808:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2221      	movs	r2, #33	; 0x21
 800580e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005810:	f7fd ff32 	bl	8003678 <HAL_GetTick>
 8005814:	0003      	movs	r3, r0
 8005816:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1dba      	adds	r2, r7, #6
 800581c:	2150      	movs	r1, #80	; 0x50
 800581e:	8812      	ldrh	r2, [r2, #0]
 8005820:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1dba      	adds	r2, r7, #6
 8005826:	2152      	movs	r1, #82	; 0x52
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	015b      	lsls	r3, r3, #5
 8005834:	429a      	cmp	r2, r3
 8005836:	d108      	bne.n	800584a <HAL_UART_Transmit+0xaa>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e003      	b.n	8005852 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2274      	movs	r2, #116	; 0x74
 8005856:	2100      	movs	r1, #0
 8005858:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800585a:	e02c      	b.n	80058b6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	0013      	movs	r3, r2
 8005866:	2200      	movs	r2, #0
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	f000 fbdd 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 800586e:	1e03      	subs	r3, r0, #0
 8005870:	d001      	beq.n	8005876 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e038      	b.n	80058e8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	001a      	movs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	05d2      	lsls	r2, r2, #23
 8005888:	0dd2      	lsrs	r2, r2, #23
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	3302      	adds	r3, #2
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e007      	b.n	80058a4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2252      	movs	r2, #82	; 0x52
 80058a8:	5a9b      	ldrh	r3, [r3, r2]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b299      	uxth	r1, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2252      	movs	r2, #82	; 0x52
 80058b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2252      	movs	r2, #82	; 0x52
 80058ba:	5a9b      	ldrh	r3, [r3, r2]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1cc      	bne.n	800585c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	0013      	movs	r3, r2
 80058cc:	2200      	movs	r2, #0
 80058ce:	2140      	movs	r1, #64	; 0x40
 80058d0:	f000 fbaa 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 80058d4:	1e03      	subs	r3, r0, #0
 80058d6:	d001      	beq.n	80058dc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e005      	b.n	80058e8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	0018      	movs	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b008      	add	sp, #32
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	b5b0      	push	{r4, r5, r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f8:	231a      	movs	r3, #26
 80058fa:	2218      	movs	r2, #24
 80058fc:	189b      	adds	r3, r3, r2
 80058fe:	19db      	adds	r3, r3, r7
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	431a      	orrs	r2, r3
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	431a      	orrs	r2, r3
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4313      	orrs	r3, r2
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4ac3      	ldr	r2, [pc, #780]	; (8005c30 <UART_SetConfig+0x340>)
 8005924:	4013      	ands	r3, r2
 8005926:	0019      	movs	r1, r3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4abe      	ldr	r2, [pc, #760]	; (8005c34 <UART_SetConfig+0x344>)
 800593a:	4013      	ands	r3, r2
 800593c:	0019      	movs	r1, r3
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4ab8      	ldr	r2, [pc, #736]	; (8005c38 <UART_SetConfig+0x348>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005960:	4313      	orrs	r3, r2
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4ab4      	ldr	r2, [pc, #720]	; (8005c3c <UART_SetConfig+0x34c>)
 800596c:	4013      	ands	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4ab0      	ldr	r2, [pc, #704]	; (8005c40 <UART_SetConfig+0x350>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d131      	bne.n	80059e8 <UART_SetConfig+0xf8>
 8005984:	4baf      	ldr	r3, [pc, #700]	; (8005c44 <UART_SetConfig+0x354>)
 8005986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005988:	2203      	movs	r2, #3
 800598a:	4013      	ands	r3, r2
 800598c:	2b03      	cmp	r3, #3
 800598e:	d01d      	beq.n	80059cc <UART_SetConfig+0xdc>
 8005990:	d823      	bhi.n	80059da <UART_SetConfig+0xea>
 8005992:	2b02      	cmp	r3, #2
 8005994:	d00c      	beq.n	80059b0 <UART_SetConfig+0xc0>
 8005996:	d820      	bhi.n	80059da <UART_SetConfig+0xea>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <UART_SetConfig+0xb2>
 800599c:	2b01      	cmp	r3, #1
 800599e:	d00e      	beq.n	80059be <UART_SetConfig+0xce>
 80059a0:	e01b      	b.n	80059da <UART_SetConfig+0xea>
 80059a2:	231b      	movs	r3, #27
 80059a4:	2218      	movs	r2, #24
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	19db      	adds	r3, r3, r7
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e0b4      	b.n	8005b1a <UART_SetConfig+0x22a>
 80059b0:	231b      	movs	r3, #27
 80059b2:	2218      	movs	r2, #24
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	2202      	movs	r2, #2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e0ad      	b.n	8005b1a <UART_SetConfig+0x22a>
 80059be:	231b      	movs	r3, #27
 80059c0:	2218      	movs	r2, #24
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2204      	movs	r2, #4
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e0a6      	b.n	8005b1a <UART_SetConfig+0x22a>
 80059cc:	231b      	movs	r3, #27
 80059ce:	2218      	movs	r2, #24
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2208      	movs	r2, #8
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e09f      	b.n	8005b1a <UART_SetConfig+0x22a>
 80059da:	231b      	movs	r3, #27
 80059dc:	2218      	movs	r2, #24
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	19db      	adds	r3, r3, r7
 80059e2:	2210      	movs	r2, #16
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e098      	b.n	8005b1a <UART_SetConfig+0x22a>
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a96      	ldr	r2, [pc, #600]	; (8005c48 <UART_SetConfig+0x358>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d131      	bne.n	8005a56 <UART_SetConfig+0x166>
 80059f2:	4b94      	ldr	r3, [pc, #592]	; (8005c44 <UART_SetConfig+0x354>)
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	220c      	movs	r2, #12
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d01d      	beq.n	8005a3a <UART_SetConfig+0x14a>
 80059fe:	d823      	bhi.n	8005a48 <UART_SetConfig+0x158>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d00c      	beq.n	8005a1e <UART_SetConfig+0x12e>
 8005a04:	d820      	bhi.n	8005a48 <UART_SetConfig+0x158>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <UART_SetConfig+0x120>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d00e      	beq.n	8005a2c <UART_SetConfig+0x13c>
 8005a0e:	e01b      	b.n	8005a48 <UART_SetConfig+0x158>
 8005a10:	231b      	movs	r3, #27
 8005a12:	2218      	movs	r2, #24
 8005a14:	189b      	adds	r3, r3, r2
 8005a16:	19db      	adds	r3, r3, r7
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e07d      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a1e:	231b      	movs	r3, #27
 8005a20:	2218      	movs	r2, #24
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	19db      	adds	r3, r3, r7
 8005a26:	2202      	movs	r2, #2
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e076      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a2c:	231b      	movs	r3, #27
 8005a2e:	2218      	movs	r2, #24
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	2204      	movs	r2, #4
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e06f      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a3a:	231b      	movs	r3, #27
 8005a3c:	2218      	movs	r2, #24
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	19db      	adds	r3, r3, r7
 8005a42:	2208      	movs	r2, #8
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e068      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a48:	231b      	movs	r3, #27
 8005a4a:	2218      	movs	r2, #24
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	19db      	adds	r3, r3, r7
 8005a50:	2210      	movs	r2, #16
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e061      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7c      	ldr	r2, [pc, #496]	; (8005c4c <UART_SetConfig+0x35c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d106      	bne.n	8005a6e <UART_SetConfig+0x17e>
 8005a60:	231b      	movs	r3, #27
 8005a62:	2218      	movs	r2, #24
 8005a64:	189b      	adds	r3, r3, r2
 8005a66:	19db      	adds	r3, r3, r7
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e055      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a77      	ldr	r2, [pc, #476]	; (8005c50 <UART_SetConfig+0x360>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d106      	bne.n	8005a86 <UART_SetConfig+0x196>
 8005a78:	231b      	movs	r3, #27
 8005a7a:	2218      	movs	r2, #24
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e049      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a6b      	ldr	r2, [pc, #428]	; (8005c38 <UART_SetConfig+0x348>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d13e      	bne.n	8005b0e <UART_SetConfig+0x21e>
 8005a90:	4b6c      	ldr	r3, [pc, #432]	; (8005c44 <UART_SetConfig+0x354>)
 8005a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a94:	23c0      	movs	r3, #192	; 0xc0
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	4013      	ands	r3, r2
 8005a9a:	22c0      	movs	r2, #192	; 0xc0
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d027      	beq.n	8005af2 <UART_SetConfig+0x202>
 8005aa2:	22c0      	movs	r2, #192	; 0xc0
 8005aa4:	0112      	lsls	r2, r2, #4
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d82a      	bhi.n	8005b00 <UART_SetConfig+0x210>
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	0112      	lsls	r2, r2, #4
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d011      	beq.n	8005ad6 <UART_SetConfig+0x1e6>
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	0112      	lsls	r2, r2, #4
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d822      	bhi.n	8005b00 <UART_SetConfig+0x210>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <UART_SetConfig+0x1d8>
 8005abe:	2280      	movs	r2, #128	; 0x80
 8005ac0:	00d2      	lsls	r2, r2, #3
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <UART_SetConfig+0x1f4>
 8005ac6:	e01b      	b.n	8005b00 <UART_SetConfig+0x210>
 8005ac8:	231b      	movs	r3, #27
 8005aca:	2218      	movs	r2, #24
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	19db      	adds	r3, r3, r7
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e021      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005ad6:	231b      	movs	r3, #27
 8005ad8:	2218      	movs	r2, #24
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	19db      	adds	r3, r3, r7
 8005ade:	2202      	movs	r2, #2
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e01a      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005ae4:	231b      	movs	r3, #27
 8005ae6:	2218      	movs	r2, #24
 8005ae8:	189b      	adds	r3, r3, r2
 8005aea:	19db      	adds	r3, r3, r7
 8005aec:	2204      	movs	r2, #4
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e013      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005af2:	231b      	movs	r3, #27
 8005af4:	2218      	movs	r2, #24
 8005af6:	189b      	adds	r3, r3, r2
 8005af8:	19db      	adds	r3, r3, r7
 8005afa:	2208      	movs	r2, #8
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e00c      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005b00:	231b      	movs	r3, #27
 8005b02:	2218      	movs	r2, #24
 8005b04:	189b      	adds	r3, r3, r2
 8005b06:	19db      	adds	r3, r3, r7
 8005b08:	2210      	movs	r2, #16
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e005      	b.n	8005b1a <UART_SetConfig+0x22a>
 8005b0e:	231b      	movs	r3, #27
 8005b10:	2218      	movs	r2, #24
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	19db      	adds	r3, r3, r7
 8005b16:	2210      	movs	r2, #16
 8005b18:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a46      	ldr	r2, [pc, #280]	; (8005c38 <UART_SetConfig+0x348>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d000      	beq.n	8005b26 <UART_SetConfig+0x236>
 8005b24:	e09a      	b.n	8005c5c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b26:	231b      	movs	r3, #27
 8005b28:	2218      	movs	r2, #24
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	19db      	adds	r3, r3, r7
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d01d      	beq.n	8005b70 <UART_SetConfig+0x280>
 8005b34:	dc20      	bgt.n	8005b78 <UART_SetConfig+0x288>
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d015      	beq.n	8005b66 <UART_SetConfig+0x276>
 8005b3a:	dc1d      	bgt.n	8005b78 <UART_SetConfig+0x288>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <UART_SetConfig+0x256>
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d005      	beq.n	8005b50 <UART_SetConfig+0x260>
 8005b44:	e018      	b.n	8005b78 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b46:	f7ff f979 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b4e:	e01c      	b.n	8005b8a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b50:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <UART_SetConfig+0x354>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2210      	movs	r2, #16
 8005b56:	4013      	ands	r3, r2
 8005b58:	d002      	beq.n	8005b60 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b5a:	4b3e      	ldr	r3, [pc, #248]	; (8005c54 <UART_SetConfig+0x364>)
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b5e:	e014      	b.n	8005b8a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <UART_SetConfig+0x368>)
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b64:	e011      	b.n	8005b8a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b66:	f7ff f8b9 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b6e:	e00c      	b.n	8005b8a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b76:	e008      	b.n	8005b8a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b7c:	231a      	movs	r3, #26
 8005b7e:	2218      	movs	r2, #24
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
        break;
 8005b88:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d100      	bne.n	8005b92 <UART_SetConfig+0x2a2>
 8005b90:	e134      	b.n	8005dfc <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	0013      	movs	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d305      	bcc.n	8005bae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d906      	bls.n	8005bbc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005bae:	231a      	movs	r3, #26
 8005bb0:	2218      	movs	r2, #24
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	19db      	adds	r3, r3, r7
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e11f      	b.n	8005dfc <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	6939      	ldr	r1, [r7, #16]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	000b      	movs	r3, r1
 8005bca:	0e1b      	lsrs	r3, r3, #24
 8005bcc:	0010      	movs	r0, r2
 8005bce:	0205      	lsls	r5, r0, #8
 8005bd0:	431d      	orrs	r5, r3
 8005bd2:	000b      	movs	r3, r1
 8005bd4:	021c      	lsls	r4, r3, #8
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68b8      	ldr	r0, [r7, #8]
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	1900      	adds	r0, r0, r4
 8005be8:	4169      	adcs	r1, r5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f7fa fc06 	bl	8000408 <__aeabi_uldivmod>
 8005bfc:	0002      	movs	r2, r0
 8005bfe:	000b      	movs	r3, r1
 8005c00:	0013      	movs	r3, r2
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c06:	23c0      	movs	r3, #192	; 0xc0
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d309      	bcc.n	8005c22 <UART_SetConfig+0x332>
 8005c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	035b      	lsls	r3, r3, #13
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d204      	bcs.n	8005c22 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1e:	60da      	str	r2, [r3, #12]
 8005c20:	e0ec      	b.n	8005dfc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c22:	231a      	movs	r3, #26
 8005c24:	2218      	movs	r2, #24
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	19db      	adds	r3, r3, r7
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e0e5      	b.n	8005dfc <UART_SetConfig+0x50c>
 8005c30:	efff69f3 	.word	0xefff69f3
 8005c34:	ffffcfff 	.word	0xffffcfff
 8005c38:	40004800 	.word	0x40004800
 8005c3c:	fffff4ff 	.word	0xfffff4ff
 8005c40:	40013800 	.word	0x40013800
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40004400 	.word	0x40004400
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	40005000 	.word	0x40005000
 8005c54:	003d0900 	.word	0x003d0900
 8005c58:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d000      	beq.n	8005c6a <UART_SetConfig+0x37a>
 8005c68:	e071      	b.n	8005d4e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005c6a:	231b      	movs	r3, #27
 8005c6c:	2218      	movs	r2, #24
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	19db      	adds	r3, r3, r7
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d822      	bhi.n	8005cbe <UART_SetConfig+0x3ce>
 8005c78:	009a      	lsls	r2, r3, #2
 8005c7a:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <UART_SetConfig+0x52c>)
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7ff f8db 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8005c86:	0003      	movs	r3, r0
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c8a:	e021      	b.n	8005cd0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c8c:	f7ff f8ec 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8005c90:	0003      	movs	r3, r0
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c94:	e01c      	b.n	8005cd0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c96:	4b62      	ldr	r3, [pc, #392]	; (8005e20 <UART_SetConfig+0x530>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d002      	beq.n	8005ca6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005ca0:	4b60      	ldr	r3, [pc, #384]	; (8005e24 <UART_SetConfig+0x534>)
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ca4:	e014      	b.n	8005cd0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005ca6:	4b60      	ldr	r3, [pc, #384]	; (8005e28 <UART_SetConfig+0x538>)
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005caa:	e011      	b.n	8005cd0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cac:	f7ff f816 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb4:	e00c      	b.n	8005cd0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cbc:	e008      	b.n	8005cd0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cc2:	231a      	movs	r3, #26
 8005cc4:	2218      	movs	r2, #24
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	19db      	adds	r3, r3, r7
 8005cca:	2201      	movs	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
        break;
 8005cce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d100      	bne.n	8005cd8 <UART_SetConfig+0x3e8>
 8005cd6:	e091      	b.n	8005dfc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	005a      	lsls	r2, r3, #1
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	18d2      	adds	r2, r2, r3
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	0019      	movs	r1, r3
 8005cea:	0010      	movs	r0, r2
 8005cec:	f7fa fa16 	bl	800011c <__udivsi3>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	2b0f      	cmp	r3, #15
 8005cfa:	d921      	bls.n	8005d40 <UART_SetConfig+0x450>
 8005cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	025b      	lsls	r3, r3, #9
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d21c      	bcs.n	8005d40 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	200e      	movs	r0, #14
 8005d0c:	2418      	movs	r4, #24
 8005d0e:	1903      	adds	r3, r0, r4
 8005d10:	19db      	adds	r3, r3, r7
 8005d12:	210f      	movs	r1, #15
 8005d14:	438a      	bics	r2, r1
 8005d16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2207      	movs	r2, #7
 8005d20:	4013      	ands	r3, r2
 8005d22:	b299      	uxth	r1, r3
 8005d24:	1903      	adds	r3, r0, r4
 8005d26:	19db      	adds	r3, r3, r7
 8005d28:	1902      	adds	r2, r0, r4
 8005d2a:	19d2      	adds	r2, r2, r7
 8005d2c:	8812      	ldrh	r2, [r2, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1902      	adds	r2, r0, r4
 8005d38:	19d2      	adds	r2, r2, r7
 8005d3a:	8812      	ldrh	r2, [r2, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	e05d      	b.n	8005dfc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d40:	231a      	movs	r3, #26
 8005d42:	2218      	movs	r2, #24
 8005d44:	189b      	adds	r3, r3, r2
 8005d46:	19db      	adds	r3, r3, r7
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e056      	b.n	8005dfc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4e:	231b      	movs	r3, #27
 8005d50:	2218      	movs	r2, #24
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	19db      	adds	r3, r3, r7
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d822      	bhi.n	8005da2 <UART_SetConfig+0x4b2>
 8005d5c:	009a      	lsls	r2, r3, #2
 8005d5e:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <UART_SetConfig+0x53c>)
 8005d60:	18d3      	adds	r3, r2, r3
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d66:	f7ff f869 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6e:	e021      	b.n	8005db4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d70:	f7ff f87a 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8005d74:	0003      	movs	r3, r0
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d78:	e01c      	b.n	8005db4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7a:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <UART_SetConfig+0x530>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2210      	movs	r2, #16
 8005d80:	4013      	ands	r3, r2
 8005d82:	d002      	beq.n	8005d8a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <UART_SetConfig+0x534>)
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d88:	e014      	b.n	8005db4 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <UART_SetConfig+0x538>)
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d8e:	e011      	b.n	8005db4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d90:	f7fe ffa4 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8005d94:	0003      	movs	r3, r0
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d98:	e00c      	b.n	8005db4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005da0:	e008      	b.n	8005db4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005da6:	231a      	movs	r3, #26
 8005da8:	2218      	movs	r2, #24
 8005daa:	189b      	adds	r3, r3, r2
 8005dac:	19db      	adds	r3, r3, r7
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]
        break;
 8005db2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d020      	beq.n	8005dfc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085a      	lsrs	r2, r3, #1
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	18d2      	adds	r2, r2, r3
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	0019      	movs	r1, r3
 8005dca:	0010      	movs	r0, r2
 8005dcc:	f7fa f9a6 	bl	800011c <__udivsi3>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	2b0f      	cmp	r3, #15
 8005dda:	d909      	bls.n	8005df0 <UART_SetConfig+0x500>
 8005ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	025b      	lsls	r3, r3, #9
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d204      	bcs.n	8005df0 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e005      	b.n	8005dfc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	231a      	movs	r3, #26
 8005df2:	2218      	movs	r2, #24
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2200      	movs	r2, #0
 8005e06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e08:	231a      	movs	r3, #26
 8005e0a:	2218      	movs	r2, #24
 8005e0c:	189b      	adds	r3, r3, r2
 8005e0e:	19db      	adds	r3, r3, r7
 8005e10:	781b      	ldrb	r3, [r3, #0]
}
 8005e12:	0018      	movs	r0, r3
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b00e      	add	sp, #56	; 0x38
 8005e18:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	08006d00 	.word	0x08006d00
 8005e20:	40021000 	.word	0x40021000
 8005e24:	003d0900 	.word	0x003d0900
 8005e28:	00f42400 	.word	0x00f42400
 8005e2c:	08006d24 	.word	0x08006d24

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d00b      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a4a      	ldr	r2, [pc, #296]	; (8005f74 <UART_AdvFeatureConfig+0x144>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2202      	movs	r2, #2
 8005e60:	4013      	ands	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4a43      	ldr	r2, [pc, #268]	; (8005f78 <UART_AdvFeatureConfig+0x148>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	0019      	movs	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2204      	movs	r2, #4
 8005e82:	4013      	ands	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4a3b      	ldr	r2, [pc, #236]	; (8005f7c <UART_AdvFeatureConfig+0x14c>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	0019      	movs	r1, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4a34      	ldr	r2, [pc, #208]	; (8005f80 <UART_AdvFeatureConfig+0x150>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <UART_AdvFeatureConfig+0x154>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4a25      	ldr	r2, [pc, #148]	; (8005f88 <UART_AdvFeatureConfig+0x158>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2240      	movs	r2, #64	; 0x40
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d01d      	beq.n	8005f4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <UART_AdvFeatureConfig+0x15c>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	035b      	lsls	r3, r3, #13
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d10b      	bne.n	8005f4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <UART_AdvFeatureConfig+0x160>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <UART_AdvFeatureConfig+0x164>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }
}
 8005f6c:	46c0      	nop			; (mov r8, r8)
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b002      	add	sp, #8
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	fffdffff 	.word	0xfffdffff
 8005f78:	fffeffff 	.word	0xfffeffff
 8005f7c:	fffbffff 	.word	0xfffbffff
 8005f80:	ffff7fff 	.word	0xffff7fff
 8005f84:	ffffefff 	.word	0xffffefff
 8005f88:	ffffdfff 	.word	0xffffdfff
 8005f8c:	ffefffff 	.word	0xffefffff
 8005f90:	ff9fffff 	.word	0xff9fffff
 8005f94:	fff7ffff 	.word	0xfff7ffff

08005f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2280      	movs	r2, #128	; 0x80
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fa8:	f7fd fb66 	bl	8003678 <HAL_GetTick>
 8005fac:	0003      	movs	r3, r0
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d10c      	bne.n	8005fd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2280      	movs	r2, #128	; 0x80
 8005fc2:	0391      	lsls	r1, r2, #14
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <UART_CheckIdleState+0x8c>)
 8005fc8:	9200      	str	r2, [sp, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f000 f82c 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d001      	beq.n	8005fd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e021      	b.n	800601c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d10c      	bne.n	8006000 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	03d1      	lsls	r1, r2, #15
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <UART_CheckIdleState+0x8c>)
 8005ff0:	9200      	str	r2, [sp, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f000 f818 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	1e03      	subs	r3, r0, #0
 8005ffa:	d001      	beq.n	8006000 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e00d      	b.n	800601c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2274      	movs	r2, #116	; 0x74
 8006016:	2100      	movs	r1, #0
 8006018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b004      	add	sp, #16
 8006022:	bd80      	pop	{r7, pc}
 8006024:	01ffffff 	.word	0x01ffffff

08006028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b094      	sub	sp, #80	; 0x50
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006038:	e0a3      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800603c:	3301      	adds	r3, #1
 800603e:	d100      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006040:	e09f      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fd fb19 	bl	8003678 <HAL_GetTick>
 8006046:	0002      	movs	r2, r0
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <UART_WaitOnFlagUntilTimeout+0x30>
 8006052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006054:	2b00      	cmp	r3, #0
 8006056:	d13d      	bne.n	80060d4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006058:	f3ef 8310 	mrs	r3, PRIMASK
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
 8006062:	2301      	movs	r3, #1
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	f383 8810 	msr	PRIMASK, r3
}
 800606c:	46c0      	nop			; (mov r8, r8)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	494c      	ldr	r1, [pc, #304]	; (80061ac <UART_WaitOnFlagUntilTimeout+0x184>)
 800607a:	400a      	ands	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	f383 8810 	msr	PRIMASK, r3
}
 8006088:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608a:	f3ef 8310 	mrs	r3, PRIMASK
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	643b      	str	r3, [r7, #64]	; 0x40
 8006094:	2301      	movs	r3, #1
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	438a      	bics	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b6:	f383 8810 	msr	PRIMASK, r3
}
 80060ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2274      	movs	r2, #116	; 0x74
 80060cc:	2100      	movs	r1, #0
 80060ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e067      	b.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2204      	movs	r2, #4
 80060dc:	4013      	ands	r3, r2
 80060de:	d050      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	401a      	ands	r2, r3
 80060ec:	2380      	movs	r3, #128	; 0x80
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d146      	bne.n	8006182 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2280      	movs	r2, #128	; 0x80
 80060fa:	0112      	lsls	r2, r2, #4
 80060fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006102:	613b      	str	r3, [r7, #16]
  return(result);
 8006104:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f383 8810 	msr	PRIMASK, r3
}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4923      	ldr	r1, [pc, #140]	; (80061ac <UART_WaitOnFlagUntilTimeout+0x184>)
 8006120:	400a      	ands	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006126:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f383 8810 	msr	PRIMASK, r3
}
 800612e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006130:	f3ef 8310 	mrs	r3, PRIMASK
 8006134:	61fb      	str	r3, [r7, #28]
  return(result);
 8006136:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	64bb      	str	r3, [r7, #72]	; 0x48
 800613a:	2301      	movs	r3, #1
 800613c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	f383 8810 	msr	PRIMASK, r3
}
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2101      	movs	r1, #1
 8006152:	438a      	bics	r2, r1
 8006154:	609a      	str	r2, [r3, #8]
 8006156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	f383 8810 	msr	PRIMASK, r3
}
 8006160:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	2120      	movs	r1, #32
 8006174:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2274      	movs	r2, #116	; 0x74
 800617a:	2100      	movs	r1, #0
 800617c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e010      	b.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	425a      	negs	r2, r3
 8006192:	4153      	adcs	r3, r2
 8006194:	b2db      	uxtb	r3, r3
 8006196:	001a      	movs	r2, r3
 8006198:	1dfb      	adds	r3, r7, #7
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d100      	bne.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80061a0:	e74b      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b014      	add	sp, #80	; 0x50
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	fffffe5f 	.word	0xfffffe5f

080061b0 <__errno>:
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <__errno+0x8>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	4770      	bx	lr
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	2000000c 	.word	0x2000000c

080061bc <__libc_init_array>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	2600      	movs	r6, #0
 80061c0:	4d0c      	ldr	r5, [pc, #48]	; (80061f4 <__libc_init_array+0x38>)
 80061c2:	4c0d      	ldr	r4, [pc, #52]	; (80061f8 <__libc_init_array+0x3c>)
 80061c4:	1b64      	subs	r4, r4, r5
 80061c6:	10a4      	asrs	r4, r4, #2
 80061c8:	42a6      	cmp	r6, r4
 80061ca:	d109      	bne.n	80061e0 <__libc_init_array+0x24>
 80061cc:	2600      	movs	r6, #0
 80061ce:	f000 fce1 	bl	8006b94 <_init>
 80061d2:	4d0a      	ldr	r5, [pc, #40]	; (80061fc <__libc_init_array+0x40>)
 80061d4:	4c0a      	ldr	r4, [pc, #40]	; (8006200 <__libc_init_array+0x44>)
 80061d6:	1b64      	subs	r4, r4, r5
 80061d8:	10a4      	asrs	r4, r4, #2
 80061da:	42a6      	cmp	r6, r4
 80061dc:	d105      	bne.n	80061ea <__libc_init_array+0x2e>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	00b3      	lsls	r3, r6, #2
 80061e2:	58eb      	ldr	r3, [r5, r3]
 80061e4:	4798      	blx	r3
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7ee      	b.n	80061c8 <__libc_init_array+0xc>
 80061ea:	00b3      	lsls	r3, r6, #2
 80061ec:	58eb      	ldr	r3, [r5, r3]
 80061ee:	4798      	blx	r3
 80061f0:	3601      	adds	r6, #1
 80061f2:	e7f2      	b.n	80061da <__libc_init_array+0x1e>
 80061f4:	08006d84 	.word	0x08006d84
 80061f8:	08006d84 	.word	0x08006d84
 80061fc:	08006d84 	.word	0x08006d84
 8006200:	08006d88 	.word	0x08006d88

08006204 <malloc>:
 8006204:	b510      	push	{r4, lr}
 8006206:	4b03      	ldr	r3, [pc, #12]	; (8006214 <malloc+0x10>)
 8006208:	0001      	movs	r1, r0
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	f000 f882 	bl	8006314 <_malloc_r>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	2000000c 	.word	0x2000000c

08006218 <memcpy>:
 8006218:	2300      	movs	r3, #0
 800621a:	b510      	push	{r4, lr}
 800621c:	429a      	cmp	r2, r3
 800621e:	d100      	bne.n	8006222 <memcpy+0xa>
 8006220:	bd10      	pop	{r4, pc}
 8006222:	5ccc      	ldrb	r4, [r1, r3]
 8006224:	54c4      	strb	r4, [r0, r3]
 8006226:	3301      	adds	r3, #1
 8006228:	e7f8      	b.n	800621c <memcpy+0x4>

0800622a <memset>:
 800622a:	0003      	movs	r3, r0
 800622c:	1882      	adds	r2, r0, r2
 800622e:	4293      	cmp	r3, r2
 8006230:	d100      	bne.n	8006234 <memset+0xa>
 8006232:	4770      	bx	lr
 8006234:	7019      	strb	r1, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	e7f9      	b.n	800622e <memset+0x4>
	...

0800623c <_free_r>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	0005      	movs	r5, r0
 8006240:	2900      	cmp	r1, #0
 8006242:	d010      	beq.n	8006266 <_free_r+0x2a>
 8006244:	1f0c      	subs	r4, r1, #4
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da00      	bge.n	800624e <_free_r+0x12>
 800624c:	18e4      	adds	r4, r4, r3
 800624e:	0028      	movs	r0, r5
 8006250:	f000 f954 	bl	80064fc <__malloc_lock>
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <_free_r+0x90>)
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <_free_r+0x2c>
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	6014      	str	r4, [r2, #0]
 8006260:	0028      	movs	r0, r5
 8006262:	f000 f953 	bl	800650c <__malloc_unlock>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	42a3      	cmp	r3, r4
 800626a:	d908      	bls.n	800627e <_free_r+0x42>
 800626c:	6821      	ldr	r1, [r4, #0]
 800626e:	1860      	adds	r0, r4, r1
 8006270:	4283      	cmp	r3, r0
 8006272:	d1f3      	bne.n	800625c <_free_r+0x20>
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	1841      	adds	r1, r0, r1
 800627a:	6021      	str	r1, [r4, #0]
 800627c:	e7ee      	b.n	800625c <_free_r+0x20>
 800627e:	001a      	movs	r2, r3
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <_free_r+0x4e>
 8006286:	42a3      	cmp	r3, r4
 8006288:	d9f9      	bls.n	800627e <_free_r+0x42>
 800628a:	6811      	ldr	r1, [r2, #0]
 800628c:	1850      	adds	r0, r2, r1
 800628e:	42a0      	cmp	r0, r4
 8006290:	d10b      	bne.n	80062aa <_free_r+0x6e>
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	1809      	adds	r1, r1, r0
 8006296:	1850      	adds	r0, r2, r1
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	4283      	cmp	r3, r0
 800629c:	d1e0      	bne.n	8006260 <_free_r+0x24>
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	1841      	adds	r1, r0, r1
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	6053      	str	r3, [r2, #4]
 80062a8:	e7da      	b.n	8006260 <_free_r+0x24>
 80062aa:	42a0      	cmp	r0, r4
 80062ac:	d902      	bls.n	80062b4 <_free_r+0x78>
 80062ae:	230c      	movs	r3, #12
 80062b0:	602b      	str	r3, [r5, #0]
 80062b2:	e7d5      	b.n	8006260 <_free_r+0x24>
 80062b4:	6821      	ldr	r1, [r4, #0]
 80062b6:	1860      	adds	r0, r4, r1
 80062b8:	4283      	cmp	r3, r0
 80062ba:	d103      	bne.n	80062c4 <_free_r+0x88>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	1841      	adds	r1, r0, r1
 80062c2:	6021      	str	r1, [r4, #0]
 80062c4:	6063      	str	r3, [r4, #4]
 80062c6:	6054      	str	r4, [r2, #4]
 80062c8:	e7ca      	b.n	8006260 <_free_r+0x24>
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	200001cc 	.word	0x200001cc

080062d0 <sbrk_aligned>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4e0f      	ldr	r6, [pc, #60]	; (8006310 <sbrk_aligned+0x40>)
 80062d4:	000d      	movs	r5, r1
 80062d6:	6831      	ldr	r1, [r6, #0]
 80062d8:	0004      	movs	r4, r0
 80062da:	2900      	cmp	r1, #0
 80062dc:	d102      	bne.n	80062e4 <sbrk_aligned+0x14>
 80062de:	f000 f88f 	bl	8006400 <_sbrk_r>
 80062e2:	6030      	str	r0, [r6, #0]
 80062e4:	0029      	movs	r1, r5
 80062e6:	0020      	movs	r0, r4
 80062e8:	f000 f88a 	bl	8006400 <_sbrk_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d00a      	beq.n	8006306 <sbrk_aligned+0x36>
 80062f0:	2303      	movs	r3, #3
 80062f2:	1cc5      	adds	r5, r0, #3
 80062f4:	439d      	bics	r5, r3
 80062f6:	42a8      	cmp	r0, r5
 80062f8:	d007      	beq.n	800630a <sbrk_aligned+0x3a>
 80062fa:	1a29      	subs	r1, r5, r0
 80062fc:	0020      	movs	r0, r4
 80062fe:	f000 f87f 	bl	8006400 <_sbrk_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d101      	bne.n	800630a <sbrk_aligned+0x3a>
 8006306:	2501      	movs	r5, #1
 8006308:	426d      	negs	r5, r5
 800630a:	0028      	movs	r0, r5
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	200001d0 	.word	0x200001d0

08006314 <_malloc_r>:
 8006314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006316:	2203      	movs	r2, #3
 8006318:	1ccb      	adds	r3, r1, #3
 800631a:	4393      	bics	r3, r2
 800631c:	3308      	adds	r3, #8
 800631e:	0006      	movs	r6, r0
 8006320:	001f      	movs	r7, r3
 8006322:	2b0c      	cmp	r3, #12
 8006324:	d232      	bcs.n	800638c <_malloc_r+0x78>
 8006326:	270c      	movs	r7, #12
 8006328:	42b9      	cmp	r1, r7
 800632a:	d831      	bhi.n	8006390 <_malloc_r+0x7c>
 800632c:	0030      	movs	r0, r6
 800632e:	f000 f8e5 	bl	80064fc <__malloc_lock>
 8006332:	4d32      	ldr	r5, [pc, #200]	; (80063fc <_malloc_r+0xe8>)
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	001c      	movs	r4, r3
 8006338:	2c00      	cmp	r4, #0
 800633a:	d12e      	bne.n	800639a <_malloc_r+0x86>
 800633c:	0039      	movs	r1, r7
 800633e:	0030      	movs	r0, r6
 8006340:	f7ff ffc6 	bl	80062d0 <sbrk_aligned>
 8006344:	0004      	movs	r4, r0
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d11e      	bne.n	8006388 <_malloc_r+0x74>
 800634a:	682c      	ldr	r4, [r5, #0]
 800634c:	0025      	movs	r5, r4
 800634e:	2d00      	cmp	r5, #0
 8006350:	d14a      	bne.n	80063e8 <_malloc_r+0xd4>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	0029      	movs	r1, r5
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	0030      	movs	r0, r6
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	f000 f850 	bl	8006400 <_sbrk_r>
 8006360:	9b01      	ldr	r3, [sp, #4]
 8006362:	4283      	cmp	r3, r0
 8006364:	d143      	bne.n	80063ee <_malloc_r+0xda>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	3703      	adds	r7, #3
 800636a:	1aff      	subs	r7, r7, r3
 800636c:	2303      	movs	r3, #3
 800636e:	439f      	bics	r7, r3
 8006370:	3708      	adds	r7, #8
 8006372:	2f0c      	cmp	r7, #12
 8006374:	d200      	bcs.n	8006378 <_malloc_r+0x64>
 8006376:	270c      	movs	r7, #12
 8006378:	0039      	movs	r1, r7
 800637a:	0030      	movs	r0, r6
 800637c:	f7ff ffa8 	bl	80062d0 <sbrk_aligned>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d034      	beq.n	80063ee <_malloc_r+0xda>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	19df      	adds	r7, r3, r7
 8006388:	6027      	str	r7, [r4, #0]
 800638a:	e013      	b.n	80063b4 <_malloc_r+0xa0>
 800638c:	2b00      	cmp	r3, #0
 800638e:	dacb      	bge.n	8006328 <_malloc_r+0x14>
 8006390:	230c      	movs	r3, #12
 8006392:	2500      	movs	r5, #0
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	0028      	movs	r0, r5
 8006398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	1bd1      	subs	r1, r2, r7
 800639e:	d420      	bmi.n	80063e2 <_malloc_r+0xce>
 80063a0:	290b      	cmp	r1, #11
 80063a2:	d917      	bls.n	80063d4 <_malloc_r+0xc0>
 80063a4:	19e2      	adds	r2, r4, r7
 80063a6:	6027      	str	r7, [r4, #0]
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	d111      	bne.n	80063d0 <_malloc_r+0xbc>
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	6053      	str	r3, [r2, #4]
 80063b4:	0030      	movs	r0, r6
 80063b6:	0025      	movs	r5, r4
 80063b8:	f000 f8a8 	bl	800650c <__malloc_unlock>
 80063bc:	2207      	movs	r2, #7
 80063be:	350b      	adds	r5, #11
 80063c0:	1d23      	adds	r3, r4, #4
 80063c2:	4395      	bics	r5, r2
 80063c4:	1aea      	subs	r2, r5, r3
 80063c6:	429d      	cmp	r5, r3
 80063c8:	d0e5      	beq.n	8006396 <_malloc_r+0x82>
 80063ca:	1b5b      	subs	r3, r3, r5
 80063cc:	50a3      	str	r3, [r4, r2]
 80063ce:	e7e2      	b.n	8006396 <_malloc_r+0x82>
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e7ec      	b.n	80063ae <_malloc_r+0x9a>
 80063d4:	6862      	ldr	r2, [r4, #4]
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	d101      	bne.n	80063de <_malloc_r+0xca>
 80063da:	602a      	str	r2, [r5, #0]
 80063dc:	e7ea      	b.n	80063b4 <_malloc_r+0xa0>
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	e7e8      	b.n	80063b4 <_malloc_r+0xa0>
 80063e2:	0023      	movs	r3, r4
 80063e4:	6864      	ldr	r4, [r4, #4]
 80063e6:	e7a7      	b.n	8006338 <_malloc_r+0x24>
 80063e8:	002c      	movs	r4, r5
 80063ea:	686d      	ldr	r5, [r5, #4]
 80063ec:	e7af      	b.n	800634e <_malloc_r+0x3a>
 80063ee:	230c      	movs	r3, #12
 80063f0:	0030      	movs	r0, r6
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f000 f88a 	bl	800650c <__malloc_unlock>
 80063f8:	e7cd      	b.n	8006396 <_malloc_r+0x82>
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	200001cc 	.word	0x200001cc

08006400 <_sbrk_r>:
 8006400:	2300      	movs	r3, #0
 8006402:	b570      	push	{r4, r5, r6, lr}
 8006404:	4d06      	ldr	r5, [pc, #24]	; (8006420 <_sbrk_r+0x20>)
 8006406:	0004      	movs	r4, r0
 8006408:	0008      	movs	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fd f868 	bl	80034e0 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d103      	bne.n	800641c <_sbrk_r+0x1c>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d000      	beq.n	800641c <_sbrk_r+0x1c>
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	200001d4 	.word	0x200001d4

08006424 <sniprintf>:
 8006424:	b40c      	push	{r2, r3}
 8006426:	b530      	push	{r4, r5, lr}
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <sniprintf+0x64>)
 800642a:	000c      	movs	r4, r1
 800642c:	681d      	ldr	r5, [r3, #0]
 800642e:	b09d      	sub	sp, #116	; 0x74
 8006430:	2900      	cmp	r1, #0
 8006432:	da08      	bge.n	8006446 <sniprintf+0x22>
 8006434:	238b      	movs	r3, #139	; 0x8b
 8006436:	2001      	movs	r0, #1
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	4240      	negs	r0, r0
 800643c:	b01d      	add	sp, #116	; 0x74
 800643e:	bc30      	pop	{r4, r5}
 8006440:	bc08      	pop	{r3}
 8006442:	b002      	add	sp, #8
 8006444:	4718      	bx	r3
 8006446:	2382      	movs	r3, #130	; 0x82
 8006448:	466a      	mov	r2, sp
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	8293      	strh	r3, [r2, #20]
 800644e:	2300      	movs	r3, #0
 8006450:	9002      	str	r0, [sp, #8]
 8006452:	9006      	str	r0, [sp, #24]
 8006454:	4299      	cmp	r1, r3
 8006456:	d000      	beq.n	800645a <sniprintf+0x36>
 8006458:	1e4b      	subs	r3, r1, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	9307      	str	r3, [sp, #28]
 800645e:	2301      	movs	r3, #1
 8006460:	466a      	mov	r2, sp
 8006462:	425b      	negs	r3, r3
 8006464:	82d3      	strh	r3, [r2, #22]
 8006466:	0028      	movs	r0, r5
 8006468:	ab21      	add	r3, sp, #132	; 0x84
 800646a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800646c:	a902      	add	r1, sp, #8
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	f000 f8b6 	bl	80065e0 <_svfiprintf_r>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	da01      	bge.n	800647c <sniprintf+0x58>
 8006478:	238b      	movs	r3, #139	; 0x8b
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	2c00      	cmp	r4, #0
 800647e:	d0dd      	beq.n	800643c <sniprintf+0x18>
 8006480:	2300      	movs	r3, #0
 8006482:	9a02      	ldr	r2, [sp, #8]
 8006484:	7013      	strb	r3, [r2, #0]
 8006486:	e7d9      	b.n	800643c <sniprintf+0x18>
 8006488:	2000000c 	.word	0x2000000c

0800648c <_vsniprintf_r>:
 800648c:	b530      	push	{r4, r5, lr}
 800648e:	0014      	movs	r4, r2
 8006490:	0005      	movs	r5, r0
 8006492:	001a      	movs	r2, r3
 8006494:	b09b      	sub	sp, #108	; 0x6c
 8006496:	2c00      	cmp	r4, #0
 8006498:	da05      	bge.n	80064a6 <_vsniprintf_r+0x1a>
 800649a:	238b      	movs	r3, #139	; 0x8b
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	2001      	movs	r0, #1
 80064a0:	4240      	negs	r0, r0
 80064a2:	b01b      	add	sp, #108	; 0x6c
 80064a4:	bd30      	pop	{r4, r5, pc}
 80064a6:	2382      	movs	r3, #130	; 0x82
 80064a8:	4668      	mov	r0, sp
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	8183      	strh	r3, [r0, #12]
 80064ae:	2300      	movs	r3, #0
 80064b0:	9100      	str	r1, [sp, #0]
 80064b2:	9104      	str	r1, [sp, #16]
 80064b4:	429c      	cmp	r4, r3
 80064b6:	d000      	beq.n	80064ba <_vsniprintf_r+0x2e>
 80064b8:	1e63      	subs	r3, r4, #1
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	9305      	str	r3, [sp, #20]
 80064be:	2301      	movs	r3, #1
 80064c0:	4669      	mov	r1, sp
 80064c2:	425b      	negs	r3, r3
 80064c4:	81cb      	strh	r3, [r1, #14]
 80064c6:	0028      	movs	r0, r5
 80064c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ca:	f000 f889 	bl	80065e0 <_svfiprintf_r>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	da01      	bge.n	80064d6 <_vsniprintf_r+0x4a>
 80064d2:	238b      	movs	r3, #139	; 0x8b
 80064d4:	602b      	str	r3, [r5, #0]
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d0e3      	beq.n	80064a2 <_vsniprintf_r+0x16>
 80064da:	2300      	movs	r3, #0
 80064dc:	9a00      	ldr	r2, [sp, #0]
 80064de:	7013      	strb	r3, [r2, #0]
 80064e0:	e7df      	b.n	80064a2 <_vsniprintf_r+0x16>
	...

080064e4 <vsniprintf>:
 80064e4:	b507      	push	{r0, r1, r2, lr}
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	0013      	movs	r3, r2
 80064ea:	000a      	movs	r2, r1
 80064ec:	0001      	movs	r1, r0
 80064ee:	4802      	ldr	r0, [pc, #8]	; (80064f8 <vsniprintf+0x14>)
 80064f0:	6800      	ldr	r0, [r0, #0]
 80064f2:	f7ff ffcb 	bl	800648c <_vsniprintf_r>
 80064f6:	bd0e      	pop	{r1, r2, r3, pc}
 80064f8:	2000000c 	.word	0x2000000c

080064fc <__malloc_lock>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4802      	ldr	r0, [pc, #8]	; (8006508 <__malloc_lock+0xc>)
 8006500:	f000 faf0 	bl	8006ae4 <__retarget_lock_acquire_recursive>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	200001d8 	.word	0x200001d8

0800650c <__malloc_unlock>:
 800650c:	b510      	push	{r4, lr}
 800650e:	4802      	ldr	r0, [pc, #8]	; (8006518 <__malloc_unlock+0xc>)
 8006510:	f000 fae9 	bl	8006ae6 <__retarget_lock_release_recursive>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	200001d8 	.word	0x200001d8

0800651c <__ssputs_r>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	688e      	ldr	r6, [r1, #8]
 8006520:	b085      	sub	sp, #20
 8006522:	0007      	movs	r7, r0
 8006524:	000c      	movs	r4, r1
 8006526:	9203      	str	r2, [sp, #12]
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	429e      	cmp	r6, r3
 800652c:	d83c      	bhi.n	80065a8 <__ssputs_r+0x8c>
 800652e:	2390      	movs	r3, #144	; 0x90
 8006530:	898a      	ldrh	r2, [r1, #12]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	421a      	tst	r2, r3
 8006536:	d034      	beq.n	80065a2 <__ssputs_r+0x86>
 8006538:	6909      	ldr	r1, [r1, #16]
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	6960      	ldr	r0, [r4, #20]
 800653e:	1a5b      	subs	r3, r3, r1
 8006540:	9302      	str	r3, [sp, #8]
 8006542:	2303      	movs	r3, #3
 8006544:	4343      	muls	r3, r0
 8006546:	0fdd      	lsrs	r5, r3, #31
 8006548:	18ed      	adds	r5, r5, r3
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	9802      	ldr	r0, [sp, #8]
 800654e:	3301      	adds	r3, #1
 8006550:	181b      	adds	r3, r3, r0
 8006552:	106d      	asrs	r5, r5, #1
 8006554:	42ab      	cmp	r3, r5
 8006556:	d900      	bls.n	800655a <__ssputs_r+0x3e>
 8006558:	001d      	movs	r5, r3
 800655a:	0553      	lsls	r3, r2, #21
 800655c:	d532      	bpl.n	80065c4 <__ssputs_r+0xa8>
 800655e:	0029      	movs	r1, r5
 8006560:	0038      	movs	r0, r7
 8006562:	f7ff fed7 	bl	8006314 <_malloc_r>
 8006566:	1e06      	subs	r6, r0, #0
 8006568:	d109      	bne.n	800657e <__ssputs_r+0x62>
 800656a:	230c      	movs	r3, #12
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	2001      	movs	r0, #1
 8006572:	89a2      	ldrh	r2, [r4, #12]
 8006574:	4240      	negs	r0, r0
 8006576:	4313      	orrs	r3, r2
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	b005      	add	sp, #20
 800657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657e:	9a02      	ldr	r2, [sp, #8]
 8006580:	6921      	ldr	r1, [r4, #16]
 8006582:	f7ff fe49 	bl	8006218 <memcpy>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	4a14      	ldr	r2, [pc, #80]	; (80065dc <__ssputs_r+0xc0>)
 800658a:	401a      	ands	r2, r3
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	4313      	orrs	r3, r2
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	9b02      	ldr	r3, [sp, #8]
 8006594:	6126      	str	r6, [r4, #16]
 8006596:	18f6      	adds	r6, r6, r3
 8006598:	6026      	str	r6, [r4, #0]
 800659a:	6165      	str	r5, [r4, #20]
 800659c:	9e01      	ldr	r6, [sp, #4]
 800659e:	1aed      	subs	r5, r5, r3
 80065a0:	60a5      	str	r5, [r4, #8]
 80065a2:	9b01      	ldr	r3, [sp, #4]
 80065a4:	429e      	cmp	r6, r3
 80065a6:	d900      	bls.n	80065aa <__ssputs_r+0x8e>
 80065a8:	9e01      	ldr	r6, [sp, #4]
 80065aa:	0032      	movs	r2, r6
 80065ac:	9903      	ldr	r1, [sp, #12]
 80065ae:	6820      	ldr	r0, [r4, #0]
 80065b0:	f000 faa5 	bl	8006afe <memmove>
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	2000      	movs	r0, #0
 80065b8:	1b9b      	subs	r3, r3, r6
 80065ba:	60a3      	str	r3, [r4, #8]
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	199e      	adds	r6, r3, r6
 80065c0:	6026      	str	r6, [r4, #0]
 80065c2:	e7da      	b.n	800657a <__ssputs_r+0x5e>
 80065c4:	002a      	movs	r2, r5
 80065c6:	0038      	movs	r0, r7
 80065c8:	f000 faac 	bl	8006b24 <_realloc_r>
 80065cc:	1e06      	subs	r6, r0, #0
 80065ce:	d1e0      	bne.n	8006592 <__ssputs_r+0x76>
 80065d0:	0038      	movs	r0, r7
 80065d2:	6921      	ldr	r1, [r4, #16]
 80065d4:	f7ff fe32 	bl	800623c <_free_r>
 80065d8:	e7c7      	b.n	800656a <__ssputs_r+0x4e>
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	fffffb7f 	.word	0xfffffb7f

080065e0 <_svfiprintf_r>:
 80065e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e2:	b0a1      	sub	sp, #132	; 0x84
 80065e4:	9003      	str	r0, [sp, #12]
 80065e6:	001d      	movs	r5, r3
 80065e8:	898b      	ldrh	r3, [r1, #12]
 80065ea:	000f      	movs	r7, r1
 80065ec:	0016      	movs	r6, r2
 80065ee:	061b      	lsls	r3, r3, #24
 80065f0:	d511      	bpl.n	8006616 <_svfiprintf_r+0x36>
 80065f2:	690b      	ldr	r3, [r1, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10e      	bne.n	8006616 <_svfiprintf_r+0x36>
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	f7ff fe8b 	bl	8006314 <_malloc_r>
 80065fe:	6038      	str	r0, [r7, #0]
 8006600:	6138      	str	r0, [r7, #16]
 8006602:	2800      	cmp	r0, #0
 8006604:	d105      	bne.n	8006612 <_svfiprintf_r+0x32>
 8006606:	230c      	movs	r3, #12
 8006608:	9a03      	ldr	r2, [sp, #12]
 800660a:	3801      	subs	r0, #1
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	b021      	add	sp, #132	; 0x84
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	2300      	movs	r3, #0
 8006618:	ac08      	add	r4, sp, #32
 800661a:	6163      	str	r3, [r4, #20]
 800661c:	3320      	adds	r3, #32
 800661e:	7663      	strb	r3, [r4, #25]
 8006620:	3310      	adds	r3, #16
 8006622:	76a3      	strb	r3, [r4, #26]
 8006624:	9507      	str	r5, [sp, #28]
 8006626:	0035      	movs	r5, r6
 8006628:	782b      	ldrb	r3, [r5, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <_svfiprintf_r+0x52>
 800662e:	2b25      	cmp	r3, #37	; 0x25
 8006630:	d147      	bne.n	80066c2 <_svfiprintf_r+0xe2>
 8006632:	1bab      	subs	r3, r5, r6
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	42b5      	cmp	r5, r6
 8006638:	d00c      	beq.n	8006654 <_svfiprintf_r+0x74>
 800663a:	0032      	movs	r2, r6
 800663c:	0039      	movs	r1, r7
 800663e:	9803      	ldr	r0, [sp, #12]
 8006640:	f7ff ff6c 	bl	800651c <__ssputs_r>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d100      	bne.n	800664a <_svfiprintf_r+0x6a>
 8006648:	e0ae      	b.n	80067a8 <_svfiprintf_r+0x1c8>
 800664a:	6962      	ldr	r2, [r4, #20]
 800664c:	9b05      	ldr	r3, [sp, #20]
 800664e:	4694      	mov	ip, r2
 8006650:	4463      	add	r3, ip
 8006652:	6163      	str	r3, [r4, #20]
 8006654:	782b      	ldrb	r3, [r5, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d100      	bne.n	800665c <_svfiprintf_r+0x7c>
 800665a:	e0a5      	b.n	80067a8 <_svfiprintf_r+0x1c8>
 800665c:	2201      	movs	r2, #1
 800665e:	2300      	movs	r3, #0
 8006660:	4252      	negs	r2, r2
 8006662:	6062      	str	r2, [r4, #4]
 8006664:	a904      	add	r1, sp, #16
 8006666:	3254      	adds	r2, #84	; 0x54
 8006668:	1852      	adds	r2, r2, r1
 800666a:	1c6e      	adds	r6, r5, #1
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	60e3      	str	r3, [r4, #12]
 8006670:	60a3      	str	r3, [r4, #8]
 8006672:	7013      	strb	r3, [r2, #0]
 8006674:	65a3      	str	r3, [r4, #88]	; 0x58
 8006676:	2205      	movs	r2, #5
 8006678:	7831      	ldrb	r1, [r6, #0]
 800667a:	4854      	ldr	r0, [pc, #336]	; (80067cc <_svfiprintf_r+0x1ec>)
 800667c:	f000 fa34 	bl	8006ae8 <memchr>
 8006680:	1c75      	adds	r5, r6, #1
 8006682:	2800      	cmp	r0, #0
 8006684:	d11f      	bne.n	80066c6 <_svfiprintf_r+0xe6>
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	06d3      	lsls	r3, r2, #27
 800668a:	d504      	bpl.n	8006696 <_svfiprintf_r+0xb6>
 800668c:	2353      	movs	r3, #83	; 0x53
 800668e:	a904      	add	r1, sp, #16
 8006690:	185b      	adds	r3, r3, r1
 8006692:	2120      	movs	r1, #32
 8006694:	7019      	strb	r1, [r3, #0]
 8006696:	0713      	lsls	r3, r2, #28
 8006698:	d504      	bpl.n	80066a4 <_svfiprintf_r+0xc4>
 800669a:	2353      	movs	r3, #83	; 0x53
 800669c:	a904      	add	r1, sp, #16
 800669e:	185b      	adds	r3, r3, r1
 80066a0:	212b      	movs	r1, #43	; 0x2b
 80066a2:	7019      	strb	r1, [r3, #0]
 80066a4:	7833      	ldrb	r3, [r6, #0]
 80066a6:	2b2a      	cmp	r3, #42	; 0x2a
 80066a8:	d016      	beq.n	80066d8 <_svfiprintf_r+0xf8>
 80066aa:	0035      	movs	r5, r6
 80066ac:	2100      	movs	r1, #0
 80066ae:	200a      	movs	r0, #10
 80066b0:	68e3      	ldr	r3, [r4, #12]
 80066b2:	782a      	ldrb	r2, [r5, #0]
 80066b4:	1c6e      	adds	r6, r5, #1
 80066b6:	3a30      	subs	r2, #48	; 0x30
 80066b8:	2a09      	cmp	r2, #9
 80066ba:	d94e      	bls.n	800675a <_svfiprintf_r+0x17a>
 80066bc:	2900      	cmp	r1, #0
 80066be:	d111      	bne.n	80066e4 <_svfiprintf_r+0x104>
 80066c0:	e017      	b.n	80066f2 <_svfiprintf_r+0x112>
 80066c2:	3501      	adds	r5, #1
 80066c4:	e7b0      	b.n	8006628 <_svfiprintf_r+0x48>
 80066c6:	4b41      	ldr	r3, [pc, #260]	; (80067cc <_svfiprintf_r+0x1ec>)
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	1ac0      	subs	r0, r0, r3
 80066cc:	2301      	movs	r3, #1
 80066ce:	4083      	lsls	r3, r0
 80066d0:	4313      	orrs	r3, r2
 80066d2:	002e      	movs	r6, r5
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	e7ce      	b.n	8006676 <_svfiprintf_r+0x96>
 80066d8:	9b07      	ldr	r3, [sp, #28]
 80066da:	1d19      	adds	r1, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9107      	str	r1, [sp, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db01      	blt.n	80066e8 <_svfiprintf_r+0x108>
 80066e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e6:	e004      	b.n	80066f2 <_svfiprintf_r+0x112>
 80066e8:	425b      	negs	r3, r3
 80066ea:	60e3      	str	r3, [r4, #12]
 80066ec:	2302      	movs	r3, #2
 80066ee:	4313      	orrs	r3, r2
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	782b      	ldrb	r3, [r5, #0]
 80066f4:	2b2e      	cmp	r3, #46	; 0x2e
 80066f6:	d10a      	bne.n	800670e <_svfiprintf_r+0x12e>
 80066f8:	786b      	ldrb	r3, [r5, #1]
 80066fa:	2b2a      	cmp	r3, #42	; 0x2a
 80066fc:	d135      	bne.n	800676a <_svfiprintf_r+0x18a>
 80066fe:	9b07      	ldr	r3, [sp, #28]
 8006700:	3502      	adds	r5, #2
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	9207      	str	r2, [sp, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	db2b      	blt.n	8006764 <_svfiprintf_r+0x184>
 800670c:	9309      	str	r3, [sp, #36]	; 0x24
 800670e:	4e30      	ldr	r6, [pc, #192]	; (80067d0 <_svfiprintf_r+0x1f0>)
 8006710:	2203      	movs	r2, #3
 8006712:	0030      	movs	r0, r6
 8006714:	7829      	ldrb	r1, [r5, #0]
 8006716:	f000 f9e7 	bl	8006ae8 <memchr>
 800671a:	2800      	cmp	r0, #0
 800671c:	d006      	beq.n	800672c <_svfiprintf_r+0x14c>
 800671e:	2340      	movs	r3, #64	; 0x40
 8006720:	1b80      	subs	r0, r0, r6
 8006722:	4083      	lsls	r3, r0
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	3501      	adds	r5, #1
 8006728:	4313      	orrs	r3, r2
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	7829      	ldrb	r1, [r5, #0]
 800672e:	2206      	movs	r2, #6
 8006730:	4828      	ldr	r0, [pc, #160]	; (80067d4 <_svfiprintf_r+0x1f4>)
 8006732:	1c6e      	adds	r6, r5, #1
 8006734:	7621      	strb	r1, [r4, #24]
 8006736:	f000 f9d7 	bl	8006ae8 <memchr>
 800673a:	2800      	cmp	r0, #0
 800673c:	d03c      	beq.n	80067b8 <_svfiprintf_r+0x1d8>
 800673e:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <_svfiprintf_r+0x1f8>)
 8006740:	2b00      	cmp	r3, #0
 8006742:	d125      	bne.n	8006790 <_svfiprintf_r+0x1b0>
 8006744:	2207      	movs	r2, #7
 8006746:	9b07      	ldr	r3, [sp, #28]
 8006748:	3307      	adds	r3, #7
 800674a:	4393      	bics	r3, r2
 800674c:	3308      	adds	r3, #8
 800674e:	9307      	str	r3, [sp, #28]
 8006750:	6963      	ldr	r3, [r4, #20]
 8006752:	9a04      	ldr	r2, [sp, #16]
 8006754:	189b      	adds	r3, r3, r2
 8006756:	6163      	str	r3, [r4, #20]
 8006758:	e765      	b.n	8006626 <_svfiprintf_r+0x46>
 800675a:	4343      	muls	r3, r0
 800675c:	0035      	movs	r5, r6
 800675e:	2101      	movs	r1, #1
 8006760:	189b      	adds	r3, r3, r2
 8006762:	e7a6      	b.n	80066b2 <_svfiprintf_r+0xd2>
 8006764:	2301      	movs	r3, #1
 8006766:	425b      	negs	r3, r3
 8006768:	e7d0      	b.n	800670c <_svfiprintf_r+0x12c>
 800676a:	2300      	movs	r3, #0
 800676c:	200a      	movs	r0, #10
 800676e:	001a      	movs	r2, r3
 8006770:	3501      	adds	r5, #1
 8006772:	6063      	str	r3, [r4, #4]
 8006774:	7829      	ldrb	r1, [r5, #0]
 8006776:	1c6e      	adds	r6, r5, #1
 8006778:	3930      	subs	r1, #48	; 0x30
 800677a:	2909      	cmp	r1, #9
 800677c:	d903      	bls.n	8006786 <_svfiprintf_r+0x1a6>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0c5      	beq.n	800670e <_svfiprintf_r+0x12e>
 8006782:	9209      	str	r2, [sp, #36]	; 0x24
 8006784:	e7c3      	b.n	800670e <_svfiprintf_r+0x12e>
 8006786:	4342      	muls	r2, r0
 8006788:	0035      	movs	r5, r6
 800678a:	2301      	movs	r3, #1
 800678c:	1852      	adds	r2, r2, r1
 800678e:	e7f1      	b.n	8006774 <_svfiprintf_r+0x194>
 8006790:	ab07      	add	r3, sp, #28
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	003a      	movs	r2, r7
 8006796:	0021      	movs	r1, r4
 8006798:	4b10      	ldr	r3, [pc, #64]	; (80067dc <_svfiprintf_r+0x1fc>)
 800679a:	9803      	ldr	r0, [sp, #12]
 800679c:	e000      	b.n	80067a0 <_svfiprintf_r+0x1c0>
 800679e:	bf00      	nop
 80067a0:	9004      	str	r0, [sp, #16]
 80067a2:	9b04      	ldr	r3, [sp, #16]
 80067a4:	3301      	adds	r3, #1
 80067a6:	d1d3      	bne.n	8006750 <_svfiprintf_r+0x170>
 80067a8:	89bb      	ldrh	r3, [r7, #12]
 80067aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80067ac:	065b      	lsls	r3, r3, #25
 80067ae:	d400      	bmi.n	80067b2 <_svfiprintf_r+0x1d2>
 80067b0:	e72d      	b.n	800660e <_svfiprintf_r+0x2e>
 80067b2:	2001      	movs	r0, #1
 80067b4:	4240      	negs	r0, r0
 80067b6:	e72a      	b.n	800660e <_svfiprintf_r+0x2e>
 80067b8:	ab07      	add	r3, sp, #28
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	003a      	movs	r2, r7
 80067be:	0021      	movs	r1, r4
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <_svfiprintf_r+0x1fc>)
 80067c2:	9803      	ldr	r0, [sp, #12]
 80067c4:	f000 f87c 	bl	80068c0 <_printf_i>
 80067c8:	e7ea      	b.n	80067a0 <_svfiprintf_r+0x1c0>
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	08006d48 	.word	0x08006d48
 80067d0:	08006d4e 	.word	0x08006d4e
 80067d4:	08006d52 	.word	0x08006d52
 80067d8:	00000000 	.word	0x00000000
 80067dc:	0800651d 	.word	0x0800651d

080067e0 <_printf_common>:
 80067e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067e2:	0015      	movs	r5, r2
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	688a      	ldr	r2, [r1, #8]
 80067e8:	690b      	ldr	r3, [r1, #16]
 80067ea:	000c      	movs	r4, r1
 80067ec:	9000      	str	r0, [sp, #0]
 80067ee:	4293      	cmp	r3, r2
 80067f0:	da00      	bge.n	80067f4 <_printf_common+0x14>
 80067f2:	0013      	movs	r3, r2
 80067f4:	0022      	movs	r2, r4
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	3243      	adds	r2, #67	; 0x43
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	d001      	beq.n	8006804 <_printf_common+0x24>
 8006800:	3301      	adds	r3, #1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	069b      	lsls	r3, r3, #26
 8006808:	d502      	bpl.n	8006810 <_printf_common+0x30>
 800680a:	682b      	ldr	r3, [r5, #0]
 800680c:	3302      	adds	r3, #2
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	2306      	movs	r3, #6
 8006814:	0017      	movs	r7, r2
 8006816:	401f      	ands	r7, r3
 8006818:	421a      	tst	r2, r3
 800681a:	d027      	beq.n	800686c <_printf_common+0x8c>
 800681c:	0023      	movs	r3, r4
 800681e:	3343      	adds	r3, #67	; 0x43
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	1e5a      	subs	r2, r3, #1
 8006824:	4193      	sbcs	r3, r2
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	0692      	lsls	r2, r2, #26
 800682a:	d430      	bmi.n	800688e <_printf_common+0xae>
 800682c:	0022      	movs	r2, r4
 800682e:	9901      	ldr	r1, [sp, #4]
 8006830:	9800      	ldr	r0, [sp, #0]
 8006832:	9e08      	ldr	r6, [sp, #32]
 8006834:	3243      	adds	r2, #67	; 0x43
 8006836:	47b0      	blx	r6
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d025      	beq.n	8006888 <_printf_common+0xa8>
 800683c:	2306      	movs	r3, #6
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	682a      	ldr	r2, [r5, #0]
 8006842:	68e1      	ldr	r1, [r4, #12]
 8006844:	2500      	movs	r5, #0
 8006846:	4003      	ands	r3, r0
 8006848:	2b04      	cmp	r3, #4
 800684a:	d103      	bne.n	8006854 <_printf_common+0x74>
 800684c:	1a8d      	subs	r5, r1, r2
 800684e:	43eb      	mvns	r3, r5
 8006850:	17db      	asrs	r3, r3, #31
 8006852:	401d      	ands	r5, r3
 8006854:	68a3      	ldr	r3, [r4, #8]
 8006856:	6922      	ldr	r2, [r4, #16]
 8006858:	4293      	cmp	r3, r2
 800685a:	dd01      	ble.n	8006860 <_printf_common+0x80>
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	18ed      	adds	r5, r5, r3
 8006860:	2700      	movs	r7, #0
 8006862:	42bd      	cmp	r5, r7
 8006864:	d120      	bne.n	80068a8 <_printf_common+0xc8>
 8006866:	2000      	movs	r0, #0
 8006868:	e010      	b.n	800688c <_printf_common+0xac>
 800686a:	3701      	adds	r7, #1
 800686c:	68e3      	ldr	r3, [r4, #12]
 800686e:	682a      	ldr	r2, [r5, #0]
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	42bb      	cmp	r3, r7
 8006874:	ddd2      	ble.n	800681c <_printf_common+0x3c>
 8006876:	0022      	movs	r2, r4
 8006878:	2301      	movs	r3, #1
 800687a:	9901      	ldr	r1, [sp, #4]
 800687c:	9800      	ldr	r0, [sp, #0]
 800687e:	9e08      	ldr	r6, [sp, #32]
 8006880:	3219      	adds	r2, #25
 8006882:	47b0      	blx	r6
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d1f0      	bne.n	800686a <_printf_common+0x8a>
 8006888:	2001      	movs	r0, #1
 800688a:	4240      	negs	r0, r0
 800688c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800688e:	2030      	movs	r0, #48	; 0x30
 8006890:	18e1      	adds	r1, r4, r3
 8006892:	3143      	adds	r1, #67	; 0x43
 8006894:	7008      	strb	r0, [r1, #0]
 8006896:	0021      	movs	r1, r4
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	3145      	adds	r1, #69	; 0x45
 800689c:	7809      	ldrb	r1, [r1, #0]
 800689e:	18a2      	adds	r2, r4, r2
 80068a0:	3243      	adds	r2, #67	; 0x43
 80068a2:	3302      	adds	r3, #2
 80068a4:	7011      	strb	r1, [r2, #0]
 80068a6:	e7c1      	b.n	800682c <_printf_common+0x4c>
 80068a8:	0022      	movs	r2, r4
 80068aa:	2301      	movs	r3, #1
 80068ac:	9901      	ldr	r1, [sp, #4]
 80068ae:	9800      	ldr	r0, [sp, #0]
 80068b0:	9e08      	ldr	r6, [sp, #32]
 80068b2:	321a      	adds	r2, #26
 80068b4:	47b0      	blx	r6
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d0e6      	beq.n	8006888 <_printf_common+0xa8>
 80068ba:	3701      	adds	r7, #1
 80068bc:	e7d1      	b.n	8006862 <_printf_common+0x82>
	...

080068c0 <_printf_i>:
 80068c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c2:	b08b      	sub	sp, #44	; 0x2c
 80068c4:	9206      	str	r2, [sp, #24]
 80068c6:	000a      	movs	r2, r1
 80068c8:	3243      	adds	r2, #67	; 0x43
 80068ca:	9307      	str	r3, [sp, #28]
 80068cc:	9005      	str	r0, [sp, #20]
 80068ce:	9204      	str	r2, [sp, #16]
 80068d0:	7e0a      	ldrb	r2, [r1, #24]
 80068d2:	000c      	movs	r4, r1
 80068d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068d6:	2a78      	cmp	r2, #120	; 0x78
 80068d8:	d807      	bhi.n	80068ea <_printf_i+0x2a>
 80068da:	2a62      	cmp	r2, #98	; 0x62
 80068dc:	d809      	bhi.n	80068f2 <_printf_i+0x32>
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d100      	bne.n	80068e4 <_printf_i+0x24>
 80068e2:	e0c1      	b.n	8006a68 <_printf_i+0x1a8>
 80068e4:	2a58      	cmp	r2, #88	; 0x58
 80068e6:	d100      	bne.n	80068ea <_printf_i+0x2a>
 80068e8:	e08c      	b.n	8006a04 <_printf_i+0x144>
 80068ea:	0026      	movs	r6, r4
 80068ec:	3642      	adds	r6, #66	; 0x42
 80068ee:	7032      	strb	r2, [r6, #0]
 80068f0:	e022      	b.n	8006938 <_printf_i+0x78>
 80068f2:	0010      	movs	r0, r2
 80068f4:	3863      	subs	r0, #99	; 0x63
 80068f6:	2815      	cmp	r0, #21
 80068f8:	d8f7      	bhi.n	80068ea <_printf_i+0x2a>
 80068fa:	f7f9 fc05 	bl	8000108 <__gnu_thumb1_case_shi>
 80068fe:	0016      	.short	0x0016
 8006900:	fff6001f 	.word	0xfff6001f
 8006904:	fff6fff6 	.word	0xfff6fff6
 8006908:	001ffff6 	.word	0x001ffff6
 800690c:	fff6fff6 	.word	0xfff6fff6
 8006910:	fff6fff6 	.word	0xfff6fff6
 8006914:	003600a8 	.word	0x003600a8
 8006918:	fff6009a 	.word	0xfff6009a
 800691c:	00b9fff6 	.word	0x00b9fff6
 8006920:	0036fff6 	.word	0x0036fff6
 8006924:	fff6fff6 	.word	0xfff6fff6
 8006928:	009e      	.short	0x009e
 800692a:	0026      	movs	r6, r4
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	3642      	adds	r6, #66	; 0x42
 8006930:	1d11      	adds	r1, r2, #4
 8006932:	6019      	str	r1, [r3, #0]
 8006934:	6813      	ldr	r3, [r2, #0]
 8006936:	7033      	strb	r3, [r6, #0]
 8006938:	2301      	movs	r3, #1
 800693a:	e0a7      	b.n	8006a8c <_printf_i+0x1cc>
 800693c:	6808      	ldr	r0, [r1, #0]
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	1d0a      	adds	r2, r1, #4
 8006942:	0605      	lsls	r5, r0, #24
 8006944:	d50b      	bpl.n	800695e <_printf_i+0x9e>
 8006946:	680d      	ldr	r5, [r1, #0]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	2d00      	cmp	r5, #0
 800694c:	da03      	bge.n	8006956 <_printf_i+0x96>
 800694e:	232d      	movs	r3, #45	; 0x2d
 8006950:	9a04      	ldr	r2, [sp, #16]
 8006952:	426d      	negs	r5, r5
 8006954:	7013      	strb	r3, [r2, #0]
 8006956:	4b61      	ldr	r3, [pc, #388]	; (8006adc <_printf_i+0x21c>)
 8006958:	270a      	movs	r7, #10
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	e01b      	b.n	8006996 <_printf_i+0xd6>
 800695e:	680d      	ldr	r5, [r1, #0]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	0641      	lsls	r1, r0, #25
 8006964:	d5f1      	bpl.n	800694a <_printf_i+0x8a>
 8006966:	b22d      	sxth	r5, r5
 8006968:	e7ef      	b.n	800694a <_printf_i+0x8a>
 800696a:	680d      	ldr	r5, [r1, #0]
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	1d08      	adds	r0, r1, #4
 8006970:	6018      	str	r0, [r3, #0]
 8006972:	062e      	lsls	r6, r5, #24
 8006974:	d501      	bpl.n	800697a <_printf_i+0xba>
 8006976:	680d      	ldr	r5, [r1, #0]
 8006978:	e003      	b.n	8006982 <_printf_i+0xc2>
 800697a:	066d      	lsls	r5, r5, #25
 800697c:	d5fb      	bpl.n	8006976 <_printf_i+0xb6>
 800697e:	680d      	ldr	r5, [r1, #0]
 8006980:	b2ad      	uxth	r5, r5
 8006982:	4b56      	ldr	r3, [pc, #344]	; (8006adc <_printf_i+0x21c>)
 8006984:	2708      	movs	r7, #8
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	2a6f      	cmp	r2, #111	; 0x6f
 800698a:	d000      	beq.n	800698e <_printf_i+0xce>
 800698c:	3702      	adds	r7, #2
 800698e:	0023      	movs	r3, r4
 8006990:	2200      	movs	r2, #0
 8006992:	3343      	adds	r3, #67	; 0x43
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	6863      	ldr	r3, [r4, #4]
 8006998:	60a3      	str	r3, [r4, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	db03      	blt.n	80069a6 <_printf_i+0xe6>
 800699e:	2204      	movs	r2, #4
 80069a0:	6821      	ldr	r1, [r4, #0]
 80069a2:	4391      	bics	r1, r2
 80069a4:	6021      	str	r1, [r4, #0]
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	d102      	bne.n	80069b0 <_printf_i+0xf0>
 80069aa:	9e04      	ldr	r6, [sp, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <_printf_i+0x10a>
 80069b0:	9e04      	ldr	r6, [sp, #16]
 80069b2:	0028      	movs	r0, r5
 80069b4:	0039      	movs	r1, r7
 80069b6:	f7f9 fc37 	bl	8000228 <__aeabi_uidivmod>
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	3e01      	subs	r6, #1
 80069be:	5c5b      	ldrb	r3, [r3, r1]
 80069c0:	7033      	strb	r3, [r6, #0]
 80069c2:	002b      	movs	r3, r5
 80069c4:	0005      	movs	r5, r0
 80069c6:	429f      	cmp	r7, r3
 80069c8:	d9f3      	bls.n	80069b2 <_printf_i+0xf2>
 80069ca:	2f08      	cmp	r7, #8
 80069cc:	d109      	bne.n	80069e2 <_printf_i+0x122>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	07db      	lsls	r3, r3, #31
 80069d2:	d506      	bpl.n	80069e2 <_printf_i+0x122>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	6922      	ldr	r2, [r4, #16]
 80069d8:	4293      	cmp	r3, r2
 80069da:	dc02      	bgt.n	80069e2 <_printf_i+0x122>
 80069dc:	2330      	movs	r3, #48	; 0x30
 80069de:	3e01      	subs	r6, #1
 80069e0:	7033      	strb	r3, [r6, #0]
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	1b9b      	subs	r3, r3, r6
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	9b07      	ldr	r3, [sp, #28]
 80069ea:	0021      	movs	r1, r4
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	9805      	ldr	r0, [sp, #20]
 80069f0:	9b06      	ldr	r3, [sp, #24]
 80069f2:	aa09      	add	r2, sp, #36	; 0x24
 80069f4:	f7ff fef4 	bl	80067e0 <_printf_common>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d14c      	bne.n	8006a96 <_printf_i+0x1d6>
 80069fc:	2001      	movs	r0, #1
 80069fe:	4240      	negs	r0, r0
 8006a00:	b00b      	add	sp, #44	; 0x2c
 8006a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a04:	3145      	adds	r1, #69	; 0x45
 8006a06:	700a      	strb	r2, [r1, #0]
 8006a08:	4a34      	ldr	r2, [pc, #208]	; (8006adc <_printf_i+0x21c>)
 8006a0a:	9203      	str	r2, [sp, #12]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	6821      	ldr	r1, [r4, #0]
 8006a10:	ca20      	ldmia	r2!, {r5}
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	0608      	lsls	r0, r1, #24
 8006a16:	d516      	bpl.n	8006a46 <_printf_i+0x186>
 8006a18:	07cb      	lsls	r3, r1, #31
 8006a1a:	d502      	bpl.n	8006a22 <_printf_i+0x162>
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	4319      	orrs	r1, r3
 8006a20:	6021      	str	r1, [r4, #0]
 8006a22:	2710      	movs	r7, #16
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	d1b2      	bne.n	800698e <_printf_i+0xce>
 8006a28:	2320      	movs	r3, #32
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	439a      	bics	r2, r3
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	e7ad      	b.n	800698e <_printf_i+0xce>
 8006a32:	2220      	movs	r2, #32
 8006a34:	6809      	ldr	r1, [r1, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	6022      	str	r2, [r4, #0]
 8006a3a:	0022      	movs	r2, r4
 8006a3c:	2178      	movs	r1, #120	; 0x78
 8006a3e:	3245      	adds	r2, #69	; 0x45
 8006a40:	7011      	strb	r1, [r2, #0]
 8006a42:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <_printf_i+0x220>)
 8006a44:	e7e1      	b.n	8006a0a <_printf_i+0x14a>
 8006a46:	0648      	lsls	r0, r1, #25
 8006a48:	d5e6      	bpl.n	8006a18 <_printf_i+0x158>
 8006a4a:	b2ad      	uxth	r5, r5
 8006a4c:	e7e4      	b.n	8006a18 <_printf_i+0x158>
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	680d      	ldr	r5, [r1, #0]
 8006a52:	1d10      	adds	r0, r2, #4
 8006a54:	6949      	ldr	r1, [r1, #20]
 8006a56:	6018      	str	r0, [r3, #0]
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	062e      	lsls	r6, r5, #24
 8006a5c:	d501      	bpl.n	8006a62 <_printf_i+0x1a2>
 8006a5e:	6019      	str	r1, [r3, #0]
 8006a60:	e002      	b.n	8006a68 <_printf_i+0x1a8>
 8006a62:	066d      	lsls	r5, r5, #25
 8006a64:	d5fb      	bpl.n	8006a5e <_printf_i+0x19e>
 8006a66:	8019      	strh	r1, [r3, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9e04      	ldr	r6, [sp, #16]
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	e7bb      	b.n	80069e8 <_printf_i+0x128>
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	1d11      	adds	r1, r2, #4
 8006a74:	6019      	str	r1, [r3, #0]
 8006a76:	6816      	ldr	r6, [r2, #0]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	0030      	movs	r0, r6
 8006a7c:	6862      	ldr	r2, [r4, #4]
 8006a7e:	f000 f833 	bl	8006ae8 <memchr>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d001      	beq.n	8006a8a <_printf_i+0x1ca>
 8006a86:	1b80      	subs	r0, r0, r6
 8006a88:	6060      	str	r0, [r4, #4]
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9a04      	ldr	r2, [sp, #16]
 8006a92:	7013      	strb	r3, [r2, #0]
 8006a94:	e7a8      	b.n	80069e8 <_printf_i+0x128>
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	0032      	movs	r2, r6
 8006a9a:	9906      	ldr	r1, [sp, #24]
 8006a9c:	9805      	ldr	r0, [sp, #20]
 8006a9e:	9d07      	ldr	r5, [sp, #28]
 8006aa0:	47a8      	blx	r5
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d0aa      	beq.n	80069fc <_printf_i+0x13c>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	079b      	lsls	r3, r3, #30
 8006aaa:	d415      	bmi.n	8006ad8 <_printf_i+0x218>
 8006aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aae:	68e0      	ldr	r0, [r4, #12]
 8006ab0:	4298      	cmp	r0, r3
 8006ab2:	daa5      	bge.n	8006a00 <_printf_i+0x140>
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	e7a3      	b.n	8006a00 <_printf_i+0x140>
 8006ab8:	0022      	movs	r2, r4
 8006aba:	2301      	movs	r3, #1
 8006abc:	9906      	ldr	r1, [sp, #24]
 8006abe:	9805      	ldr	r0, [sp, #20]
 8006ac0:	9e07      	ldr	r6, [sp, #28]
 8006ac2:	3219      	adds	r2, #25
 8006ac4:	47b0      	blx	r6
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d098      	beq.n	80069fc <_printf_i+0x13c>
 8006aca:	3501      	adds	r5, #1
 8006acc:	68e3      	ldr	r3, [r4, #12]
 8006ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	42ab      	cmp	r3, r5
 8006ad4:	dcf0      	bgt.n	8006ab8 <_printf_i+0x1f8>
 8006ad6:	e7e9      	b.n	8006aac <_printf_i+0x1ec>
 8006ad8:	2500      	movs	r5, #0
 8006ada:	e7f7      	b.n	8006acc <_printf_i+0x20c>
 8006adc:	08006d59 	.word	0x08006d59
 8006ae0:	08006d6a 	.word	0x08006d6a

08006ae4 <__retarget_lock_acquire_recursive>:
 8006ae4:	4770      	bx	lr

08006ae6 <__retarget_lock_release_recursive>:
 8006ae6:	4770      	bx	lr

08006ae8 <memchr>:
 8006ae8:	b2c9      	uxtb	r1, r1
 8006aea:	1882      	adds	r2, r0, r2
 8006aec:	4290      	cmp	r0, r2
 8006aee:	d101      	bne.n	8006af4 <memchr+0xc>
 8006af0:	2000      	movs	r0, #0
 8006af2:	4770      	bx	lr
 8006af4:	7803      	ldrb	r3, [r0, #0]
 8006af6:	428b      	cmp	r3, r1
 8006af8:	d0fb      	beq.n	8006af2 <memchr+0xa>
 8006afa:	3001      	adds	r0, #1
 8006afc:	e7f6      	b.n	8006aec <memchr+0x4>

08006afe <memmove>:
 8006afe:	b510      	push	{r4, lr}
 8006b00:	4288      	cmp	r0, r1
 8006b02:	d902      	bls.n	8006b0a <memmove+0xc>
 8006b04:	188b      	adds	r3, r1, r2
 8006b06:	4298      	cmp	r0, r3
 8006b08:	d303      	bcc.n	8006b12 <memmove+0x14>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e007      	b.n	8006b1e <memmove+0x20>
 8006b0e:	5c8b      	ldrb	r3, [r1, r2]
 8006b10:	5483      	strb	r3, [r0, r2]
 8006b12:	3a01      	subs	r2, #1
 8006b14:	d2fb      	bcs.n	8006b0e <memmove+0x10>
 8006b16:	bd10      	pop	{r4, pc}
 8006b18:	5ccc      	ldrb	r4, [r1, r3]
 8006b1a:	54c4      	strb	r4, [r0, r3]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d1fa      	bne.n	8006b18 <memmove+0x1a>
 8006b22:	e7f8      	b.n	8006b16 <memmove+0x18>

08006b24 <_realloc_r>:
 8006b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b26:	0007      	movs	r7, r0
 8006b28:	000e      	movs	r6, r1
 8006b2a:	0014      	movs	r4, r2
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d105      	bne.n	8006b3c <_realloc_r+0x18>
 8006b30:	0011      	movs	r1, r2
 8006b32:	f7ff fbef 	bl	8006314 <_malloc_r>
 8006b36:	0005      	movs	r5, r0
 8006b38:	0028      	movs	r0, r5
 8006b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	d103      	bne.n	8006b48 <_realloc_r+0x24>
 8006b40:	f7ff fb7c 	bl	800623c <_free_r>
 8006b44:	0025      	movs	r5, r4
 8006b46:	e7f7      	b.n	8006b38 <_realloc_r+0x14>
 8006b48:	f000 f81b 	bl	8006b82 <_malloc_usable_size_r>
 8006b4c:	9001      	str	r0, [sp, #4]
 8006b4e:	4284      	cmp	r4, r0
 8006b50:	d803      	bhi.n	8006b5a <_realloc_r+0x36>
 8006b52:	0035      	movs	r5, r6
 8006b54:	0843      	lsrs	r3, r0, #1
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	d3ee      	bcc.n	8006b38 <_realloc_r+0x14>
 8006b5a:	0021      	movs	r1, r4
 8006b5c:	0038      	movs	r0, r7
 8006b5e:	f7ff fbd9 	bl	8006314 <_malloc_r>
 8006b62:	1e05      	subs	r5, r0, #0
 8006b64:	d0e8      	beq.n	8006b38 <_realloc_r+0x14>
 8006b66:	9b01      	ldr	r3, [sp, #4]
 8006b68:	0022      	movs	r2, r4
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d900      	bls.n	8006b70 <_realloc_r+0x4c>
 8006b6e:	001a      	movs	r2, r3
 8006b70:	0031      	movs	r1, r6
 8006b72:	0028      	movs	r0, r5
 8006b74:	f7ff fb50 	bl	8006218 <memcpy>
 8006b78:	0031      	movs	r1, r6
 8006b7a:	0038      	movs	r0, r7
 8006b7c:	f7ff fb5e 	bl	800623c <_free_r>
 8006b80:	e7da      	b.n	8006b38 <_realloc_r+0x14>

08006b82 <_malloc_usable_size_r>:
 8006b82:	1f0b      	subs	r3, r1, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	1f18      	subs	r0, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da01      	bge.n	8006b90 <_malloc_usable_size_r+0xe>
 8006b8c:	580b      	ldr	r3, [r1, r0]
 8006b8e:	18c0      	adds	r0, r0, r3
 8006b90:	4770      	bx	lr
	...

08006b94 <_init>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr

08006ba0 <_fini>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr
